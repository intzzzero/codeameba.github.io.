<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AmebaLab</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://codeameba.github.io/"/>
  <updated>2020-02-20T10:00:21.772Z</updated>
  <id>http://codeameba.github.io/</id>
  
  <author>
    <name>Sooyoung Jeong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>불안의 이유</title>
    <link href="http://codeameba.github.io/2020/02/20/blog/do-it-now/"/>
    <id>http://codeameba.github.io/2020/02/20/blog/do-it-now/</id>
    <published>2020-02-20T09:05:42.000Z</published>
    <updated>2020-02-20T10:00:21.772Z</updated>
    
    <content type="html"><![CDATA[<p>대개의 경우 불안을 느끼는 이유는 부족함에 있다. 공부가 부족하여 아는 게 없을 때, 돈이 부족하여 할부금을 낼 수 없을 때, 시간이 부족하여 일을 마무리 할 수 없을 때 등.</p><p>그런데 재미있는 것은, ‘과거의 나’는 ‘지금의 나’의 불안을 예상 가능했다는 것이다. 그 말은 곧, 대부분의 불안은 ‘예측 가능한 미래보다 현재의 귀찮음이 앞설 때’ 이미 정해진다는 것이다.</p><p>불안이 싫다면, 지금 움직이자.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;대개의 경우 불안을 느끼는 이유는 부족함에 있다. 공부가 부족하여 아는 게 없을 때, 돈이 부족하여 할부금을 낼 수 없을 때, 시간이 부족하여 일을 마무리 할 수 없을 때 등.&lt;/p&gt;
&lt;p&gt;그런데 재미있는 것은, ‘과거의 나’는 ‘지금의 나’의 
      
    
    </summary>
    
    
      <category term="생각정리" scheme="http://codeameba.github.io/categories/%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/"/>
    
    
      <category term="생각정리" scheme="http://codeameba.github.io/tags/%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/"/>
    
      <category term="블로그" scheme="http://codeameba.github.io/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8/"/>
    
      <category term="blog" scheme="http://codeameba.github.io/tags/blog/"/>
    
      <category term="불안의이유" scheme="http://codeameba.github.io/tags/%EB%B6%88%EC%95%88%EC%9D%98%EC%9D%B4%EC%9C%A0/"/>
    
  </entry>
  
  <entry>
    <title>[TIL] list와 tuple의 차이 그리고 dictionary</title>
    <link href="http://codeameba.github.io/2020/02/18/programming/python-til-01/"/>
    <id>http://codeameba.github.io/2020/02/18/programming/python-til-01/</id>
    <published>2020-02-18T04:40:42.000Z</published>
    <updated>2020-02-19T13:00:43.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="리스트-list"><a href="#리스트-list" class="headerlink" title="리스트(list)"></a>리스트(list)</h2><ul><li>리스트는 재할당(assignment)이 가능</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">x[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line">print(x) <span class="comment">#[5, 2, 3]</span></span><br></pre></td></tr></table></figure><h2 id="튜플-tuple"><a href="#튜플-tuple" class="headerlink" title="튜플(tuple)"></a>튜플(tuple)</h2><ul><li>튜플은 재할당 불가능</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">x[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line">print(x) <span class="comment">#TypeError: 'tuple' object does not support item assignment</span></span><br></pre></td></tr></table></figure><h2 id="딕셔너리-dictionary"><a href="#딕셔너리-dictionary" class="headerlink" title="딕셔너리(dictionary)"></a>딕셔너리(dictionary)</h2><ul><li><code>key : value</code> 한 쌍으로 이루어진 자료구조</li><li>자바스크립트의 객체와 유사</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = &#123;</span><br><span class="line">    “hello”: “world”,</span><br><span class="line">    “beer”: “good”,</span><br><span class="line">    <span class="number">3</span>: “what”</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(x[“beer”]) <span class="comment">#good</span></span><br><span class="line">print(x[<span class="number">3</span>]) <span class="comment">#what</span></span><br></pre></td></tr></table></figure><h2 id="리스트와-딕셔너리의-활용"><a href="#리스트와-딕셔너리의-활용" class="headerlink" title="리스트와 딕셔너리의 활용"></a>리스트와 딕셔너리의 활용</h2><ul><li>리스트에서 중복된 요소들을 딕셔너리로 정리</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fruit = [“사과”, “사과”, “바나나”, “바나나”, “딸기”, “키위”, “복숭아”, “복숭아”, “복숭아”]</span><br><span class="line"></span><br><span class="line">d = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> fruit:</span><br><span class="line">    <span class="keyword">if</span> f <span class="keyword">in</span> d:</span><br><span class="line">        d[f] = d[f] + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        d[f] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(d)</span><br><span class="line"><span class="comment">#&#123;'사과': 2, '바나나': 2, '딸기': 1, '키위': 1, '복숭아': 3&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;리스트-list&quot;&gt;&lt;a href=&quot;#리스트-list&quot; class=&quot;headerlink&quot; title=&quot;리스트(list)&quot;&gt;&lt;/a&gt;리스트(list)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;리스트는 재할당(assignment)이 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;f
      
    
    </summary>
    
    
      <category term="Python" scheme="http://codeameba.github.io/categories/Python/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="python" scheme="http://codeameba.github.io/tags/python/"/>
    
      <category term="파이썬" scheme="http://codeameba.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 블로그에 디스커스(Disqus) 코드 추가하여 댓글 기능 넣기</title>
    <link href="http://codeameba.github.io/2020/02/15/blog/disqus-setting/"/>
    <id>http://codeameba.github.io/2020/02/15/blog/disqus-setting/</id>
    <published>2020-02-14T16:00:42.000Z</published>
    <updated>2020-02-20T22:13:53.702Z</updated>
    
    <content type="html"><![CDATA[<h2 id="디스커스-Disqus"><a href="#디스커스-Disqus" class="headerlink" title="디스커스(Disqus)"></a>디스커스(Disqus)</h2><p>네이버 블로그나 티스토리 같은 블로그 서비스에는 자체적인 댓글 기능이 있지만, Hexo, Jekyll, Gatsby 등의 정적 사이트로 블로그를 만든 경우에는 손수 댓글 기능을 추가해야만 한다. 내 경우에는 Hexo를 쓰고 있다.</p><p>물론, 테마에 따라서는 yml에 디스커스 ID를 추가하는 것만으로도 손쉽게 추가할 수도 있지만, 내가 쓰는 테마에는 없었기에 약간의 시행착오가 필요했다. 그리고, 마침내 코드를 추가하는 방식으로 디스커스 댓글 기능을 사용할 수 있게 되었고, 만약 나처럼 테마에 디스커스 항목이 없어서 당황할 사람들을 위해 기록을 남겨둔다.<br>뭐, 미래의 내가 다시 보고 따라해야 할 수도 있고…</p><h2 id="디스커스-코드-구하러-가기"><a href="#디스커스-코드-구하러-가기" class="headerlink" title="디스커스 코드 구하러 가기"></a>디스커스 코드 구하러 가기</h2><p>가입은 했다 치고, 디스커스에 접속한다. 그리고, GET STARTED를 클릭한다.<br><img src="/images/disqus01.png"></p><p>아래와 같은 페이지 넘어가게 되는데, 아이콘만 보더라도 댓글 기능처럼 보이는 위의 것을 선택한다.<br><img src="/images/disqus02.png"></p><p>그리고, 홈이 나오면, 우측 상단의 설정 메뉴에서 Admin을 눌러 이동한다. 이어서 나오는 페이지에서는 Installing Disqus를 클릭한다.<br><img src="/images/disqus03.png"><br><img src="/images/disqus04.png"></p><p>‘어라? 뭔가 잘못 찾아온 거 아닌가’ 싶을 것이다. 이어진 페이지에서 등장하는 아이콘들은 디스커스와 모종의 관계를 맺고 간단히 댓글 기능을 추가할 수 있는 자본의 노예들이다. 당황하지 말고 스크롤을 내리자.<br>그리고, ‘난 너희랑 달라~’ 라는 생각을 하며 당당하게 Universal Code를 얻으러 간다.<br><img src="/images/disqus05.png"></p><p>이것이 디스커스 댓글 기능이 담긴 코드다.<br><img src="/images/disqus06.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"disqus_thread"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">/**</span><br><span class="line">*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.</span><br><span class="line"><span class="actionscript">*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https:<span class="comment">//disqus.com/admin/universalcode/#configuration-variables*/</span></span></span><br><span class="line">/*</span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> disqus_config = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.page.url = PAGE_URL;  <span class="comment">// Replace PAGE_URL with your page's canonical URL variable</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.page.identifier = PAGE_IDENTIFIER; <span class="comment">// Replace PAGE_IDENTIFIER with your page's unique identifier variable</span></span></span><br><span class="line">&#125;;</span><br><span class="line">*/</span><br><span class="line"><span class="actionscript">(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123; <span class="comment">// DON'T EDIT BELOW THIS LINE</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> d = <span class="built_in">document</span>, s = d.createElement(<span class="string">'script'</span>);</span></span><br><span class="line"><span class="actionscript">s.src = <span class="string">'https://본인블로그URL/embed.js'</span>;</span></span><br><span class="line"><span class="javascript">s.setAttribute(<span class="string">'data-timestamp'</span>, +<span class="keyword">new</span> <span class="built_in">Date</span>());</span></span><br><span class="line">(d.head || d.body).appendChild(s);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span>Please enable JavaScript to view the <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://disqus.com/?ref_noscript"</span>&gt;</span>comments powered by Disqus.<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="디스커스-코드-추가하기"><a href="#디스커스-코드-추가하기" class="headerlink" title="디스커스 코드 추가하기"></a>디스커스 코드 추가하기</h2><p>코드는 구했으니 이제 정적 페이지 소스 코드에 추가해야 한다.<br>내 경우에는 블로그를 구성하는 테마의 확장자가 ejs로 되어 있으며, 파일명을 통해 어느 페이지와 파트를 구성하는 지 대략 확인 가능하다.<br><img src="/images/disqus07.png"></p><p>댓글의 위치가 가장 하단이라고 해서 자칫 footer.ejs에 코드를 추가하는 불상사는 없길 바란다. 메인 페이지부터 컨텍 페이지까지 댓글이 달리게 되는 수가 있다. 물론, 그것이 바라던 바라면 그렇게 해도 무방하다.<br>하지만, 나는 포스트에만 댓글이 추가되길 바라기 떄문에 pose.ejs에 코드를 추가했다.<br><img src="/images/disqus08.png"></p><h2 id="디스커스-스타일-변경"><a href="#디스커스-스타일-변경" class="headerlink" title="디스커스 스타일 변경"></a>디스커스 스타일 변경</h2><p>아마 디스커스 코드만 추가하고 잘 붙었나~ 확인해보면, 아래와 같이 너비가 100%일 것이다.<br><img src="/images/disqus09.png"></p><p>이대로 마음에 든다면 그냥 써도 되겠지만, 내 포스트는 모두 최대 너비를 780px로 통일했기 때문에 조정이 필요했다. 따라서 블로그 테마의 CSS를 조금 만져야 했다. 이 또한 경우에 따라 다를 수 있겠지만, 대개의 경우 나처럼 styl(스타일러스)로 되어 있을 것이며, 만약 아니더라도 사용상의 차이는 크지 않을 것이다.<br><img src="/images/disqus10.png"></p><p>이 중에서 건드려야 할 것은 custom.styl이다. 디스커스 코드의 ID는 disqus_thread이며, 아래와 같이 스타일을 변경하였고,</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#disqus_thread</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">780px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>결과적으로 지금의 형태가 되었다.<br><img src="/images/disqus11.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;디스커스-Disqus&quot;&gt;&lt;a href=&quot;#디스커스-Disqus&quot; class=&quot;headerlink&quot; title=&quot;디스커스(Disqus)&quot;&gt;&lt;/a&gt;디스커스(Disqus)&lt;/h2&gt;&lt;p&gt;네이버 블로그나 티스토리 같은 블로그 서비스에는 자체적인 
      
    
    </summary>
    
    
      <category term="tip" scheme="http://codeameba.github.io/categories/tip/"/>
    
    
      <category term="블로그" scheme="http://codeameba.github.io/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8/"/>
    
      <category term="blog" scheme="http://codeameba.github.io/tags/blog/"/>
    
      <category term="댓글기능구현" scheme="http://codeameba.github.io/tags/%EB%8C%93%EA%B8%80%EA%B8%B0%EB%8A%A5%EA%B5%AC%ED%98%84/"/>
    
      <category term="디스커스" scheme="http://codeameba.github.io/tags/%EB%94%94%EC%8A%A4%EC%BB%A4%EC%8A%A4/"/>
    
      <category term="disqus" scheme="http://codeameba.github.io/tags/disqus/"/>
    
      <category term="hexo" scheme="http://codeameba.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>2020년은 황금시대일지도 모른다</title>
    <link href="http://codeameba.github.io/2020/02/06/blog/golden-age/"/>
    <id>http://codeameba.github.io/2020/02/06/blog/golden-age/</id>
    <published>2020-02-06T08:41:42.000Z</published>
    <updated>2020-02-06T08:53:13.697Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/midnight.png" alt="미드나잇 인 파리 캡쳐"><p>과거를 동경하는 문화는 어느 시대에나 있었을 것이다. 지금 80-90년대의 레트로 문화가 성행하듯이 말이다.</p><p>르네상스, 황금시대 등의 이름 역시 당대에 붙여진 이름이 아닌, 후대의 사람들이 과거를 동경하며 불렀을 이름이다.</p><p>현재가 아무리 최악의 시대라고 불리며, 살아가기에 녹록지 않긴 하지만, 먼 훗날 누군가는 2020년을 황금시대라며 동경할지도 모를 일이다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/midnight.png&quot; alt=&quot;미드나잇 인 파리 캡쳐&quot;&gt;

&lt;p&gt;과거를 동경하는 문화는 어느 시대에나 있었을 것이다. 지금 80-90년대의 레트로 문화가 성행하듯이 말이다.&lt;/p&gt;
&lt;p&gt;르네상스, 황금시대 등의 이름
      
    
    </summary>
    
    
      <category term="생각정리" scheme="http://codeameba.github.io/categories/%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/"/>
    
    
      <category term="생각정리" scheme="http://codeameba.github.io/tags/%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/"/>
    
      <category term="블로그" scheme="http://codeameba.github.io/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8/"/>
    
      <category term="blog" scheme="http://codeameba.github.io/tags/blog/"/>
    
      <category term="황금시대" scheme="http://codeameba.github.io/tags/%ED%99%A9%EA%B8%88%EC%8B%9C%EB%8C%80/"/>
    
      <category term="미드나잇인파리" scheme="http://codeameba.github.io/tags/%EB%AF%B8%EB%93%9C%EB%82%98%EC%9E%87%EC%9D%B8%ED%8C%8C%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>허니와 클로버</title>
    <link href="http://codeameba.github.io/2020/02/05/blog/honey-and-clovar/"/>
    <id>http://codeameba.github.io/2020/02/05/blog/honey-and-clovar/</id>
    <published>2020-02-05T09:05:42.000Z</published>
    <updated>2020-02-06T08:51:58.272Z</updated>
    
    <content type="html"><![CDATA[  <img src="/images/honey01.png" alt="honey and clovar">  <img src="/images/honey02.png" alt="honey and clovar">  <img src="/images/honey03.png" alt="honey and clovar"><p>20대 초반에 우연히 보게 된 허니와 클로버는 당시 혼란스러웠던 내 마음을 대변해주는 것 같았고, 10년이 훌쩍 지난 지금까지도 마음이 꺾일 것 같을 때면 다시 정주행을 하며 의욕을 재충전하는 나의 최애 콘텐츠로 자리 잡았다.</p><p>또, 수차례 정주행 하며 알게 된 또 하나의 사실은, 내 나이와 상황에 따라 감정이입을 하게 되는 캐릭터가 달라진다는 점이다.</p><p>처음에는 진로와 자아에 대해 고민하며 뛰어난 재능 앞에 열등감을 느끼는 타케모토에게서 나를 봤다면, 다음에는 얽히고설킨 인간관계 사이에서 망설이는 마야마에게서, 그리고 지금은 어른이 되어서도 여전히 과거의 고민으로부터 벗어나지 못하는 하나모토 교수에게서 내 모습이 보인다.</p><p>그리고 아무리 마음에 와닿는 장면이라도 담담하게 볼 수 있던 예전과는 달리, 몇 번씩 울컥하게 된다. 이것은 내가 감정적으로 성숙했다는 긍정적인 의미로 해석하면 될까.</p>]]></content>
    
    <summary type="html">
    
      
      
          &lt;img src=&quot;/images/honey01.png&quot; alt=&quot;honey and clovar&quot;&gt;
  &lt;img src=&quot;/images/honey02.png&quot; alt=&quot;honey and clovar&quot;&gt;
  &lt;img src=&quot;/images/honey0
      
    
    </summary>
    
    
      <category term="생각정리" scheme="http://codeameba.github.io/categories/%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/"/>
    
    
      <category term="생각정리" scheme="http://codeameba.github.io/tags/%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/"/>
    
      <category term="블로그" scheme="http://codeameba.github.io/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8/"/>
    
      <category term="blog" scheme="http://codeameba.github.io/tags/blog/"/>
    
      <category term="허니와클로버" scheme="http://codeameba.github.io/tags/%ED%97%88%EB%8B%88%EC%99%80%ED%81%B4%EB%A1%9C%EB%B2%84/"/>
    
  </entry>
  
  <entry>
    <title>종이책으로의 회귀</title>
    <link href="http://codeameba.github.io/2020/02/04/blog/return-to-text/"/>
    <id>http://codeameba.github.io/2020/02/04/blog/return-to-text/</id>
    <published>2020-02-04T05:43:42.000Z</published>
    <updated>2020-02-05T09:10:11.882Z</updated>
    
    <content type="html"><![CDATA[<img src="https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80" alt="select a book"><p>콘텐츠의 포맷에 따라 여백의 비중이 다르다. 여기서 말하는 여백이란, 독자가 전•후 사정과 배경을 상상할 수 있는 여지를 뜻한다.</p><p>예를 들어 텍스트 콘텐츠의 여백이 50% 라면, 이미지 콘텐츠는 30%, 동영상 콘텐츠는 10% 쯤 될 것이다. 그런 점에서 동영상 콘텐츠의 이용률이 월등한 지금의 세대는 본인의 상상으로 채울 수 있는 여지가 지극히 적을 수밖에 없다.</p><p>사람은 기본적으로 상상을 기반으로 자신만의 세계관을 구축하고자 하는 욕구가 있으며, 이들은 결국 동영상 콘텐츠가 채워주지 못하는 여백에 대한 갈증을 채우기 위해 텍스트 콘텐츠를 찾게 될 것이다.</p><p>나아가 종이책에서만 느낄 수 있는 온기와 질감을 동경하여 종이책으로 회귀하게 될 것이다.</p><p>이것은, 종이책을 사랑하는 사람의 예측 혹은 바람이다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1950&amp;
      
    
    </summary>
    
    
      <category term="생각정리" scheme="http://codeameba.github.io/categories/%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/"/>
    
    
      <category term="생각정리" scheme="http://codeameba.github.io/tags/%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/"/>
    
      <category term="블로그" scheme="http://codeameba.github.io/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8/"/>
    
      <category term="blog" scheme="http://codeameba.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>내가 생각하는 좋은 콘텐츠</title>
    <link href="http://codeameba.github.io/2020/02/03/blog/what-is-good-content/"/>
    <id>http://codeameba.github.io/2020/02/03/blog/what-is-good-content/</id>
    <published>2020-02-03T07:19:42.000Z</published>
    <updated>2020-02-03T07:49:23.254Z</updated>
    
    <content type="html"><![CDATA[<img src="https://images.unsplash.com/photo-1513185041617-8ab03f83d6c5?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80" alt="many books"><h3 id="첫째-조금이라도-나은-사람이-되었다고-스스로-느낄-수-있는-콘텐츠가-좋은-콘텐츠의-기준이다"><a href="#첫째-조금이라도-나은-사람이-되었다고-스스로-느낄-수-있는-콘텐츠가-좋은-콘텐츠의-기준이다" class="headerlink" title="첫째, 조금이라도 나은 사람이 되었다고 스스로 느낄 수 있는 콘텐츠가 좋은 콘텐츠의 기준이다."></a>첫째, 조금이라도 나은 사람이 되었다고 스스로 느낄 수 있는 콘텐츠가 좋은 콘텐츠의 기준이다.</h3><p> 모든 사람은 기본적으로 어제보다 오늘, 오늘보다 내일 더 나아지고자 하는 마음 즉, 향상심을 갖고 있다고 생각한다. 따라서 향상심을 충족시킬 수 있어야 좋은 콘텐츠다. 여기서 의미하는 향상심은 비단 지식적 측면만이 아닌, 감정적, 정신적 측면까지 포괄하는 개념이다.</p><h3 id="둘째-저자의-경험에서-비롯된-스토리가-더해진-콘텐츠는-더욱-좋은-콘텐츠다"><a href="#둘째-저자의-경험에서-비롯된-스토리가-더해진-콘텐츠는-더욱-좋은-콘텐츠다" class="headerlink" title="둘째, 저자의 경험에서 비롯된 스토리가 더해진 콘텐츠는 더욱 좋은 콘텐츠다."></a>둘째, 저자의 경험에서 비롯된 스토리가 더해진 콘텐츠는 더욱 좋은 콘텐츠다.</h3><p> 똑같은 인사이트를 전달하려는 콘텐츠라고 해도 콘텐츠 제작자의 경험을 바탕으로 한 스토리가 더해진 콘텐츠가 진정성 있는 콘텐츠이며, 그런 콘텐츠는 독자의 기억에 오랫동안 긍정적으로 남을 수 있다고 생각한다.</p><h3 id="셋째-기존에-몰랐던-새로운-시각까지-깨닫게-해주는-콘텐츠는-가장-좋은-콘텐츠다"><a href="#셋째-기존에-몰랐던-새로운-시각까지-깨닫게-해주는-콘텐츠는-가장-좋은-콘텐츠다" class="headerlink" title="셋째, 기존에 몰랐던 새로운 시각까지 깨닫게 해주는 콘텐츠는 가장 좋은 콘텐츠다."></a>셋째, 기존에 몰랐던 새로운 시각까지 깨닫게 해주는 콘텐츠는 가장 좋은 콘텐츠다.</h3><p> 의도적으로 취향에 반하는 콘텐츠를 접하지 않는 이상, 사람들은 비슷한 성격의 콘텐츠를 이용하려는 관성이 있고, 콘텐츠 플랫폼의 추천 알고리즘은 이러한 관성에 더욱 힘을 싣고 있다. 물론, 자신만의 취향을 구축하고, 확고히 하는 것도 중요하지만, 취향에 갇혀 다른 시각과 경험의 기회를 놓치는 것은 결과적으로 안타까운 일이다.</p><p>만약, 세 가지 기준에 모두 만족하는 콘텐츠라면, 독자에게 ‘유쾌한 터닝포인트’를 선사할 수 있다고 생각한다. 개인적 경험을 바탕으로 좋은 콘텐츠라고 느꼈던 것들에는, 무라카미 하루키의 에세이 ‘이렇게 작지만 확실한 행복’, 벤 스틸러의 영화 ‘월터의 상상은 현실이 된다’, 우미노 치카의 만화 ‘허니와 클로버’가 있다. 이러한 콘텐츠들을 접했을 때, 고양감과 진정성을 느꼈으며, 새로운 시각으로 자신과 세상을 바라볼 수 있었다.</p><p>하지만 아무리 좋은 콘텐츠라도 독자에게 닿을 수 없으면, 가치를 인정받을 수 없다. 따라서 콘텐츠를 만드는 사람은, <strong>‘좋은 콘텐츠를, 필요로 하는 독자에게 보기 좋은 형태로 제시할 수 있어야’</strong> 한다고 생각한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;https://images.unsplash.com/photo-1513185041617-8ab03f83d6c5?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1950&amp;
      
    
    </summary>
    
    
      <category term="생각정리" scheme="http://codeameba.github.io/categories/%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/"/>
    
    
      <category term="생각정리" scheme="http://codeameba.github.io/tags/%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/"/>
    
      <category term="블로그" scheme="http://codeameba.github.io/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8/"/>
    
      <category term="blog" scheme="http://codeameba.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>오류의 이해</title>
    <link href="http://codeameba.github.io/2020/02/01/blog/understanding-error/"/>
    <id>http://codeameba.github.io/2020/02/01/blog/understanding-error/</id>
    <published>2020-02-01T11:50:42.000Z</published>
    <updated>2020-02-03T07:54:34.369Z</updated>
    
    <content type="html"><![CDATA[<img src="https://images.unsplash.com/photo-1484417894907-623942c8ee29?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2089&q=80" alt="coding"><p>프로그래밍을 배울 때 들었던 말 중 가장 기억에 남는 말이, <strong>‘오류를 이해하라’</strong> 는 말이었다. 코딩을 하다 보면 다양한 형태의 오류가 다양한 상황에서 등장하는데, 구글에 복붙하여 찾아보고, 대강 수정하여 넘어가다 보면 동일한 오류가 다시 등장했을 때 대처를 못 하기 때문이다.</p><p>따라서 오류의 원인과 결과를 충분히 이해하고 넘어가야 한다는 것이다. 조금 더 부연설명을 하자면, 동일한 상황을 조성하여 의도적으로 동일한 오류를 발생시킬 수 있을 정도의 수준을 진정한 의미의 ‘오류의 이해’라고 할 수 있다.</p><p>그리고, ‘오류의 이해’가 필요한 곳은 비단 프로그래밍에만 국한된 것이 아니라고 생각한다. 삶을 살아가면서도 ‘나의 진짜 관심분야’, ‘다양한 상황에서의 인간관계’ 등 가설과 검증을 통한 ‘오류의 이해’가 유의미한 경우들이 있다.</p><p>물론, 극단적 가설에 의한 테스팅은 조금 곤란할지도…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;https://images.unsplash.com/photo-1484417894907-623942c8ee29?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=2089&amp;
      
    
    </summary>
    
    
      <category term="생각정리" scheme="http://codeameba.github.io/categories/%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/"/>
    
    
      <category term="생각정리" scheme="http://codeameba.github.io/tags/%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/"/>
    
      <category term="블로그" scheme="http://codeameba.github.io/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8/"/>
    
      <category term="blog" scheme="http://codeameba.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>취향이 사람을 만든다</title>
    <link href="http://codeameba.github.io/2019/12/23/blog/taste-maketh-man/"/>
    <id>http://codeameba.github.io/2019/12/23/blog/taste-maketh-man/</id>
    <published>2019-12-23T05:43:42.000Z</published>
    <updated>2020-02-05T09:02:05.909Z</updated>
    
    <content type="html"><![CDATA[<p>남들은 어떤지 모르겠지만 내 경우에는 서로의 취향을 하나씩 던지며 대화가 이어진다. 그것이 내 취향과 겹치면 공통된 이야기가 생겨서 좋고, 겹치지 않으면 내가 모르던 것을 알게 되니 좋다. 그래서 취향이 분명하지 않은 사람과 가까운 관계로 발전하기란 썩 쉽지 않다.</p><p>즐겨 듣는 음악, 좋아하는 작가, 사용하는 카메라의 브랜드, 혼자 시간을 보내는 방법 등 취향을 드러낼만한 것들은 참 많다. 꼭 고상한 것일 필요는 없다. 하다 못해 점심 메뉴를 고르는 확고한 기준이라도 좋다. 뭐라도 좋으니 “난 이게 좋고 저건 싫다”라고 분명하게 말할 수 있는 영역을 지닌 사람이 좋다.</p><img src="https://images.unsplash.com/photo-1541443517255-9e9aa2962f14?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80" alt="film"><p>취향은 곧 취미로 연결되고, 취미에 들이는 시간만큼 부정적인 생각에 사로잡힐 기회는 줄어든다. 물론 혼자 사색을 하는 시간도 소중하지만, 취향이 없는 사색은 알맹이 없는 몽상이 되기 쉽다. 그리고 그렇게 나이 드는 것은 너무나도 쓸쓸하지 않겠는가.</p><p>물론, 취향을 유지하기가 썩 쉽지 않은 시대라는 것은 잘 알고있다. 단지 취향일 뿐인데 손가락질을 받기도 하고, 적지 않은 돈이 들기도 하며, 때로는 이렇게까지 할 가치가 있는 건가… 싶을 때도 있다.</p><p>그럼에도 불구하고, 그런 시대이기에 더욱, 내 취향을 공고히 해야 할 필요가 있다. 취향은 곧, 나를 이루는 필수요소이며, 취향이 없이는 타인과 다른 ‘나’를 온전히 유지할 수도 없다.</p><img src="https://images.unsplash.com/photo-1486092573896-31a373bf1aad?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80" alt="on my way">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;남들은 어떤지 모르겠지만 내 경우에는 서로의 취향을 하나씩 던지며 대화가 이어진다. 그것이 내 취향과 겹치면 공통된 이야기가 생겨서 좋고, 겹치지 않으면 내가 모르던 것을 알게 되니 좋다. 그래서 취향이 분명하지 않은 사람과 가까운 관계로 발전하
      
    
    </summary>
    
    
      <category term="생각정리" scheme="http://codeameba.github.io/categories/%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/"/>
    
    
      <category term="생각정리" scheme="http://codeameba.github.io/tags/%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/"/>
    
      <category term="블로그" scheme="http://codeameba.github.io/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8/"/>
    
      <category term="blog" scheme="http://codeameba.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>[Book Review] 마켓 4.0 : 소비자를 소비자로만 보면 안 되는 시대</title>
    <link href="http://codeameba.github.io/2019/11/15/blog/book-review-market-4/"/>
    <id>http://codeameba.github.io/2019/11/15/blog/book-review-market-4/</id>
    <published>2019-11-14T16:00:42.000Z</published>
    <updated>2020-02-06T08:51:44.821Z</updated>
    
    <content type="html"><![CDATA[<div style="clear:left;text-align:left;"><div style="float:left;margin:0 15px 5px 0;"><a href="/Product/Goods/35952025" style="display:inline-block;overflow:hidden;border:solid 1px #ccc;" target="_blank"><img style="margin:-1px;vertical-align:top;" src="http://image.yes24.com/goods/35952025/M" border="0" alt="필립 코틀러의 마켓 4.0 "></a></div><div><p style="line-height:1.2em;color:#333;font-size:14px;font-weight:bold;">필립 코틀러의 마켓 4.0 </p><p style="margin-top:5px;line-height:1.2em;color:#666;"><a href="http://www.yes24.com/SearchCorner/Result?domain=ALL&author_yn=Y&query=&auth_no=114522" target="_blank" rel="external nofollow noopener noreferrer">필립 코틀러</a> 저</p><p style="margin-top:14px;line-height:1.5em;text-align:justify;color:#999;">4차 산업혁명 시대, 시장과 소비자는 어떻게 바뀌나 그리고 기업은 어떤 전략을 세워야 할까     ‘불확실한’ ‘복잡한’ ‘혼란스러운’…. 아쉽게도 이런 단어들만큼 요즘의 경제 환경을 잘 표현해준 말은 없을 것이다. 자동화, 기계화로 대변되는 ICT의 발달은 ‘4차 산업혁명’이라 부를 수 있을 만큼 광범위한 변화를...</p></div></div><br><br><p>마케팅의 아버지라고 불리우는 필립 코틀러의 신간이다. 마켓 3.0 이후 7년만(정식 번역본 기준)에 출간하였는데, 그리 길지 않은 시간이었지만 스마트폰이 보급되어 초연결 사회가 도래한 만큼 마케팅의 방법 또한 바뀌어야 한다고 말하는 책이다. 그 배경에는 디지털이 가장 큰 원인으로 자리잡고 있겠지만, 그로 말미암아 주류 고객층까지 바뀌었다는 것에 의의가 있겠다. 과거에는 주류 고객이 연장자, 남성, 시티즌이었다면, 이제는 디지털 네이티브 세대라고 불리우는 젊은이, 여성, 네티즌이 시장을 주도한다. 그리고, 이 책은 그러한 변화에 마케터들이 어떻게 전략을 세울 것인가에 대한 친절한 조언을 건낸다.</p><p>이 책은, 크게 3개의 파트로 나누어져 있다. 1부에서는 필립 코틀러가 현재 우리가 살고 있는 세계를 관찰하고 알아낸 결과물들에 대해 말하고 있다. 조금 더 자세히 말하자면, 세계의 변화와 트렌드에 영향을 주는 힘의 세 가지 변화가 어떻게 일어났는지 짚어주고 있다. 2부에서는 이러한 변화 속에서 마케터로서 생산성을 높이기 위해 무엇을 해야 하는지 이야기 하고 있다. 끝으로 3부에서는 마켓 4.0 시대에 필수적인 주요 전술들을 설명하고 있다.</p><p>사실 개인적으로 느끼기에는 1부-1장에 마켓 4.0의 핵심이 담겨있다고 생각한다. 디지털 시대를 맞아 시장이 어떻게 변하였는지 단, 세 문장으로 말해주고 있다.</p><p><strong>배타적에서 포용적으로</strong><br><strong>수직적에서 수평적으로</strong><br><strong>개인적에서 사회적으로</strong></p><p>디지털화를 통해 초연결 사회가 되면서 전세계가 실시간으로 소통할 수 있는 시대가 열렸고, 자연스럽게 다양성을 존중하는 문화가 만들어졌다. 그에 발맞춰 다양한 소비자들의 집단 즉, 커뮤니티가 등장했고, 결국, 자본을 지닌 개인보다 연결된 전체가 강한 힘을 갖게 되었다.</p><img src="https://images.unsplash.com/photo-1528642474498-1af0c17fd8c3?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80" alt="walking people"><p>이런 시대라서 벌어지는 또 다른 재미있는 구경거리들도 있는데, 경쟁 관계에 있는 기업들 또한, 수직적이 아닌 수평적 관계로 변화하고 있다는 점이다. 과거에는 빠르게 시장을 선점한 기업이 후발주자들을 저만치 떨어뜨린 채 독주를 하는 그림이 흔했다. 하지만, 요즘에는 그 어떤 기업도 영원한 1위로 남을 수 있다고 장담하지 못 한다. 불과 몇 개월 전까지 세상에 없던 기업이 ‘공유경제’라느니, ‘중간 유통 마진 제로’라느니 하는 등의 과거에는 상상도 못 했던 아이디어들로 금방 글로벌 기업 반열에 드는 시대인 것이다.</p><p>우버, 에어비앤비, 넷플릭스 등 디지털 시대를 맞아 급성장한 기업들이 이전까지 그 누구도 시도하지 않았던 아이디어를 들고 나온 것도 물론 맞지만, 그에 앞서 디지털 시대의 소비자들을 이해 했기 때문에 나올 수 있던 아이디어라고 할 수 있다.</p><img src="https://images.unsplash.com/photo-1559136555-9303baea8ebd?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80" alt="startup"><p>지금의 그리고, 앞으로의 소비자들은 더 이상 기업이 일방적으로 타겟팅 할 수 있는 대상이 아니다. 브랜드와 소비자의 관계가 단순히 물건을 팔고, 사는 관계로 남는다면, 그 브랜드에게 미래는 없다고 볼 수 있다.</p><p><strong>그 어느 때보다 가족처럼 친구처럼 진정성 있고 투명한 관계가 요구되는 시기라고 생각한다.</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div style=&quot;clear:left;text-align:left;&quot;&gt;&lt;div style=&quot;float:left;margin:0 15px 5px 0;&quot;&gt;&lt;a href=&quot;/Product/Goods/35952025&quot; style=&quot;display:inlin
      
    
    </summary>
    
    
      <category term="내가 읽은 책" scheme="http://codeameba.github.io/categories/%EB%82%B4%EA%B0%80-%EC%9D%BD%EC%9D%80-%EC%B1%85/"/>
    
    
      <category term="book review" scheme="http://codeameba.github.io/tags/book-review/"/>
    
      <category term="독후감" scheme="http://codeameba.github.io/tags/%EB%8F%85%ED%9B%84%EA%B0%90/"/>
    
      <category term="마케팅" scheme="http://codeameba.github.io/tags/%EB%A7%88%EC%BC%80%ED%8C%85/"/>
    
      <category term="마켓4.0" scheme="http://codeameba.github.io/tags/%EB%A7%88%EC%BC%934-0/"/>
    
  </entry>
  
  <entry>
    <title>[Book Review] 내가 했던 모든 일이 마케터의 일이었다</title>
    <link href="http://codeameba.github.io/2019/10/09/blog/book-review-work-of-marketer/"/>
    <id>http://codeameba.github.io/2019/10/09/blog/book-review-work-of-marketer/</id>
    <published>2019-10-09T07:38:42.000Z</published>
    <updated>2020-02-07T07:50:30.863Z</updated>
    
    <content type="html"><![CDATA[<div style="clear:left;text-align:left;"><div style="float:left;margin:0 15px 5px 0;"><a href="/Product/Goods/59438439" style="display:inline-block;overflow:hidden;border:solid 1px #ccc;" target="_blank"><img style="margin:-1px;vertical-align:top;" src="http://image.yes24.com/goods/59438439/M" border="0" alt="마케터의 일 "></a></div><div><p style="line-height:1.2em;color:#333;font-size:14px;font-weight:bold;">마케터의 일 </p><p style="margin-top:5px;line-height:1.2em;color:#666;"><a href="http://www.yes24.com/SearchCorner/Result?domain=ALL&author_yn=Y&query=&auth_no=211762" target="_blank" rel="external nofollow noopener noreferrer">장인성</a> 저/<a href="http://www.yes24.com/SearchCorner/Result?domain=ALL&author_yn=Y&query=&auth_no=211827" target="_blank" rel="external nofollow noopener noreferrer">김규림</a> 그림</p><p style="margin-top:14px;line-height:1.5em;text-align:justify;color:#999;">‘직업으로서의 마케터’를 이야기합니다오늘도 치열하게 목표를 세우고 방법을 찾고 계획을 실현하는 마케터들을 위한 책『마케터의 일』은 비슷한 고민을 거쳐 성장해온 선배 마케터가 후배 마케터들에게 전하는 이야기다. 저자는 마케터가 하는 일은 회사마다 개인마다 다르지만, 그럴수록 마케팅의 본질을 놓치지 말아...</p></div></div><br><br><br>현 시점 국내 기업 중 가장 핫한 마케팅을 하는 '배달의 민족'. 그곳의 CBO 장인성 님의 책이다. 저자는, 책을 쓰게 된 계기에 대하여 다음과 같이 말한다.<blockquote><p>“이 책은 어떤 IT서비스 회사에서 마케터들이 일상적으로 주고받는 이야기이자 마케터 장인성의 개인적 경험에 기반한 본격 ‘저는 이렇던데요’ 이야기 묶음집입니다. 어쩌면 이 책의 숨은 제목은 ‘마케터 장인성의 일’인지도 모릅니다. 처음에는 함께 일하는 주니어 마케터들에게 제 잔소리이자 경험자산을 나눠주려고 글을 쓰기 시작했습니다. 그렇데 쓰다 보니, 같이 일하는 마케터들뿐 아니라 옆 회사, 다른 회사, 경쟁사의 마케터들에게도 읽을 만한 글이 될 수 있겠다는 용감한(?) 생각이 들더라고요. 그래서 씁니다. 마케터의 일”</p></blockquote><p>비록 내가 지금은 백수(또는 전업 집사)로 하루하루 즐겁게(?) 지내는 중이긴 하지만, 2014년부터 2018년까지는 마케터였다. 아니, 정확하게 말하자면 ‘나의 명함에 적혀있던 직함이 마케터’였다. 당시의 나는 마케팅에 대한 공부는 커녕 관심조차 없었는데 우연한 기회에 마케팅대행사에 들어가게 되었다. 지금 생각해보면 관심도 없는 일은 왜 했나 싶기도 하지만, 아마 조급했던 것 같다. 20대 중반, 군대를 다녀오고, 대학을 졸업하고, 전공(플라워디자인)을 살려 1년 정도 일을 해봤지만 이 길은 아니다 싶었다. 그렇다고 다른 일을 해보자니 막막하여 국비지원으로 편집디자인을 배우며 어설픈 포트폴리오를 만들었었다. 그렇게 만들어진 포트폴리오를 첨부하여 취업포탈사이트 몇 군데에 이력서를 등록했었는데 이를 본 마케팅대행사에서 먼저 연락이 온 것이었다. 근데 재밌는 것은, 당연히 디자이너로 뽑힌 줄 알았는데 마케터로 뽑았다는 점이다. 마케터가 무엇인지, 무슨 일을 하는지도 몰랐지만 앞서 말했듯 나는 조급했기에 어떤 이유였든 단지 나를 뽑아주었다는 그 호의를 고맙게 받았다.</p><p>내게 주어진 일들은 상당히 다양했다. 블로그에 장문의 글을 쓰거나 매월 콘텐츠 스케쥴을 짜기도 하고, 프로모션에 쓰일 포스터를 디자인 하기도 하고, 행사를 준비하기도 했으며, 인터뷰 질문을 구상하기도 하고, 제품이나 인물 사진을 찍기도 하고, 심지어 일본어나 영어로 된 원문을 번역하기도 했다. 이 외에도 모두 떠올리기 어려울 정도로 다양한 일을 했다. 기본적으로 다양한 분야에 관심이 있고, 새로운 것을 좋아하는 나로서는 무척 재미있게 일을 했었다. 3년차까지는.</p><p>자칫 3개월로 끝날 수 있었을 수습직원은 정직원이 되고, 주임이 되고, 3년차 쯤에는 대리가 되었다. 그렇다. 직장인들이 권태기라 부르는 ‘마의 3년차’였다. 나 역시 마의 3년차를 피할 수 없었는데, 당시 내 나이가 29살이라는 점도 큰 기여를 했던 것 같다. 단순히 일이 재미 없다기 보다는 목표의 부재와 미래에 대한 불안함. 뭐 그런 복합적인 상황이었는데, 지금 생각해보면, ‘마케터의 일’이 무엇인지 모르기 때문에 느꼈던 불안함이었던 것 같다. 막 성장하는 스타트업이었고, ‘이것이 마케터의 일이다!’라며 확신을 주는 백전노장 같은 사수가 없었다. 그들에게도 나에게도 대부분의 일들이 처음이었다. 그런 배경 속에서 자연스럽게 드는 생각이었다.</p><p><em>‘내가 지금 제대로 하고 있는 걸까?’</em><br><em>‘여기에 과연 전문성이 있는 걸까?’</em><br><em>‘굳이 내가 아니어도 누구나 심지어 갓 입사한 신입이라도 할 수 있는 일 아닐까?’</em></p><p>생각이 많고 결단력이 있는 사람이라면 이런 상황에 놓였을 때 즉시 그만 두고 다른 길을 가거나 확신을 갖고 초심으로 돌아갈 것이다. 반면에 생각이 많고 우유부단한 사람은 이도 저도 아닌 상태로 고민만 지속할 뿐 이렇다 할만한 행동을 취하지 못 한다. 안타깝게도 난 후자였다. 물론 경우에 따라 신중함이라는 좋은 말로 포장할 수도 있긴 하지만, 그렇다 하더라도 나의 고민은 너무 길었다. 결국 답을 얻지 못한채 껍데기 뿐인 마케터로 지냈으며, 해가 넘어가기 직전에서야 퇴사를 결심했다.</p><img src="https://images.unsplash.com/photo-1519389950473-47ba0277781c?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80" alt="working table"><p>서론부터 지지부진하고 재미없는 이야기를 길게 늘어놨는데, 그나마 글로 적어서 이 정도다. 내가 체감한 고민의 시간은 ‘내가 지금 시간과 정신의 방에 갇힌 게 아닐까’ 하는 생각이 들 정도로 길었다. 그리고, 100% 내 경험담인 이 이야기가 ‘마케터의 일’ 도입부에 등장한다. 물론 저자와 일면식도 없으니 내 사례를 가져가 쓴 것은 아닐 것이다. 그럼에도 불구하고 내가 놓였던 상황, 내가 했던 고민들과 놀랍도록 닮았다. 나는 허탈감과 동시에 개운함을 느꼈다. 내가 특수한 상황에 놓인 것도 아니었고, 내 고민이 이상한 것도 아니었던 것이다. 아, 좀 더 일찍 읽었더라면……</p><p>마케터가 하는 일이 무엇인지 모르면서 그저 다양한 경험에 즐거워하고, 새로운 경험에 설레던 20대의 나. 마찬가지로 마케터가 하는 일이 무엇인지 모르기 때문에 불안해하고 고민하던 30대의 나. 이제야 알았다. 내가 했던 모든 일이 마케터의 일이었다. 마침내 내 방황에도 끝이 보이는 것 같다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div style=&quot;clear:left;text-align:left;&quot;&gt;&lt;div style=&quot;float:left;margin:0 15px 5px 0;&quot;&gt;&lt;a href=&quot;/Product/Goods/59438439&quot; style=&quot;display:inlin
      
    
    </summary>
    
    
      <category term="내가 읽은 책" scheme="http://codeameba.github.io/categories/%EB%82%B4%EA%B0%80-%EC%9D%BD%EC%9D%80-%EC%B1%85/"/>
    
    
      <category term="book review" scheme="http://codeameba.github.io/tags/book-review/"/>
    
      <category term="독후감" scheme="http://codeameba.github.io/tags/%EB%8F%85%ED%9B%84%EA%B0%90/"/>
    
      <category term="마케팅" scheme="http://codeameba.github.io/tags/%EB%A7%88%EC%BC%80%ED%8C%85/"/>
    
      <category term="마케터의 일" scheme="http://codeameba.github.io/tags/%EB%A7%88%EC%BC%80%ED%84%B0%EC%9D%98-%EC%9D%BC/"/>
    
  </entry>
  
  <entry>
    <title>TIL(190918) - Vue.js 01</title>
    <link href="http://codeameba.github.io/2019/09/18/programming/vue-til-01/"/>
    <id>http://codeameba.github.io/2019/09/18/programming/vue-til-01/</id>
    <published>2019-09-17T16:00:42.000Z</published>
    <updated>2020-02-03T07:47:26.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TIL-190918-Vue-js-01"><a href="#TIL-190918-Vue-js-01" class="headerlink" title="TIL(190918) - Vue.js 01"></a>TIL(190918) - Vue.js 01</h1><hr><p><strong>Vue.js 시작하기 - Age of Vue.js를 보고 정리함</strong></p><h2 id="Vue-js-Documents"><a href="#Vue-js-Documents" class="headerlink" title="Vue.js Documents"></a>Vue.js Documents</h2><hr><ul><li><a href="https://kr.vuejs.org/" target="_blank" rel="external nofollow noopener noreferrer">Vue.js</a></li></ul><br><h2 id="Vue-js는-무엇인가"><a href="#Vue-js는-무엇인가" class="headerlink" title="Vue.js는 무엇인가?"></a>Vue.js는 무엇인가?</h2><hr><ul><li>MVVM 패턴의 뷰모델 레이어에 해당하는 화면단 라이브러리<ul><li><a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel" target="_blank" rel="external nofollow noopener noreferrer">Model–view–viewmodel - Wikipedia</a></li><li>DOM(View)을 조작하면 Vue.js(ViewModel) 내부의 DOM Listeners가 이를 인지하여 자바스크립트(Model)에 전달하고, 자바스크립트는 다시 Vue.js 내부의 Data Bindings를 통해 DOM에 데이터를 전달한다. 결과적으로 화면에 보여지는 내용 역시 변경된다.</li></ul></li></ul><br><h2 id="Vue-js를-쓰는-이유"><a href="#Vue-js를-쓰는-이유" class="headerlink" title="Vue.js를 쓰는 이유"></a>Vue.js를 쓰는 이유</h2><hr><ul><li>Vue.js와 같은 프레임워크를 사용하지 않고 html, css, JavaScript만 사용한 기본적인 웹개발에서는 View를 바꾸려면 직접적으로 코드를 손봐야만 했다.</li><li>하지만 매번 변경할 때마다 사람이 손수 고치는 것은 무리가 있기 때문에 Vue.js같은 프레임워크를 사용한다.</li><li>결론적으로, View의 내용을 변경하면 내부의 코드가 자동적으로 변경되고 그 상태가 유지 될 수 있도록 하는 것에 의의가 있다.</li><li>이러한 것이 Vue.js의 핵심 사상인 <strong>Reactivity</strong><ul><li><a href="https://kr.vuejs.org/v2/guide/reactivity.html" target="_blank" rel="external nofollow noopener noreferrer">반응형에 대해 깊이 알아보기 — Vue.js</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TIL-190918-Vue-js-01&quot;&gt;&lt;a href=&quot;#TIL-190918-Vue-js-01&quot; class=&quot;headerlink&quot; title=&quot;TIL(190918) - Vue.js 01&quot;&gt;&lt;/a&gt;TIL(190918) - Vue.js 01
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="Javascript" scheme="http://codeameba.github.io/tags/Javascript/"/>
    
      <category term="vue.js" scheme="http://codeameba.github.io/tags/vue-js/"/>
    
      <category term="뷰" scheme="http://codeameba.github.io/tags/%EB%B7%B0/"/>
    
  </entry>
  
  <entry>
    <title>[ReactJS] 무비앱 만들기 Day 06</title>
    <link href="http://codeameba.github.io/2019/09/09/programming/react-movie-app-06/"/>
    <id>http://codeameba.github.io/2019/09/09/programming/react-movie-app-06/</id>
    <published>2019-09-08T16:00:42.000Z</published>
    <updated>2020-02-03T07:47:26.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ReactJS-무비앱-만들기-Day-06"><a href="#ReactJS-무비앱-만들기-Day-06" class="headerlink" title="[ReactJS] 무비앱 만들기 Day 06"></a>[ReactJS] 무비앱 만들기 Day 06</h1><hr><h2 id="5-0-Container-Presenter-Pattern-part-One"><a href="#5-0-Container-Presenter-Pattern-part-One" class="headerlink" title="5.0 Container Presenter Pattern part One"></a>5.0 Container Presenter Pattern part One</h2><hr><ul><li>Container Presenter Pattern에서 컨테이너는 data와 state를 지니고, api를 불러온다. 그리고 모든 로직을 처리.</li><li>그 다음, 프레젠터가 그 data들을 보여주는 역할.(프레젠터에는 state가 없고, api도 모르며 클래스도 없고 단지 함수형 컴포넌트)</li><li>쉽게 말해서 프레젠터는 ‘스타일’, 컨테이너는 ‘데이터’</li></ul><h3 id="각-컨테이너별-폴더를-따로-구성"><a href="#각-컨테이너별-폴더를-따로-구성" class="headerlink" title="각 컨테이너별 폴더를 따로 구성"></a>각 컨테이너별 폴더를 따로 구성</h3><ul><li>폴더마다 index.js가 있어야 함. 컨테이너를 export해야 하기 때문.</li><li>이렇게 정리하는 게 혼란을 줄일 수 있음.</li><li>index.js가 HomeContainer를 import / export하는 역할을 하고</li><li>HomeContainer는 state를 가진 모든 리액트 컴포넌트가 된다.</li></ul><p><strong>src - Routes - Home - HomeContainer.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> HomePresenter <span class="keyword">from</span> <span class="string">'./HomePresenter'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    nowPlaying: <span class="literal">null</span>,</span><br><span class="line">    upcoming: <span class="literal">null</span>,</span><br><span class="line">    popular: <span class="literal">null</span>,</span><br><span class="line">    error: <span class="literal">null</span>,</span><br><span class="line">    loading: <span class="literal">true</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; nowPlaying, upcoming, popular, error, loading &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;HomePresenter </span><br><span class="line">        nowPlaying=&#123;nowPlaying&#125; </span><br><span class="line">        upcoming=&#123;upcoming&#125; </span><br><span class="line">        popular=&#123;popular&#125; </span><br><span class="line">        error=&#123;error&#125;</span><br><span class="line">        loading=&#123;loading&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="5-1-Container-Presenter-Pattern-part-Two"><a href="#5-1-Container-Presenter-Pattern-part-Two" class="headerlink" title="5.1 Container Presenter Pattern part Two"></a>5.1 Container Presenter Pattern part Two</h2><hr><ul><li>search container는 <strong>상호작용</strong>이 필요하기 때문에 조금 까다로움</li><li>loading의 경우 기본값은 false<ul><li>유저가 아무런 행동을 취하지 않았는데 로딩이 되면 안 되니까</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> SearchPresenter <span class="keyword">from</span> <span class="string">'./SearchPresenter'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    MovieResults: <span class="literal">null</span>,</span><br><span class="line">    TvResults: <span class="literal">null</span>,</span><br><span class="line">    SearchTerm: <span class="string">''</span>,</span><br><span class="line">    error: <span class="literal">null</span>,</span><br><span class="line">    loading: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; MovieResults, TvResults, SearchTerm, error, loading &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;SearchPresenter</span><br><span class="line">        MovieResults=&#123;MovieResults&#125;</span><br><span class="line">        TvResults=&#123;TvResults&#125;</span><br><span class="line">        SearchTerm=&#123;SearchTerm&#125;</span><br><span class="line">        error=&#123;error&#125;</span><br><span class="line">        loading=&#123;loading&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="5-2-Home-Container"><a href="#5-2-Home-Container" class="headerlink" title="5.2 Home Container"></a>5.2 Home Container</h2><hr><ul><li><p>두 가지 옵션이 있음</p><ul><li>componentDidMount()를 통해 전체 api 요청을 할 수 있고</li><li>각각의 요청을 분리된 함수로 따로 요청할 수도 있음.<ul><li>ex) getNowPlaying(), getUpComing() 등등</li></ul></li></ul></li><li><p>이번 경우엔 굳이 분리할 필요가 없으므로 componentDidMount()를 사용함</p></li></ul><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try - catch"></a>try - catch</h3><ul><li>try가 먼저 실행되고, 작동하지 않으면 error를 catch 한다.</li></ul><h3 id="async-await"><a href="#async-await" class="headerlink" title="async / await"></a>async / await</h3><ul><li>준비가 될 때까지 기다려달라는 의미</li><li>예를 들어 아래와 같은 상황에서 async/await이 없으면, nowPlaying 데이터를 가져오기 시작한다. 하지만 api가 리턴할 때까지 자바스크립트는 기다려주지 않음.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> componentDidMount() &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> MoviesApi.nowPlaying();</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      error: <span class="string">"Can't find movis information."</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      loading: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>하지만, async/await을 쓰면 데이터가 준비될 때까지 자바스크립트가 기다려줌.</li></ul><h3 id="비구조화-할당"><a href="#비구조화-할당" class="headerlink" title="비구조화 할당"></a>비구조화 할당</h3><ul><li>변수명에 data를 정할 때 비구조화 할당을 쓰면 보기 좋음<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> componentDidMount() &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">data</span>: &#123; <span class="attr">results</span>: nowPlaying &#125;&#125; = <span class="keyword">await</span> MoviesApi.nowPlaying();</span><br><span class="line">    <span class="built_in">console</span>.log(nowPlaying);</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      error: <span class="string">"Aw, Snap!"</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      loading: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><br><h2 id="5-3-TV-Container"><a href="#5-3-TV-Container" class="headerlink" title="5.3 TV Container"></a>5.3 TV Container</h2><hr><ul><li>Movies와 동일</li></ul><br><h2 id="5-4-Search-Container"><a href="#5-4-Search-Container" class="headerlink" title="5.4 Search Container"></a>5.4 Search Container</h2><hr><ul><li>모든 로직을 갖는다.</li><li>첫 번째 로직은 handleSubmit<ul><li>입력 폼에 text를 입력한 뒤 엔터키를 누르면 Submit이 됨</li><li>searchTerm이 공백이 아닌지 체크하고 search 함수를 실행할 것</li></ul></li><li>특히 try는 다른 컨테이너와 다름<ul><li>검색을 시도했을 때 로딩을 true로 만든다(기본값은 false).<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">handleSubmit = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; searchTerm &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">  <span class="keyword">if</span> (searchTerm !== <span class="string">''</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.searchByTerm();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">searchByTerm = <span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; searchTerm &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">data</span>: &#123; <span class="attr">results</span>: movieResults &#125;&#125; = <span class="keyword">await</span> MoviesApi.search(searchTerm);</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">data</span>: &#123; <span class="attr">results</span>: tvResults &#125;&#125; = <span class="keyword">await</span> TvApi.search(searchTerm);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      movieResults,</span><br><span class="line">      tvResults</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      loading: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      error: <span class="string">"Can't find results."</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      loading: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><br><h2 id="5-5-Detail-Container-part-One"><a href="#5-5-Detail-Container-part-One" class="headerlink" title="5.5 Detail Container part One"></a>5.5 Detail Container part One</h2><hr><ul><li>Router Component에 Detail을 추가해야 함.</li><li>Movie나 TV의 id를 가져와서 보여주는 방식</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/"</span> exact component=&#123;Home&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/tv"</span> component=&#123;TV&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/search"</span> component=&#123;Search&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/movie/:id"</span> component=&#123;Detail&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/tv/:id"</span> component=&#123;Detail&#125; /&gt;</span><br><span class="line">        &lt;Redirect <span class="keyword">from</span>=<span class="string">"*"</span> to=<span class="string">"/"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><ul><li><p><code>:id</code>는 해당 위치는 랜덤한 id가 올 수 있음을 의미</p></li><li><p>id는 url에서 가져올 예정</p></li><li><p>Header component는 라우터의 위치를 알고 있음.</p><ul><li>withRouter로 감쌌기 때문에</li></ul></li><li><p>id가 보기에는 숫자지만, typeof를 해보면 string으로 나옴 따라서 parseInt를 해줘야 함</p></li><li><p>id가 숫자가 아닌 경우에는 home으로 보냄</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> componentDidMount() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">match</span>: &#123; <span class="attr">params</span>: &#123; id &#125;&#125;, <span class="attr">history</span>: &#123; push &#125;&#125; = <span class="keyword">this</span>.props;</span><br><span class="line">  <span class="keyword">const</span> parseId = <span class="built_in">parseInt</span>(id);</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">isNaN</span>(parseId)) &#123;</span><br><span class="line">    push(<span class="string">'/'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ReactJS-무비앱-만들기-Day-06&quot;&gt;&lt;a href=&quot;#ReactJS-무비앱-만들기-Day-06&quot; class=&quot;headerlink&quot; title=&quot;[ReactJS] 무비앱 만들기 Day 06&quot;&gt;&lt;/a&gt;[ReactJS] 무비앱 만들기 
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="리액트" scheme="http://codeameba.github.io/tags/%EB%A6%AC%EC%95%A1%ED%8A%B8/"/>
    
      <category term="react" scheme="http://codeameba.github.io/tags/react/"/>
    
      <category term="노마드코더" scheme="http://codeameba.github.io/tags/%EB%85%B8%EB%A7%88%EB%93%9C%EC%BD%94%EB%8D%94/"/>
    
      <category term="nomadcoders" scheme="http://codeameba.github.io/tags/nomadcoders/"/>
    
  </entry>
  
  <entry>
    <title>[ReactJS] 무비앱 만들기 Day 05</title>
    <link href="http://codeameba.github.io/2019/09/05/programming/react-movie-app-05/"/>
    <id>http://codeameba.github.io/2019/09/05/programming/react-movie-app-05/</id>
    <published>2019-09-04T16:00:42.000Z</published>
    <updated>2020-02-03T07:47:26.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ReactJS-무비앱-만들기-Day-05"><a href="#ReactJS-무비앱-만들기-Day-05" class="headerlink" title="[ReactJS] 무비앱 만들기 Day 05"></a>[ReactJS] 무비앱 만들기 Day 05</h1><hr><h2 id="4-0-Introduction-to-The-Movie-DB-API"><a href="#4-0-Introduction-to-The-Movie-DB-API" class="headerlink" title="4.0 Introduction to The Movie DB API"></a>4.0 Introduction to The Movie DB API</h2><hr><ul><li>데이터가 오는 곳이 API(Application Programming Interface)</li><li>Nomflix에서는 the movie db를 이용함(가입 필요).<ul><li><a href="https://www.themoviedb.org/" target="_blank" rel="external nofollow noopener noreferrer">https://www.themoviedb.org/</a> </li></ul></li><li>setting -&gt; API -&gt; API KEY copy</li></ul><h2 id="4-1-Sexy-Networking-with-Axios-Instances"><a href="#4-1-Sexy-Networking-with-Axios-Instances" class="headerlink" title="4.1 Sexy Networking with Axios Instances"></a>4.1 Sexy Networking with Axios Instances</h2><hr><h3 id="API-Verbs"><a href="#API-Verbs" class="headerlink" title="API Verbs"></a>API Verbs</h3><ul><li><input disabled type="checkbox"> Now playing (Movie</li><li><input disabled type="checkbox"> Top Rated (TV, Movie)</li><li><input disabled type="checkbox"> Popular (TV, Movie)</li><li><input disabled type="checkbox"> Upcoming (Movie)</li><li><input disabled type="checkbox"> Airing Today (TV)</li></ul><h3 id="요청-방식"><a href="#요청-방식" class="headerlink" title="요청 방식"></a>요청 방식</h3><ul><li>이전 강의들에서는 주로 fetch를 썼음<ul><li>라우터에서 호출하고, fetch 하고, 나머지 모든 작업들을 하는 방식인데 효율적이지 않음.</li><li>왜냐하면 url의 동일한 내용이 반복되기 때문</li><li>따라서 네트워킹과 API만 다루는 별도의 파일을 따로 만들고 호출할 것</li><li>또한, fetch가 아닌, axios를 사용</li></ul></li></ul><h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><ul><li><a href="https://github.com/axios/axios" target="_blank" rel="external nofollow noopener noreferrer">GitHub - axios/axios: Promise based HTTP client for the browser and node.js</a></li><li>별도 모듈 설치 필요<ul><li><code>yarn add axios</code></li></ul></li><li>axios의 장점은, 직접 인스턴스를 configure(설정)할 수 있다는 점.</li></ul><p><strong>axios.create([config])</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'https://some-domain.com/api/'</span>,</span><br><span class="line">  timeout: <span class="number">1000</span>,</span><br><span class="line">  headers: &#123;<span class="string">'X-Custom-Header'</span>: <span class="string">'foobar'</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>위의 axios.create를 통해 반복을 최소화 할 수 있음.<ul><li>parameter에 api_key와 language 전달</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'https://api.themoviedb.org/3/'</span>,</span><br><span class="line">  params: &#123;</span><br><span class="line">    api_key: <span class="string">'b8e07a1bc39775b44d7ad690b461e764'</span>,</span><br><span class="line">    language: <span class="string">'en-US'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">api.get(<span class="string">'tv/popular'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> api;</span><br></pre></td></tr></table></figure><ul><li>index.js에 api.js를 import하고 실행해보면 아래와 같이 데이터가 들어오는 것을 확인할 수 있음.</li><li>주의) api.get에서 <code>tv/popular</code>로 작성해야 상대경로로 접근함<ul><li><code>/tv/popular</code>로 작성하면 절대경로가 됨</li></ul></li></ul><img src="/images/api-response.png"><img src="/images/api-response2.png"><hr><h2 id="4-2-API-Verbs-part-One"><a href="#4-2-API-Verbs-part-One" class="headerlink" title="4.2 API Verbs part One"></a>4.2 API Verbs part One</h2><hr><h3 id="API-Verbs-1"><a href="#API-Verbs-1" class="headerlink" title="API Verbs"></a>API Verbs</h3><ul><li><input checked disabled type="checkbox"> <p>Now playing (Movie)</p></li><li><input checked disabled type="checkbox"> <p>Upcoming (Movie)</p></li><li><input checked disabled type="checkbox"> <p>Top Rated (TV)</p></li><li><input checked disabled type="checkbox"> <p>Popular (TV, X)</p></li><li><input checked disabled type="checkbox"> <p>Airing Today (TV)</p></li><li><input disabled type="checkbox"> <p>TV Show Detail</p></li><li><input disabled type="checkbox"> <p>Movie Detail</p></li><li><p>TV와 Movies 각각의 api 요청</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'https://api.themoviedb.org/3/'</span>,</span><br><span class="line">  params: &#123;</span><br><span class="line">    api_key: <span class="string">'b8e07a1bc39775b44d7ad690b461e764'</span>,</span><br><span class="line">    language: <span class="string">'en-US'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MoviesApi = &#123;</span><br><span class="line">  nowPlaying: <span class="function"><span class="params">()</span> =&gt;</span> api.get(<span class="string">'movie/now_playing'</span>),</span><br><span class="line">  upcoming: <span class="function"><span class="params">()</span> =&gt;</span> api.get(<span class="string">'movie/upcoming'</span>),</span><br><span class="line">  popluar: <span class="function"><span class="params">()</span> =&gt;</span> api.get(<span class="string">'movie/popular'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> TvApi = &#123;</span><br><span class="line">  topRated: <span class="function"><span class="params">()</span> =&gt;</span> api.get(<span class="string">'tv/top_rated'</span>),</span><br><span class="line">  popular: <span class="function"><span class="params">()</span> =&gt;</span> api.get(<span class="string">'tv/popular'</span>),</span><br><span class="line">  airingToday: <span class="function"><span class="params">()</span> =&gt;</span> api.get(<span class="string">'tv/airing_today'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>fetch 방식의 api 요청에 비해 훨씬 간결하고 가독성이 좋음.</li><li>axios 짱짱맨</li></ul><h2 id="4-3-API-Verbs-part-Two"><a href="#4-3-API-Verbs-part-Two" class="headerlink" title="4.3 API Verbs part Two"></a>4.3 API Verbs part Two</h2><hr><ul><li>Movie Detail을 가져오기 위해 id가 필요함<ul><li><code>movie/{movie_id}</code></li></ul></li></ul><h3 id="API-Verbs-2"><a href="#API-Verbs-2" class="headerlink" title="API Verbs"></a>API Verbs</h3><ul><li><input checked disabled type="checkbox"> Now playing (Movie)</li><li><input checked disabled type="checkbox"> Upcoming (Movie)</li><li><input checked disabled type="checkbox"> Top Rated (TV)</li><li><input checked disabled type="checkbox"> Popular (TV, X)</li><li><input checked disabled type="checkbox"> Airing Today (TV)</li><li><input checked disabled type="checkbox"> TV Show Detail</li><li><input checked disabled type="checkbox"> Movie Detail</li><li><input checked disabled type="checkbox"> Search  (Movie, TV)</li></ul><h3 id="append-to-response"><a href="#append-to-response" class="headerlink" title="append_to_response"></a>append_to_response</h3><ul><li>api에서 지원하는 기능</li><li><a href="https://developers.themoviedb.org/3/getting-started/append-to-response" target="_blank" rel="external nofollow noopener noreferrer">API Docs</a></li><li>video나 image같은 것들을 덧붙이기(append)하면 포스터나 예고편 등으로 출력이 된다.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MoviesApi = &#123;</span><br><span class="line">  nowPlaying: <span class="function"><span class="params">()</span> =&gt;</span> api.get(<span class="string">'movie/now_playing'</span>),</span><br><span class="line">  upcoming: <span class="function"><span class="params">()</span> =&gt;</span> api.get(<span class="string">'movie/upcoming'</span>),</span><br><span class="line">  popluar: <span class="function"><span class="params">()</span> =&gt;</span> api.get(<span class="string">'movie/popular'</span>),</span><br><span class="line">  movieDetail: <span class="function"><span class="params">id</span> =&gt;</span> api.get(<span class="string">`movie/<span class="subst">$&#123;id&#125;</span>`</span>, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      appent_to_response: <span class="string">'videos'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h3><ul><li>search 기능은 url 외에도 검색어에 해당하는 파라미터가 추가로 필요함</li></ul><img src="/images/api-search.png"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search: <span class="function">(<span class="params">term</span>) =&gt;</span> api.get(<span class="string">'search/movie'</span>, &#123;</span><br><span class="line">  params: &#123;</span><br><span class="line">    query: term</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>그리고 api의 명세를 잘 찾아보면 아래와 같이 요구사항이 설명되어 있음.</li><li>이 경우에는 URI로 인코딩이 필요하다고 함.</li></ul><img src="/images/api-search2.png"><ul><li>따라서 아래와 같이 encodeURIComponent를 사용하면 값을 인코팅하고 그 문자열로 검색을 하게 됨.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search: <span class="function">(<span class="params">term</span>) =&gt;</span> api.get(<span class="string">'search/movie'</span>, &#123;</span><br><span class="line">  params: &#123;</span><br><span class="line">    query: <span class="built_in">encodeURIComponent</span>(term)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ReactJS-무비앱-만들기-Day-05&quot;&gt;&lt;a href=&quot;#ReactJS-무비앱-만들기-Day-05&quot; class=&quot;headerlink&quot; title=&quot;[ReactJS] 무비앱 만들기 Day 05&quot;&gt;&lt;/a&gt;[ReactJS] 무비앱 만들기 
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="리액트" scheme="http://codeameba.github.io/tags/%EB%A6%AC%EC%95%A1%ED%8A%B8/"/>
    
      <category term="react" scheme="http://codeameba.github.io/tags/react/"/>
    
      <category term="노마드코더" scheme="http://codeameba.github.io/tags/%EB%85%B8%EB%A7%88%EB%93%9C%EC%BD%94%EB%8D%94/"/>
    
      <category term="nomadcoders" scheme="http://codeameba.github.io/tags/nomadcoders/"/>
    
  </entry>
  
  <entry>
    <title>[ReactJS] 무비앱 만들기 Day 04</title>
    <link href="http://codeameba.github.io/2019/08/29/programming/react-movie-app-04/"/>
    <id>http://codeameba.github.io/2019/08/29/programming/react-movie-app-04/</id>
    <published>2019-08-28T16:00:42.000Z</published>
    <updated>2020-02-03T07:47:26.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ReactJS-무비앱-만들기-Day-04"><a href="#ReactJS-무비앱-만들기-Day-04" class="headerlink" title="[ReactJS] 무비앱 만들기 Day 04"></a>[ReactJS] 무비앱 만들기 Day 04</h1><hr><h2 id="3-0-CSS-in-React-part-One"><a href="#3-0-CSS-in-React-part-One" class="headerlink" title="3.0 CSS in React part One"></a>3.0 CSS in React part One</h2><hr><h3 id="리액트에서-CSS를-적용하는-방법-01"><a href="#리액트에서-CSS를-적용하는-방법-01" class="headerlink" title="리액트에서 CSS를 적용하는 방법 01"></a>리액트에서 CSS를 적용하는 방법 01</h3><ul><li>styles.css 파일을 만들어서 스타일 적용</li><li>CSS를 적용할 요소에 className으로 클래스명 적어야 함</li><li>최상위 파일(index.js)에 import<ul><li><code>import &#39;styles.css&#39;;</code></li></ul></li><li>나쁜 방법은 아니나, 컴포넌트와 CSS가 분리되어 있다는 게 단점.<ul><li>컴포넌트를 쓰는 가장 큰 이유는 캡슐화(Encapulation)에 있음.</li></ul></li></ul><br><h3 id="리액트에서-CSS를-적용하는-방법-02"><a href="#리액트에서-CSS를-적용하는-방법-02" class="headerlink" title="리액트에서 CSS를 적용하는 방법 02"></a>리액트에서 CSS를 적용하는 방법 02</h3><ul><li>기능별로 별도 컴포넌트를 생성</li><li>각 컴포넌트마다 CSS 파일의 생성 및 적용</li><li>이 방법에도 단점은 있음<ul><li>첫째, CSS 파일을 생성해야 된다는 점.</li><li>둘째, 사용할 때마다 import를 해야 한다는 점.</li><li>셋째, className을 기억해야 한다는 점.(CSS는 Global로 작동하기 때문)</li></ul></li></ul><br><h2 id="3-1-CSS-in-React-part-Two"><a href="#3-1-CSS-in-React-part-Two" class="headerlink" title="3.1 CSS in React part Two"></a>3.1 CSS in React part Two</h2><hr><h3 id="리액트에서-CSS를-적용하는-방법-03"><a href="#리액트에서-CSS를-적용하는-방법-03" class="headerlink" title="리액트에서 CSS를 적용하는 방법 03"></a>리액트에서 CSS를 적용하는 방법 03</h3><ul><li>CSS를 컴포넌트 스코프에서 작동하도록 하는 방법.</li><li>CSS 모듈이라고 부름.</li><li>className을 임의화해서 local로 작동하게 함.</li></ul><p><strong>src - Components - Header - Header.module.css</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.navList</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CSS 파일명을 <code>Header.module.css</code> 방식으로 변경</li><li>import는 자바스크립트와 같은 방식<ul><li><code>import styles from ‘./Header.module.css’;</code></li></ul></li><li>className을 자바스크립트의 객체처럼 사용함.</li></ul><p><strong>src - Components - Header - Header.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      &lt;ul className=&#123;styles.navList&#125;&gt; <span class="comment">// &lt;- like this</span></span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;a href=<span class="string">"/a"</span>&gt;Home&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;a href=<span class="string">"/tv"</span>&gt;TV&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;a href=<span class="string">"/search"</span>&gt;Search&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>header&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><p>class명이 랜덤으로 생성됨.</p><img src="/images/random-class.png"></li><li><p><code>yarn add node-sass</code> 설치 후 아래와 같이 작성할 수도 있음.</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.navList</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deeppink;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>이러한 모듈 방식도 괜찮기는 하지만 className을 기억해야 한다는 점이 단점이다.</p></li><li><p>여전히 JS와 CSS가 동떨어져 있다는 느낌을 지울 수가 없다. 둘을 하나의 파일에서 쓸 수 있는 방법은 무엇이 있을까?</p></li></ul><br><h2 id="3-2-CSS-in-React-part-Three"><a href="#3-2-CSS-in-React-part-Three" class="headerlink" title="3.2 CSS in React part Three"></a>3.2 CSS in React part Three</h2><hr><h3 id="리액트에서-CSS를-적용하는-방법-04"><a href="#리액트에서-CSS를-적용하는-방법-04" class="headerlink" title="리액트에서 CSS를 적용하는 방법 04"></a>리액트에서 CSS를 적용하는 방법 04</h3><ul><li>JS를 이용한 니코의 최애 방법은 <strong>styled-components</strong></li><li>우선 설치가 필요함<ul><li><code>yarn add styled-components</code></li></ul></li><li>설치 후 import<ul><li><code>import styled from &#39;styled-components&#39;</code></li></ul></li></ul><blockquote><p>TIP)<br><strong>vscode-styled-components</strong> 확장 프로그램을 설치하면 텍스트에 색상이 들어감.</p></blockquote><ul><li>styled-component 작성 후 아래와 같이 태그로 사용</li></ul><p><strong>src - Components - Header.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> List = styled.ul<span class="string">`</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  &amp;:hover &#123;</span></span><br><span class="line"><span class="string">    background-color: deeppink;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      &lt;List&gt; <span class="comment">// &lt;- here</span></span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;a href=<span class="string">"/"</span>&gt;Home&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;a href=<span class="string">"/tv"</span>&gt;TV&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;a href=<span class="string">"/search"</span>&gt;Search&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">      &lt;<span class="regexp">/List&gt; /</span><span class="regexp">/ &lt;- here</span></span><br><span class="line"><span class="regexp">    &lt;/</span>header&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><ul><li><code>&lt;a&gt;&lt;/a&gt;</code>태그를 사용하면 링크로 이동할 때마다 뷰를 다시 렌더링 하는데, 굉장히 비효율적이다.</li><li>따라서, React에서는 <code>Link</code>라는 기능을 사용함.<ul><li><code>import { Link } from &#39;react-router-dom&#39;;</code></li><li>동일한 페이지에 있을 경우 해당 요소만 교체하는 방식</li></ul></li><li>이 경우에는 아래와 같이 styled-components를 적용<ul><li><code>const SLink = styled(Link)``;</code></li></ul></li><li>Link는 Router 밖에서 사용할 수 없으므로 아래와 같은 형식의 문장 구조를 이룸</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Header /&gt; <span class="comment">// &lt;- here</span></span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/"</span> exact component=&#123;Home&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/tv"</span> exact component=&#123;TV&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/tv/popular"</span> render=&#123;() =&gt; <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>popular<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/search"</span> component=&#123;Search&#125; /&gt;</span><br><span class="line">        &lt;Redirect <span class="keyword">from</span>=<span class="string">"*"</span> to=<span class="string">"/"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><br><h2 id="3-3-GlobalStyles-and-Header"><a href="#3-3-GlobalStyles-and-Header" class="headerlink" title="3.3 GlobalStyles and Header"></a>3.3 GlobalStyles and Header</h2><hr><h3 id="Global-style-적용"><a href="#Global-style-적용" class="headerlink" title="Global style 적용"></a>Global style 적용</h3><ul><li>글로벌로 설정하는 이유는 해당 사이트의 폰트를 설정하거나, styled-components를 설치하거나 하는 등의 작업 때문.</li><li>우선 <code>yarn add styled-reset</code></li><li><a href="https://github.com/zacanger/styled-reset" target="_blank" rel="external nofollow noopener noreferrer">GitHub - zacanger/styled-reset: Eric Meyer’s Reset CSS for styled-components</a></li><li>styled-reset은 SC를 이용하여 CSS초기화 한 뒤 0의 상태에서 시작할 수 있게 해줌.</li><li>GlobalStyles.js 파일 생성</li></ul><p><strong>src - Components - GlobalStyles.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createGlobalStyle &#125; <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"><span class="keyword">import</span> reset <span class="keyword">from</span> <span class="string">'styled-reset'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> globalStyles = createGlobalStyle<span class="string">`</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;reset&#125;</span>;</span></span><br><span class="line"><span class="string">  a &#123;</span></span><br><span class="line"><span class="string">    text-decoration: none;</span></span><br><span class="line"><span class="string">    color: inherit;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  * &#123;</span></span><br><span class="line"><span class="string">    box-sizing: border-box;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  body &#123;</span></span><br><span class="line"><span class="string">    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;</span></span><br><span class="line"><span class="string">    font-size: 14px;</span></span><br><span class="line"><span class="string">    background-color: rgba(20, 20, 20, 1);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> globalStyles;</span><br></pre></td></tr></table></figure><p><strong>src - Components - App.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'Components/Router'</span>;</span><br><span class="line"><span class="keyword">import</span> GlobalStyles <span class="keyword">from</span> <span class="string">'./GlobalStyles'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;&gt;</span><br><span class="line">        &lt;Router /&gt;</span><br><span class="line">        &lt;GlobalStyles /&gt;</span><br><span class="line">      &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><br><h2 id="3-4-Location-Aware-Header"><a href="#3-4-Location-Aware-Header" class="headerlink" title="3.4 Location Aware Header"></a>3.4 Location Aware Header</h2><hr><ul><li>선택된 Header의 border에만 컬러링</li><li>해당 요소에 props를 줌</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Item = styled.li<span class="string">`</span></span><br><span class="line"><span class="string">  width: 50px;</span></span><br><span class="line"><span class="string">  height: 50px;</span></span><br><span class="line"><span class="string">  text-align: center;</span></span><br><span class="line"><span class="string">  border-bottom: 5px solid <span class="subst">$&#123;props =&gt; props.current ? <span class="string">'deeppink'</span> : <span class="string">'transparent'</span>&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><ul><li>props로 현재 선택된 Header의 Router를 전달해야 함<ul><li>이때 <code>withRouter</code>을 사용. 이것은 컴포넌트를 감싸는 또 다른 컴포넌트의 개념.</li><li>Router에 대한 정보를 줌.</li><li><code>import { Link, withRouter } from ‘react-router-dom’;</code></li><li>아래와 같은 형식으로 withRouter로 기존의 컴포넌트를 감싼다.</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HeaderC = <span class="function">(<span class="params">props</span>) =&gt;</span> (</span><br><span class="line">    &lt;Header&gt;</span><br><span class="line">      &#123;<span class="built_in">console</span>.log(props)&#125;</span><br><span class="line">      &lt;List&gt;</span><br><span class="line">        &lt;Item current=&#123;<span class="literal">false</span>&#125;&gt;</span><br><span class="line">          &lt;SLink to=<span class="string">"/"</span>&gt;Movies&lt;<span class="regexp">/SLink&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Item&gt;</span><br><span class="line">        &lt;Item current=&#123;<span class="literal">true</span>&#125;&gt;</span><br><span class="line">          &lt;SLink to=<span class="string">"/tv"</span>&gt;TV&lt;<span class="regexp">/SLink&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Item&gt;</span><br><span class="line">        &lt;Item current=&#123;<span class="literal">false</span>&#125;&gt;</span><br><span class="line">          &lt;SLink to=<span class="string">"/search"</span>&gt;Search&lt;<span class="regexp">/SLink&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Item&gt;</span><br><span class="line">      &lt;<span class="regexp">/List&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Header&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter(HeaderC);</span><br></pre></td></tr></table></figure><ul><li>위와 동일한 내용을 다른 형식으로 작성</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter(<span class="function"><span class="params">props</span> =&gt;</span> (</span><br><span class="line">    &lt;Header&gt;</span><br><span class="line">      &#123;<span class="built_in">console</span>.log(props)&#125;</span><br><span class="line">      &lt;List&gt;</span><br><span class="line">        &lt;Item current=&#123;<span class="literal">false</span>&#125;&gt;</span><br><span class="line">          &lt;SLink to=<span class="string">"/"</span>&gt;Movies&lt;<span class="regexp">/SLink&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Item&gt;</span><br><span class="line">        &lt;Item current=&#123;<span class="literal">true</span>&#125;&gt;</span><br><span class="line">          &lt;SLink to=<span class="string">"/tv"</span>&gt;TV&lt;<span class="regexp">/SLink&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Item&gt;</span><br><span class="line">        &lt;Item current=&#123;<span class="literal">false</span>&#125;&gt;</span><br><span class="line">          &lt;SLink to=<span class="string">"/search"</span>&gt;Search&lt;<span class="regexp">/SLink&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Item&gt;</span><br><span class="line">      &lt;<span class="regexp">/List&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Header&gt;</span><br><span class="line">));</span><br></pre></td></tr></table></figure><ul><li>console.log를 찍어보면 아래와 같이 props를 얻을 수 있음.</li></ul><img src="/images/withRouter-props.png"><ul><li><p>여기서 필요한 것은 pathname</p><ul><li><code>{ location: { pathname } }</code></li></ul></li><li><p>최종적으로 아래와 같이 pathname의 확인 결과가 boolean으로 나올 수 있도록 작성하면 선택한 요소에만 border 색상이 들어감.</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter(<span class="function">(<span class="params">&#123; location: &#123; pathname &#125; &#125;</span>) =&gt;</span> (</span><br><span class="line">    &lt;Header&gt;</span><br><span class="line">      &lt;List&gt;</span><br><span class="line">        &lt;Item current=&#123;pathname === <span class="string">'/'</span>&#125;&gt;</span><br><span class="line">          &lt;SLink to=<span class="string">'/'</span>&gt;Movies&lt;<span class="regexp">/SLink&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Item&gt;</span><br><span class="line">        &lt;Item current=&#123;pathname === <span class="string">'/tv'</span>&#125;&gt;</span><br><span class="line">          &lt;SLink to=<span class="string">'/tv'</span>&gt;TV&lt;<span class="regexp">/SLink&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Item&gt;</span><br><span class="line">        &lt;Item current=&#123;pathname === <span class="string">'/search'</span>&#125;&gt;</span><br><span class="line">          &lt;SLink to=<span class="string">'/search'</span>&gt;Search&lt;<span class="regexp">/SLink&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Item&gt;</span><br><span class="line">      &lt;<span class="regexp">/List&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Header&gt;</span><br><span class="line">));</span><br></pre></td></tr></table></figure><br><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ReactJS-무비앱-만들기-Day-04&quot;&gt;&lt;a href=&quot;#ReactJS-무비앱-만들기-Day-04&quot; class=&quot;headerlink&quot; title=&quot;[ReactJS] 무비앱 만들기 Day 04&quot;&gt;&lt;/a&gt;[ReactJS] 무비앱 만들기 
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="리액트" scheme="http://codeameba.github.io/tags/%EB%A6%AC%EC%95%A1%ED%8A%B8/"/>
    
      <category term="react" scheme="http://codeameba.github.io/tags/react/"/>
    
      <category term="노마드코더" scheme="http://codeameba.github.io/tags/%EB%85%B8%EB%A7%88%EB%93%9C%EC%BD%94%EB%8D%94/"/>
    
      <category term="nomadcoders" scheme="http://codeameba.github.io/tags/nomadcoders/"/>
    
  </entry>
  
  <entry>
    <title>TIL(190829) - TDD(Test Driven Development) 02</title>
    <link href="http://codeameba.github.io/2019/08/29/programming/tdd-til-02/"/>
    <id>http://codeameba.github.io/2019/08/29/programming/tdd-til-02/</id>
    <published>2019-08-28T16:00:42.000Z</published>
    <updated>2020-02-03T07:47:26.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TIL-190829-TDD-Test-Driven-Development-02"><a href="#TIL-190829-TDD-Test-Driven-Development-02" class="headerlink" title="# TIL(190829) - TDD(Test Driven Development) 02"></a># TIL(190829) - TDD(Test Driven Development) 02</h1><hr><p><i>인프런의 ‘견고한 JS 소프트웨어 만들기’ 강의를 보며 정리함</i></p><h2 id="Jasmine-Setting-Up"><a href="#Jasmine-Setting-Up" class="headerlink" title="Jasmine Setting Up"></a>Jasmine Setting Up</h2><hr><ul><li><a href="https://github.com/jasmine/jasmine/releases?after=v2.9.1" target="_blank" rel="external nofollow noopener noreferrer">Releases · jasmine/jasmine · GitHub</a></li><li>강의에서는 2.7.0 버전 다운로드</li><li>SpecRunner.html 파일 실행</li></ul><img src="/images/spec-runner.png">### 테스트 러너<ul><li>자스민, 소스, 테스트 코드를 실행하는 파일</li><li>스탠드 얼론의 경우 HTML 파일이 테스트 러너</li><li>테스트 자동화를 하려면 카르마(Karma) 라이브러리와 연동해야 한다.</li></ul><h2 id="자스민의-활용"><a href="#자스민의-활용" class="headerlink" title="자스민의 활용"></a>자스민의 활용</h2><ul><li>자스민의 SpecRunner.html의 코드를 보면 아래와 같다.</li></ul><img src="/images/spec-runner-code.png"><ul><li>빨간 박스의 자바스크립트 세 줄이 자스민의 테스트 도구라고 할 수 있다.</li><li>그리고, 아래와 같이 본인의 테스트 코드를 넣어서 테스트를 한다.</li></ul><img src="/images/spec-runner-use.png"><ul><li>첫 번째 줄의 describe 함수는 테스트 꾸러미를 만들 때 사용함. 보통은 함수 하나 하나를 테스트 할 때 주로 사용한다.</li><li>두 번째 줄의 it 함수는 테스트 케이스를 만들 때 사용함. 함수의 기능을 테스트 한다고 보면 됨.  첫 번째 인자로 함수 기능의 스펙을 문자열 형태로 넣고, 두 번째 인자로 테스트 함수를 구현할 수 있는 함수를 넣는다.</li><li>세 번째 줄은 테스트 코드 구현 부. 함수의 결과값을 expect 함수의 인자로 넣고, 함수의 기대값을 toBe 함수의 인자로 넣는다.</li></ul><p><strong>테스트 꾸러미(Test Suite)</strong></p><ul><li>describe - 테스트 설명, 테스트 구현 함수</li></ul><p><strong>테스트 스펙(Test Spec)</strong></p><ul><li>it - 테스트 설명, 기대식을 가진 테스트 구현 함수</li></ul><p><strong>기대식과 매쳐</strong></p><ul><li>expect(결과값).toBe(기대값)</li></ul><p><strong>스파이</strong></p><ul><li>spyOn(감시할 객체, 감시할 메서드)</li></ul><h3 id="테스트-결과-확인-방법"><a href="#테스트-결과-확인-방법" class="headerlink" title="테스트 결과 확인 방법"></a>테스트 결과 확인 방법</h3><img src="/images/test-result.png"><ul><li>hello world는 describe  함수로 선언했던 테스트 꾸러미의 이름이라고 할 수 있음.</li><li>true is true는 hello world 테스트 꾸러미에 속한 테스트 케이스.</li><li>위의 내용을 통틀어 1개의 테스트가 실행되었으므로 1spec이라고 명시되었다.</li><li>실패는 없으므로 0 failures.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TIL-190829-TDD-Test-Driven-Development-02&quot;&gt;&lt;a href=&quot;#TIL-190829-TDD-Test-Driven-Development-02&quot; class=&quot;headerlink&quot; title=&quot;# TIL(1908
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="Javascript" scheme="http://codeameba.github.io/tags/Javascript/"/>
    
      <category term="패스트캠퍼스" scheme="http://codeameba.github.io/tags/%ED%8C%A8%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%8D%BC%EC%8A%A4/"/>
    
      <category term="TDD" scheme="http://codeameba.github.io/tags/TDD/"/>
    
      <category term="테스트주도개발" scheme="http://codeameba.github.io/tags/%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%A3%BC%EB%8F%84%EA%B0%9C%EB%B0%9C/"/>
    
  </entry>
  
  <entry>
    <title>[ReactJS] 무비앱 만들기 Day 03</title>
    <link href="http://codeameba.github.io/2019/08/28/programming/react-movie-app-03/"/>
    <id>http://codeameba.github.io/2019/08/28/programming/react-movie-app-03/</id>
    <published>2019-08-27T16:00:42.000Z</published>
    <updated>2020-02-03T07:47:26.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ReactJS-무비앱-만들기-Day-03"><a href="#ReactJS-무비앱-만들기-Day-03" class="headerlink" title="[ReactJS] 무비앱 만들기 Day 03"></a>[ReactJS] 무비앱 만들기 Day 03</h1><hr><h2 id="2-0-Setting-up-the-project"><a href="#2-0-Setting-up-the-project" class="headerlink" title="2.0 Setting up the project"></a>2.0 Setting up the project</h2><hr><h3 id="create-react-app"><a href="#create-react-app" class="headerlink" title="create-react-app"></a>create-react-app</h3><ul><li>yarn 또는 npm을 사용<ul><li><code>yarn global add create-react-app</code></li></ul></li><li>간편하게 react를 시작할 수 있게 해주는 모듈<ul><li><code>create-react-app</code></li></ul></li><li>컴퓨터에 저장하기 때문에 매번 버전 확인 및 업데이트를 해야한다는 번거로움이 있음.</li></ul><br><h3 id="npx"><a href="#npx" class="headerlink" title="npx"></a>npx</h3><ul><li>앞의 경우를  보완한 것이 npx를 통한 설치<ul><li><code>yarn global add npx</code> or <code>npm i npx -g</code></li></ul></li><li>이것 또한 모듈이지만, 컴퓨터에 저장할 필요가 없음.</li><li>항상 최신 버전의 create-react-app을 받아서 실행한 뒤, 끝나면 삭제 됨<ul><li><code>npx create-react-app</code></li></ul></li></ul><br><h3 id="prop-types"><a href="#prop-types" class="headerlink" title="prop-types"></a>prop-types</h3><ul><li>prop-types 모듈 설치 필요<ul><li><code>yarn add prop-types</code></li></ul></li></ul><br><h2 id="2-1-React-router-part-one"><a href="#2-1-React-router-part-one" class="headerlink" title="2.1 React router part one"></a>2.1 React router part one</h2><hr><h3 id="Screens"><a href="#Screens" class="headerlink" title="Screens"></a>Screens</h3><ul><li>[  ] Home</li><li>[  ] TV Shows</li><li>[  ] Search</li><li>[  ] Detail</li></ul><br><h3 id="React-Router"><a href="#React-Router" class="headerlink" title="React Router"></a>React Router</h3><ul><li><a href="https://github.com/ReactTraining/react-router" target="_blank" rel="external nofollow noopener noreferrer">GitHub - ReactTraining/react-router: Declarative routing for React</a><ul><li><a href="https://reacttraining.com/react-router/web/guides/quick-start" target="_blank" rel="external nofollow noopener noreferrer">React Router: Declarative Routing for React.js</a></li></ul></li><li>React App에게 Home에서 시작해야 한다는 걸 알려주기 위한 도구</li><li>React의 Routing 패키지</li><li>DOM과 react-native에도 사용 가능함</li><li>React Router는 컴포넌트 묶음이다.</li></ul><br><h2 id="2-2-React-router-part-two"><a href="#2-2-React-router-part-two" class="headerlink" title="2.2 React router part two"></a>2.2 React router part two</h2><hr><h3 id="HashRouter"><a href="#HashRouter" class="headerlink" title="HashRouter"></a>HashRouter</h3><ul><li>url에 해쉬태그가 들어가기 때문에 미관상 보기 좋지 않음</li><li><code>http://localhost:3000/#/home</code></li></ul><br><h3 id="BrowserRouter"><a href="#BrowserRouter" class="headerlink" title="BrowserRouter"></a>BrowserRouter</h3><ul><li>일반적인 웹 페이지의 url</li><li><code>http://localhost:3000/home</code></li></ul><br><h3 id="Composition"><a href="#Composition" class="headerlink" title="Composition"></a>Composition</h3><ul><li>두 개 이상의 Route를 동시에 랜더링 하는 방식<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/"</span> exact component=&#123;Home&#125; /&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/tv"</span> component=&#123;TV&#125; /&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/tv/popular"</span> render=&#123;() =&gt; <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>popular<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>&#125; /&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/search"</span> component=&#123;Search&#125; /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><img src="/images/composition.png"></li></ul><br><h3 id="Redirect"><a href="#Redirect" class="headerlink" title="Redirect"></a>Redirect</h3><ul><li><code>&lt;Redirect from=“*” to=“/“ /&gt;</code></li><li>해당되는 페이지만 렌더링 되도록 함.<ul><li>But, 경로가 겹치게 되어서 에러가 나는데 그래서 <code>Switch</code>를 사용해야 함.</li></ul></li></ul><br><h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><ul><li>한 번에 오직 하나의 Route만 랜더링 할 수 있게 함.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Router.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Redirect, Switch &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'Routes/Home'</span>;</span><br><span class="line"><span class="keyword">import</span> TV <span class="keyword">from</span> <span class="string">'Routes/TV'</span>;</span><br><span class="line"><span class="keyword">import</span> Search <span class="keyword">from</span> <span class="string">'Routes/Search'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;Switch&gt; <span class="comment">// &lt;- Switch</span></span><br><span class="line">      &lt;Route path=<span class="string">"/"</span> exact component=&#123;Home&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/tv"</span> component=&#123;TV&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/tv/popular"</span> render=&#123;() =&gt; <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>popular<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/search"</span> component=&#123;Search&#125; /&gt;</span><br><span class="line">      &lt;Redirect <span class="keyword">from</span>=<span class="string">"*"</span> to=<span class="string">"/"</span> /&gt; <span class="comment">// &lt;- Redirect</span></span><br><span class="line">    &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>Router&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><br><h3 id="exact"><a href="#exact" class="headerlink" title="exact"></a>exact</h3><ul><li>주어진 경로와 정확히 동일할 때 설정한 컴포넌트를 보여줌.</li></ul><hr><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><ul><li><a href="https://velopert.com/3417" target="_blank" rel="external nofollow noopener noreferrer">react-router :: 1장. 리액트 라우터 사용해보기 | VELOPERT.LOG</a></li><li><a href="https://reacttraining.com/react-router/web/guides/quick-start" target="_blank" rel="external nofollow noopener noreferrer">React Router: Declarative Routing for React.js</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ReactJS-무비앱-만들기-Day-03&quot;&gt;&lt;a href=&quot;#ReactJS-무비앱-만들기-Day-03&quot; class=&quot;headerlink&quot; title=&quot;[ReactJS] 무비앱 만들기 Day 03&quot;&gt;&lt;/a&gt;[ReactJS] 무비앱 만들기 
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="리액트" scheme="http://codeameba.github.io/tags/%EB%A6%AC%EC%95%A1%ED%8A%B8/"/>
    
      <category term="react" scheme="http://codeameba.github.io/tags/react/"/>
    
      <category term="노마드코더" scheme="http://codeameba.github.io/tags/%EB%85%B8%EB%A7%88%EB%93%9C%EC%BD%94%EB%8D%94/"/>
    
      <category term="nomadcoders" scheme="http://codeameba.github.io/tags/nomadcoders/"/>
    
  </entry>
  
  <entry>
    <title>[ReactJS] 무비앱 만들기 Day 02</title>
    <link href="http://codeameba.github.io/2019/08/27/programming/react-movie-app-02/"/>
    <id>http://codeameba.github.io/2019/08/27/programming/react-movie-app-02/</id>
    <published>2019-08-26T16:00:42.000Z</published>
    <updated>2020-02-03T07:47:26.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ReactJS-무비앱-만들기-Day-02"><a href="#ReactJS-무비앱-만들기-Day-02" class="headerlink" title="[ReactJS] 무비앱 만들기 Day 02"></a>[ReactJS] 무비앱 만들기 Day 02</h1><hr><br><h2 id="1-6-Array-map"><a href="#1-6-Array-map" class="headerlink" title="1.6 Array.map"></a>1.6 Array.map</h2><hr><ul><li>API로부터 배열로 된 데이터를 받게 되기 때문에 배열 메서드는 중요함</li><li>map 메서드는 해당 배열 요소에 모두 동일한 사항을 매핑하여 새로운 배열을 만들어냄</li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="external nofollow noopener noreferrer">Array.prototype.map() - JavaScript | MDN</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> days = [<span class="string">'Mon'</span>, <span class="string">'Tue'</span>, <span class="string">'Wed'</span>, <span class="string">'Thu'</span>, <span class="string">'Fri'</span>];</span><br><span class="line"><span class="keyword">const</span> drinkDays = days.map(<span class="function"><span class="params">day</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;day&#125;</span>: I'll drink beer`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(drinkDays);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">'Mon: I'll drink beer',</span></span><br><span class="line"><span class="comment">'Tue: I'll drink beer',</span></span><br><span class="line"><span class="comment">'Wed: I'll drink beer',</span></span><br><span class="line"><span class="comment">'Thu: I'll drink beer',</span></span><br><span class="line"><span class="comment">'Fri: I'll drink beer'</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><br><h2 id="1-7-Array-filter"><a href="#1-7-Array-filter" class="headerlink" title="1.7 Array.filter"></a>1.7 Array.filter</h2><hr><ul><li>filter 메서드는 주어진 조건을 만족하는 요소만으로 새로운 배열을 만듬</li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="external nofollow noopener noreferrer">Array.prototype.filter() - JavaScript | MDN</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [ <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">32</span>, <span class="number">31</span>, <span class="number">5</span>, <span class="number">64</span>, <span class="number">12</span>, <span class="number">24</span>, <span class="number">87</span>, <span class="number">66</span>, <span class="number">59</span>, <span class="number">243</span>, <span class="number">356</span>, <span class="number">645</span>, <span class="number">210</span> ];</span><br><span class="line"><span class="keyword">const</span> biggerThan50 = numbers.filter(<span class="function"><span class="params">num</span> =&gt;</span> num &gt; <span class="number">50</span>);</span><br><span class="line"><span class="built_in">console</span>.log(biggerThan50);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">   64,  87,  66,  59, 243, 356, 645, 210</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><br><h2 id="1-8-forEach-includes-push"><a href="#1-8-forEach-includes-push" class="headerlink" title="1.8 forEach / includes / push"></a>1.8 forEach / includes / push</h2><hr><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><ul><li>새로운 배열을 반환하는 map이나 filter와 다름</li><li>배열 각각의 요소에 접근하여 조건에 받는 요소를 반환</li><li>로컬 스토리지에 저장한다던가, API로 보낸다던가, 경고를 보낸다던가 하는 등의 작업에 사용</li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="external nofollow noopener noreferrer">Array.prototype.forEach() - JavaScript | MDN</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> beers = [<span class="string">'cass'</span>, <span class="string">'hite'</span>, <span class="string">'terra'</span>, <span class="string">'fitz'</span>];</span><br><span class="line">beers.forEach(<span class="function"><span class="params">beer</span> =&gt;</span> <span class="built_in">console</span>.log(beer));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">cass</span></span><br><span class="line"><span class="comment">hite</span></span><br><span class="line"><span class="comment">terra</span></span><br><span class="line"><span class="comment">fitz</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><br><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><ul><li>배열에 새로운 요소를 추가할 때 사용함</li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank" rel="external nofollow noopener noreferrer">Array.prototype.push() - JavaScript | MDN</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> beers = [<span class="string">'cass'</span>, <span class="string">'hite'</span>, <span class="string">'terra'</span>, <span class="string">'fitz'</span>];</span><br><span class="line">beers.push(<span class="string">'kloud'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(beers);</span><br><span class="line"><span class="comment">// [ 'cass', 'hite', 'terra', 'fitz', 'kloud' ]</span></span><br></pre></td></tr></table></figure><br><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><ul><li>배열 내에 특정 요소가 존재하는 확인</li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" target="_blank" rel="external nofollow noopener noreferrer">Array.prototype.includes() - JavaScript | MDN</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cars = [<span class="string">'BMW'</span>, <span class="string">'AUDI'</span>, <span class="string">'VOLVO'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!cars.includes(<span class="string">'BENZ'</span>)) &#123;</span><br><span class="line">  cars.push(<span class="string">'BENZ'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cars);</span><br><span class="line"><span class="comment">// [ 'BMW', 'AUDI', 'VOLVO', 'BENZ' ]</span></span><br></pre></td></tr></table></figure><br><h2 id="추가-reduce"><a href="#추가-reduce" class="headerlink" title="추가) reduce"></a>추가) reduce</h2><hr><ul><li>reduce는 단순히 배열 내의 요소를 모두 합하여 하나로 만드는 역할만 하는 메서드가 아니다.</li><li>활용하기에 따라 무궁무진한 가능성이 있다.</li><li>꾸준히 반복 학습이 필요한 메서드 중 하나.</li><li><code>배열.reduce((누적값,현재값,인덱스,요소)=&gt;{return결과},초기값);</code></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="external nofollow noopener noreferrer">Array.prototype.reduce() - JavaScript | MDN</a></li></ul><hr><h3 id="참고-자료"><a href="#참고-자료" class="headerlink" title="참고 자료"></a>참고 자료</h3><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="external nofollow noopener noreferrer">Array.prototype.slice() - JavaScript | MDN</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="external nofollow noopener noreferrer">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce</a> </li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/split" target="_blank" rel="external nofollow noopener noreferrer">String.prototype.split() - JavaScript | MDN</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/parseInt" target="_blank" rel="external nofollow noopener noreferrer">parseInt() - JavaScript | MDN</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ReactJS-무비앱-만들기-Day-02&quot;&gt;&lt;a href=&quot;#ReactJS-무비앱-만들기-Day-02&quot; class=&quot;headerlink&quot; title=&quot;[ReactJS] 무비앱 만들기 Day 02&quot;&gt;&lt;/a&gt;[ReactJS] 무비앱 만들기 
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="리액트" scheme="http://codeameba.github.io/tags/%EB%A6%AC%EC%95%A1%ED%8A%B8/"/>
    
      <category term="react" scheme="http://codeameba.github.io/tags/react/"/>
    
      <category term="노마드코더" scheme="http://codeameba.github.io/tags/%EB%85%B8%EB%A7%88%EB%93%9C%EC%BD%94%EB%8D%94/"/>
    
      <category term="nomadcoders" scheme="http://codeameba.github.io/tags/nomadcoders/"/>
    
  </entry>
  
  <entry>
    <title>[ReactJS] 무비앱 만들기 Day 01</title>
    <link href="http://codeameba.github.io/2019/08/26/programming/react-movie-app-01/"/>
    <id>http://codeameba.github.io/2019/08/26/programming/react-movie-app-01/</id>
    <published>2019-08-25T16:00:42.000Z</published>
    <updated>2020-02-03T07:47:26.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ReactJS-무비앱-만들기-Day-01"><a href="#ReactJS-무비앱-만들기-Day-01" class="headerlink" title="[ReactJS] 무비앱 만들기 Day 01"></a>[ReactJS] 무비앱 만들기 Day 01</h1><hr><br><h2 id="1-1-Arrow-Function"><a href="#1-1-Arrow-Function" class="headerlink" title="1.1 Arrow Function"></a>1.1 Arrow Function</h2><hr><ul><li>ES6에서 새롭게 추가된 기능</li><li>ES6 이전 일반적인 형태의 함수에서는 return을 생략하면 undefined가 출력되었지만, 화살표 함수에서는 내부적으로 return을 자동으로 해주기 때문에 생략이 가능하다.</li><li>단,  <code>{}</code>를 사용한다면 return을 명시해줘야 한다.</li><li>parameter가 1개일 경우에는 <code>()</code> 생략 가능.</li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/%EC%95%A0%EB%A1%9C%EC%9A%B0_%ED%8E%91%EC%85%98" target="_blank" rel="external nofollow noopener noreferrer">화살표 함수 - JavaScript | MDN</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> beers = [<span class="string">'cass'</span>, <span class="string">'hite'</span>, <span class="string">'terra'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 이전</span></span><br><span class="line"><span class="keyword">const</span> beerFilter = beers.filter(<span class="function"><span class="keyword">function</span>(<span class="params">beer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> beer.length &gt; <span class="number">4</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(beerFilter); <span class="comment">// [ 'terra' ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 이후</span></span><br><span class="line"><span class="keyword">const</span> beerFilterVer2 = beers.filter(<span class="function"><span class="params">beer</span> =&gt;</span> beer.length &lt; <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(beerFilterVer2); <span class="comment">// [ 'cass', 'hite' ]</span></span><br></pre></td></tr></table></figure><br><h2 id="1-2-Template-Literals"><a href="#1-2-Template-Literals" class="headerlink" title="1.2 Template Literals"></a>1.2 Template Literals</h2><hr><ul><li>Template Literals는 Template와 변수, 문자열 등을 다루기에 적합한 방법이다.</li><li>백틱(backtracks)라고 부르는 기호를 활용하며 문자열로 출력하게 한다.</li><li>인자는 <code>${}</code>  이것으로 감싼다.</li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Template_literals" target="_blank" rel="external nofollow noopener noreferrer">Template literals - JavaScript | MDN</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> beerBox = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'CASS'</span>,</span><br><span class="line">    <span class="keyword">from</span>: <span class="string">'KOREA'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'STELLA'</span>,</span><br><span class="line">    <span class="keyword">from</span>: <span class="string">'BELGIUM'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'KIRIN'</span>,</span><br><span class="line">    <span class="keyword">from</span>: <span class="string">'JAPAN'</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> favBeer = beerBox.filter(<span class="function"><span class="params">beer</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (beer.from === <span class="string">'KOREA'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">`I LOVE <span class="subst">$&#123;beer.name&#125;</span>`</span>); <span class="comment">// &lt;- template literals</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// I LOVE CASS</span></span><br></pre></td></tr></table></figure><br><h2 id="1-3-Object-Destructuring"><a href="#1-3-Object-Destructuring" class="headerlink" title="1.3 Object Destructuring"></a>1.3 Object Destructuring</h2><hr><ul><li>우리말로 <strong>구조 분해 할당</strong> 이라고 하며, 동일한 할당 작업을 반복해야 할 때 이를 한 번에 할 수 있게 해줌.</li><li>비교적 적은 코드가 사용되기 때문에 깔끔하게 보인다는 게 장점</li><li>Object를 기반으로 생성됨.</li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="external nofollow noopener noreferrer">구조 분해 할당 - JavaScript | MDN</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> beer = &#123;</span><br><span class="line">  name: <span class="string">'CASS'</span>,</span><br><span class="line">  <span class="keyword">from</span>: <span class="string">'KOREA'</span>,</span><br><span class="line">  taste: <span class="string">'FRESH'</span>,</span><br><span class="line">  type: <span class="string">'LAGER'</span>,</span><br><span class="line">  <span class="keyword">with</span>: &#123;</span><br><span class="line">    morning: <span class="string">'CUP RA-MYEON'</span>,</span><br><span class="line">    afternoon: <span class="string">'PIZZA'</span>,</span><br><span class="line">    evening: <span class="string">'SAM-GYEOP-SAL'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; name, <span class="keyword">from</span>, taste, type, <span class="attr">with</span>: &#123; afternoon &#125; &#125; = beer;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name&#125;</span> is from <span class="subst">$&#123;<span class="keyword">from</span>&#125;</span>, this is <span class="subst">$&#123;taste&#125;</span> <span class="subst">$&#123;type&#125;</span>. I love drink with <span class="subst">$&#123;afternoon&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// CASS is from KOREA, this is FRESH LAGER. I love drink with PIZZA</span></span><br></pre></td></tr></table></figure><br><h2 id="1-4-Spread-Operator"><a href="#1-4-Spread-Operator" class="headerlink" title="1.4 Spread Operator"></a>1.4 Spread Operator</h2><hr><ul><li>배열이나 객체를 풀어줌(Unpack).</li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_syntax" target="_blank" rel="external nofollow noopener noreferrer">전개 구문 - JavaScript | MDN</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> days = [<span class="string">'Mon'</span>, <span class="string">'Tue'</span>, <span class="string">'Wed'</span>];</span><br><span class="line"><span class="keyword">const</span> otherDays = [<span class="string">'Thu'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allDays = [days, otherDays, <span class="string">'Sun'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(allDays);</span><br><span class="line"><span class="comment">// [ [ 'Mon', 'Tue', 'Wed' ], [ 'Thu', 'Fri', 'Sat' ], 'Sun' ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allDaysVer2 = [...days, ...otherDays, <span class="string">'Sun'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(allDaysVer2);</span><br><span class="line"><span class="comment">// [ 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun' ]</span></span><br></pre></td></tr></table></figure><br><h2 id="1-5-Classes"><a href="#1-5-Classes" class="headerlink" title="1.5 Classes"></a>1.5 Classes</h2><hr><ul><li>프로그래밍에는 크게 두 종류의 패러다임이 있다<ul><li>함수형 프로그래밍(Functional Programming)</li><li>객체 지향 프로그래밍(OOP, Object Oriented Programming)</li></ul></li><li>객체 지향 프로그래밍의 경우 모든 것을 객체나 클래스로 만들고, 부모 자식의 관계가 분명하다.</li><li>Class는 청사진(Blueprint)과 같다고 생각하면 된다.</li><li>리액트에서 지겹도록 사용하게 됨.</li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="external nofollow noopener noreferrer">Classes - JavaScript | MDN</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartPhone</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, made) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.made = made;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calling</span> <span class="keyword">extends</span> <span class="title">SmartPhone</span> </span>&#123;</span><br><span class="line">  ringRing() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello?'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  intro() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`This phone is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myPhone = <span class="keyword">new</span> SmartPhone(<span class="string">'iphone'</span>, <span class="string">'apple'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myPhone.name);</span><br><span class="line"><span class="comment">// iphone</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> yourPhone = <span class="keyword">new</span> Calling(<span class="string">'galaxy'</span>, <span class="string">'samsung'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(yourPhone.ringRing(), yourPhone.intro());</span><br><span class="line"><span class="comment">// Hello?</span></span><br><span class="line"><span class="comment">// This phone is galaxy</span></span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes/static" target="_blank" rel="external nofollow noopener noreferrer">static - JavaScript | MDN</a></li><li><a href="https://velog.io/@ddalpange/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B0%9D%EC%B2%B4-%EB%B3%B5%EC%82%AC%ED%95%98%EA%B8%B0" target="_blank" rel="external nofollow noopener noreferrer">자바스크립트 객체 복사하기</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze" target="_blank" rel="external nofollow noopener noreferrer">Object.freeze() - JavaScript | MDN</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ReactJS-무비앱-만들기-Day-01&quot;&gt;&lt;a href=&quot;#ReactJS-무비앱-만들기-Day-01&quot; class=&quot;headerlink&quot; title=&quot;[ReactJS] 무비앱 만들기 Day 01&quot;&gt;&lt;/a&gt;[ReactJS] 무비앱 만들기 
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="리액트" scheme="http://codeameba.github.io/tags/%EB%A6%AC%EC%95%A1%ED%8A%B8/"/>
    
      <category term="react" scheme="http://codeameba.github.io/tags/react/"/>
    
      <category term="노마드코더" scheme="http://codeameba.github.io/tags/%EB%85%B8%EB%A7%88%EB%93%9C%EC%BD%94%EB%8D%94/"/>
    
      <category term="nomadcoders" scheme="http://codeameba.github.io/tags/nomadcoders/"/>
    
  </entry>
  
  <entry>
    <title>[JavaScript] ++i 와 i++의 차이</title>
    <link href="http://codeameba.github.io/2019/08/20/programming/js-til-increase-decrease/"/>
    <id>http://codeameba.github.io/2019/08/20/programming/js-til-increase-decrease/</id>
    <published>2019-08-19T16:00:42.000Z</published>
    <updated>2020-02-03T07:47:26.920Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript-i-와-i-의-차이"><a href="#JavaScript-i-와-i-의-차이" class="headerlink" title="[JavaScript] ++i 와 i++의 차이"></a>[JavaScript] ++i 와 i++의 차이</h2><img src="https://images.unsplash.com/photo-1461773518188-b3e86f98242f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1400&q=60">***<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(i++);</span><br><span class="line"><span class="built_in">console</span>.log(++i);</span><br><span class="line"><span class="built_in">console</span>.log(i++);</span><br><span class="line"><span class="built_in">console</span>.log(++i);</span><br></pre></td></tr></table></figure><p>위의 출력 결과를 알 수 있겠는가? 불과 3개월 전의 나라면 단순하게 1, 2, 3, 4라고 답했을 지도 모르겠다. 하지만, 지금의 나는 둘의 차이를 분명하게 알고 있다.</p><p>위와 같이 <code>++</code> 혹은, <code>--</code>와 같이 더하기나 빼기 기호가 이어져 있는 연산자를 <strong>증감 연산자</strong>라고 하는데, 변수의 앞에 있을 경우 <strong>전위 증감 연산자</strong>, 뒤에 있을 경우 <strong>후위 증감 연산자</strong>라고 부른다.</p><p>이 증감 연산자는 말 그대로 숫자형의 변수를 1씩 증가 시키거나 1씩 감소 시킨다. 여기까지만 알고 있다면, 자연스럽게 위의 답을 1, 2, 3, 4라고 할 수 있을 것이다.</p><p>위의 답을 먼저 밝히자면 <code>0, 2, 2, 4</code>다.<br>1씩 증가하는 증감 연산자인데 어째서 1과 3이 빠지고 2씩 증가했는지 의아하게 생각할 누군가를 위해 개인적인 복습 겸 설명을 해볼까 한다.</p><p>여기서 우리는 위의 증감 연산자가 <strong>전위</strong>인가 <strong>후위</strong>인가를 주의 깊게 봐야 한다. 굳이 이름까지 다르게 붙였다는 것은 각각의 작동 방식이다 다르다는 것을 의미한다.</p><br><h3 id="전위-증감-연산자-i"><a href="#전위-증감-연산자-i" class="headerlink" title="전위 증감 연산자(++i)"></a>전위 증감 연산자(++i)</h3><hr><p>전위 증감 연산자는 변수의 값을 <strong>증가 먼저 시킨 뒤에 할당한다.</strong> 따라서 아래와 같은 경우가 있다면,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(++i);</span><br></pre></td></tr></table></figure><p>출력 값은 <code>1</code>이 나올 것이다.</p><br><h3 id="후위-증감-연산자-i"><a href="#후위-증감-연산자-i" class="headerlink" title="후위 증감 연산자(i++)"></a>후위 증감 연산자(i++)</h3><hr><p>반면에 후위 증감 연산자는 변수의 값을 <strong>할당 먼저 한 뒤에 증가 시킨다.</strong> 따라서 아래와 같은 경우가 있다면,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(i++);</span><br></pre></td></tr></table></figure><p>증가 시키기 전의 값인  <code>0</code>이 나올 것이다.</p><br><h3 id="증감-연산자의-반복"><a href="#증감-연산자의-반복" class="headerlink" title="증감 연산자의 반복"></a>증감 연산자의 반복</h3><hr><p>전위 증감 연산자를 쓰던 후위 증감 연산자를 쓰던 정해진 범위 내에서 증감이 이루어지기 때문에 최초의 값이 필요하다면 후위를, 최초의 값이 필요 없다면 전위를 쓰면 된다고 생각한다. 둘의 미묘한 속도 차이가 있다고는 하는데, 몇 차례 출력을 해본 결과로는 후위 증감 연산자가 약간 빠른 것 같기도 한다. 0.01초 정도.</p><p><strong>어쨌든 중요한 것은, 전위와 후위를 섞어 쓰지 않는 것이다. 하나를 정했다면 그 프로젝트에서는 끝까지 그걸로 가야만 한다. 그래야 평화로울 것이다.</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JavaScript-i-와-i-의-차이&quot;&gt;&lt;a href=&quot;#JavaScript-i-와-i-의-차이&quot; class=&quot;headerlink&quot; title=&quot;[JavaScript] ++i 와 i++의 차이&quot;&gt;&lt;/a&gt;[JavaScript] ++i 와
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="일기" scheme="http://codeameba.github.io/tags/%EC%9D%BC%EA%B8%B0/"/>
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="Javascript" scheme="http://codeameba.github.io/tags/Javascript/"/>
    
      <category term="증감연산자" scheme="http://codeameba.github.io/tags/%EC%A6%9D%EA%B0%90%EC%97%B0%EC%82%B0%EC%9E%90/"/>
    
  </entry>
  
</feed>
