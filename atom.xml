<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AmebaLab</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://codeameba.github.io/"/>
  <updated>2020-06-03T07:58:02.610Z</updated>
  <id>http://codeameba.github.io/</id>
  
  <author>
    <name>Sooyoung Jeong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>자주 쓰는 깃(git)과 터미널(terminal)의 주요 명령어</title>
    <link href="http://codeameba.github.io/2020/06/03/programming/tip-git-command/"/>
    <id>http://codeameba.github.io/2020/06/03/programming/tip-git-command/</id>
    <published>2020-06-03T07:55:42.000Z</published>
    <updated>2020-06-03T07:58:02.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="깃-git-이란"><a href="#깃-git-이란" class="headerlink" title="깃(git)이란?"></a>깃(git)이란?</h2><p>위키백과에서 말하길, <strong>깃(git)은 프로그램 등의 소스 코드 관리를 위한 분산 버전 관리 시스템</strong>이라고 한다. 다소 어려운 말로 설명이 되었는데, 내가 이해한 개념으로 다시 말하자면, ‘끔찍한 사태를 예방하기 위한 일종의 보험’ 같은 것이다. 여기서 끔찍한 사태란, 서비스를 개발하며 일어날 수 있는 모든 최악의 상황들을 말한다. 이래도 깃의 필요성을 느끼지 못 하는 사람이 있을 수 있으니, 조금 더 친절하게 가벼운 예시를 들어보겠다.</p><img src="https://images.unsplash.com/photo-1477949331575-2763034b5fb5?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80"><h4 id="예시-1"><a href="#예시-1" class="headerlink" title="예시 1"></a>예시 1</h4><blockquote><p>개발자A는 평소 USB를 애용하며 파일을 전달할 때에도 수고롭게 USB에 담아서 전달한다. 그날도 중요한 프로젝트의 소스코드를 USB에 고이 담아 동료에게 전달했다. 본인이 모르는 사이에 바이러스에 감염되었다는 사실도 모른 채…</p></blockquote><h4 id="예시-2"><a href="#예시-2" class="headerlink" title="예시 2"></a>예시 2</h4><blockquote><p>개발자B는 본인이 깃 명령어를 모른다는 것에 자격지심을 느껴 일개 시스템보다 인간이 우수하다는 보여주겠다며, 본인만의 폴더에 파일명을 하나하나 정성껏 지정하여 업데이트 내역을 관리했다. 그러던 어느날 극도로 피로한 상태에서 야근을 하던 개발자B는 작업하던 파일을 저장하고 가벼운 마음으로 퇴근을 했다. ‘다른 이름으로 저장하기’가 아닌, ‘저장’을 했다는 사실도 모른 채…</p></blockquote><p>요즘 유행한다는 열린결말로 예시를 들어보았다. 각 예시의 결말은 당신의 상상에 맡기겠다. 물론, 두 사례 모두 현실성 없는 극단적인 예시이며, 이후에 딱히 별일이 없었을지도 모른다. 하지만, 개발자는 언제나 최악을 상황까지 고려하여 차선책을 마련해야만 한다고 나는 생각한다. 최악의 상황이 본인만의 일이라면 모르겠지만, 모두의 부담이 될 수도 있다. 따라서 버전별 소스코드를 저장 및 관리가 가능하고, 만일의 상황에서도 빠른 대처가 가능한 깃의 사용은 필수다.</p><h2 id="깃-git-을-설치해보자"><a href="#깃-git-을-설치해보자" class="headerlink" title="깃(git)을 설치해보자"></a>깃(git)을 설치해보자</h2><p><a href="https://git-scm.com/download/mac" target="_blank" rel="external nofollow noopener noreferrer">OS X 깃 설치 링크</a><br><a href="https://gitforwindows.org/" target="_blank" rel="external nofollow noopener noreferrer">Windows 깃 설치 링크</a></p><h2 id="필수-명령어"><a href="#필수-명령어" class="headerlink" title="필수 명령어"></a>필수 명령어</h2><p>개인적으로 자주 사용하게 되는 터미널(terminal)과 깃(git)명령어를 소개한다. 카페에서 터미널을 실행하고 현란한 타이핑으로 명령어들을 실행하면 상당히 멋있다(고 나는 생각한다).</p><h3 id="만약-깃을-처음-쓰거나-컴퓨터를-바꿨다면…"><a href="#만약-깃을-처음-쓰거나-컴퓨터를-바꿨다면…" class="headerlink" title="만약 깃을 처음 쓰거나, 컴퓨터를 바꿨다면…"></a>만약 깃을 처음 쓰거나, 컴퓨터를 바꿨다면…</h3><p>전역 사용자와 이메일을 등록해야 한다. 사용자 등록을 안 하더라도 깃헙은 사용할 수 있으나, 소중한 커밋(commit)이 집계되지 않아서 푸르른 잔디밭의 꿈이 날아간다.</p><ul><li>사용자 등록: <code>git config --global user.name &quot;본인이름&quot;</code></li><li>이메일 등록: <code>git config --global user.email &quot;이메일주소&quot;</code></li><li>전역 사용자 정보 조회: <code>git config --global --list</code></li></ul><p>저장소에 따라 별도의 사용자와 이메일을 등록하려면,</p><ul><li>사용자 등록: <code>git config user.name &quot;본인이름&quot;</code></li><li>이메일 등록: <code>git config user.email &quot;이메일주소&quot;</code></li><li>사용자 정보 조회: <code>git config --list</code></li></ul><h3 id="자주-쓰는-터미널-명령어"><a href="#자주-쓰는-터미널-명령어" class="headerlink" title="자주 쓰는 터미널 명령어"></a>자주 쓰는 터미널 명령어</h3><ul><li>현재 위치 확인: <code>pwd</code></li><li>현재 위치의 폴더 확인: <code>ls</code></li><li>최상위 위치로 이동: <code>cd</code></li><li>한 단계 상위로 이동: <code>cd ..</code></li><li>파일 생성: <code>touch 파일명</code></li><li>폴더 생성: <code>mkdir 폴더명</code> Make Directory의 이니셜로 기억하면 쉽다.</li><li>폴더 안에 또 폴더 만들기: <code>mkdir -p 폴더명/{하위폴더1,하위폴더2,하위폴더3}</code></li><li>파일 삭제: <code>rm 파일명</code></li><li>폴더 삭제: <code>rm -rf 폴더명</code> 또는 <code>rmdir 폴더명</code></li><li>폴더로 이동: <code>cd 폴더명</code></li></ul><h3 id="자주-쓰는-깃-명령어"><a href="#자주-쓰는-깃-명령어" class="headerlink" title="자주 쓰는 깃 명령어"></a>자주 쓰는 깃 명령어</h3><ul><li><p>현 위치의 디렉토리 초기화: <code>git init</code></p></li><li><p>현 위치의 디렉토리와 원격 저장소 연결: <code>git remote add 이름 저장소URL</code></p><blockquote><p>이름은 관용적으로 origin을 쓴다. 저장소URL 위치는 아래의 이미지 참고.</p><img src="/images/repo-url.jpg"></blockquote></li><li><p>원격 저장소 복제: <code>git clone 저장소URL</code></p><blockquote><p>저장소를 복제하면 별도의 remote 연결 과정은 생략해도 된다.</p></blockquote></li><li><p>원격 저장소 내려받기: <code>git pull remote(ex: origin, 생략 가능) branch(ex: master, feature, 생략가능)</code></p><blockquote><p>파일을 업로드 하기 전에 현재 상태를 내려받아야 한다. 안 그러면 에러 메시지가 나온다.<br>branch는 저장소 기준</p></blockquote></li><li><p>로컬에서 원격 저장소로 보내기: <code>git push remote branch</code></p><blockquote><p>branch는 로컬 기준</p></blockquote></li><li><p>깃에 특정 파일 추가: <code>git add 파일명</code></p></li><li><p>깃에 모든 파일 추가: <code>git add .</code></p></li><li><p>커밋(commit): <code>git commit -m &quot;설명&quot;</code></p></li><li><p>현 상태 확인: <code>git status</code></p></li></ul><h3 id="종종-쓰는-깃-명령어"><a href="#종종-쓰는-깃-명령어" class="headerlink" title="종종 쓰는 깃 명령어"></a>종종 쓰는 깃 명령어</h3><ul><li><p>브랜치 생성: <code>git branch 브랜치이름</code></p></li><li><p>브랜치 목록 보기: <code>git branch</code></p><blockquote><p>Master가 기본이며, Develop과 feature 등을 주로 추가하게 된다.</p></blockquote></li><li><p>다른 브랜치로 이동: <code>git checkout 브랜치이름</code></p></li></ul><p>이정도가 현재까지 내가 주로 사용하는 명령어들이다. 이 밖에도 팀 프로젝트를 할 때에는 <code>git flow</code>를 쓰기도 하는데, 이건 아직 제대로 숙지하지 못한 기능이라 이번 포스팅에서는 제외하도록 하겠다. 추후 제대로 숙달하거든 그때 보다 충실한 내용을 업로드 할 것을 약속한다. 물론, 주 용도는 내가 까먹었을 때 보기 위함이다.</p><p>그래도 일단, 여기까지 익혔다면, 손가락이 쉬지 않고 움직일 정도는 된다. 카페로 가자! 터미널에 각종 명령어를 연습하며 폭풍간지를 뽐내보자. 사실, 그리 생산적인 행동이라고는 할 수 없지만, 내 경험으로 봤을 때 상당히 기분이 좋아진다. 고양감이라고 해야할까? 코피 터지게 공부해서 간지나게 코딩까지 하고 싶다는 나름의 동기부여도 된다.<br>한 가지 주의사항이라면, 카페에 시니어 개발자가 있는지 확인해야 한다는 것이다. 이불킥은 싫으니까.</p><img src="https://images.unsplash.com/photo-1555100155-a7b708d9e19b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2250&q=80"><hr><h4 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h4><ul><li><a href="https://git-scm.com/book/ko/v2" target="_blank" rel="external nofollow noopener noreferrer">https://git-scm.com/book/ko/v2</a></li></ul><h4 id="이미지-출처"><a href="#이미지-출처" class="headerlink" title="이미지 출처"></a>이미지 출처</h4><ul><li><a href="https://unsplash.com/" target="_blank" rel="external nofollow noopener noreferrer">https://unsplash.com/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;깃-git-이란&quot;&gt;&lt;a href=&quot;#깃-git-이란&quot; class=&quot;headerlink&quot; title=&quot;깃(git)이란?&quot;&gt;&lt;/a&gt;깃(git)이란?&lt;/h2&gt;&lt;p&gt;위키백과에서 말하길, &lt;strong&gt;깃(git)은 프로그램 등의 소스 코드 관리
      
    
    </summary>
    
    
      <category term="tip" scheme="http://codeameba.github.io/categories/tip/"/>
    
    
      <category term="git" scheme="http://codeameba.github.io/tags/git/"/>
    
      <category term="github" scheme="http://codeameba.github.io/tags/github/"/>
    
      <category term="terminal" scheme="http://codeameba.github.io/tags/terminal/"/>
    
      <category term="터미널" scheme="http://codeameba.github.io/tags/%ED%84%B0%EB%AF%B8%EB%84%90/"/>
    
      <category term="커맨드" scheme="http://codeameba.github.io/tags/%EC%BB%A4%EB%A7%A8%EB%93%9C/"/>
    
      <category term="깃" scheme="http://codeameba.github.io/tags/%EA%B9%83/"/>
    
      <category term="깃헙" scheme="http://codeameba.github.io/tags/%EA%B9%83%ED%97%99/"/>
    
  </entry>
  
  <entry>
    <title>[TIL] DOM(Document Object Model)</title>
    <link href="http://codeameba.github.io/2020/05/30/programming/what-is-dom/"/>
    <id>http://codeameba.github.io/2020/05/30/programming/what-is-dom/</id>
    <published>2020-05-30T09:43:42.000Z</published>
    <updated>2020-05-30T09:45:56.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>Document Object Model의 약자로써 웹 브라우저가 읽어들인 HTML 파일을 해석하여 구조화 시킨 결과물이다. 그 형태가 나무와 같다 하여 DOM Tree라고도 부른다.</p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/DOM-model.svg/1920px-DOM-model.svg.png" alt="DOM tree"><p>이렇게 구조화된 DOM 내부에는 elements, nodes, property, method 등이 존재하며 JavaScript를 이용하여 <code>document</code>에 접근하여 HTML과 CSS 조작을 가능하게 하는 매개체라고 볼 수 있다.</p><h2 id="DOM-조작이-필수적인-시대"><a href="#DOM-조작이-필수적인-시대" class="headerlink" title="DOM 조작이 필수적인 시대"></a>DOM 조작이 필수적인 시대</h2><p>처음 World Wide Web이 등장했을 시기에는 기본적으로 정적페이지(HTML 문서)를 공유하고 이어주기 위한 목적이 전부였기 때문에 DOM과 같은 개념이 필요하지 않았다. 물론, DOM을 조작할 수 있는 JavaScript가 등장하게 된 것은 꽤 나중의 일이기도 하다.</p><p>어쨌든 지금의 웹은 그 당시와는 목적이나 기능이 상이하기 때문에 DOM 조작은 필수라고 할 수 있다. 유저의 액션에 따른 시각적 효과를 보인다거나 요청받은 데이터를 HTML과 CSS로 재구성 한다던가 하는 등의 일이 대부분인 시대다.</p><h2 id="document-객체"><a href="#document-객체" class="headerlink" title="document 객체"></a>document 객체</h2><h3 id="접근법"><a href="#접근법" class="headerlink" title="접근법"></a>접근법</h3><p>DOM객체에 접근을 할 때에는 기본적으로 DOM 트리 최상단에 위치한 <code>document</code>를 통해 접근한다. 아래와 같은 방식이다.</p><img src="/images/document01.png"><p>위의 경우에는 마치 배열 요소에 접근하듯 <code>[0]</code>을 뒤에 붙였는데, 이는 문서에서 유일하게 존재하는 element가 아니기 때문이다. <code>id</code>처럼 유일한 element에 접근한다면 인덱스는 생략해도 된다.</p><h3 id="document는-Window의-프로퍼티"><a href="#document는-Window의-프로퍼티" class="headerlink" title="document는 Window의 프로퍼티"></a>document는 Window의 프로퍼티</h3><p>브라우저에서 조작 가능한 모든 것은 <code>window</code>에 속한다. 따라서 정석적으로는 <code>window.document</code>로 접근하는 것이 맞다. 그러나 모두가 그 사실을 안다는 가정 하에 <code>window</code>는 생략이 가능하다. 실제로 아래와 같이 <code>window</code>의 프로퍼티 목록을 보면 <code>document</code>가 존재하는 것을 알 수 있다.</p><img src="/images/document02.png"><p><strong>참고:</strong><br>    - <a href="https://developer.mozilla.org/ko/docs/Web/API/Document_Object_Model/%EC%86%8C%EA%B0%9C" target="_blank" rel="external nofollow noopener noreferrer">DOM 소개 - Web API | MDN</a><br>    - <a href="https://poiemaweb.com/js-browser" target="_blank" rel="external nofollow noopener noreferrer">Javascript Environment | PoiemaWeb</a><br>    - <a href="https://d2.naver.com/helloworld/59361" target="_blank" rel="external nofollow noopener noreferrer">NAVER D2</a><br>    - <a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=ko" target="_blank" rel="external nofollow noopener noreferrer">렌더링 트리 생성, 레이아웃 및 페인트  |  Web  |  Google Developers</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DOM&quot;&gt;&lt;a href=&quot;#DOM&quot; class=&quot;headerlink&quot; title=&quot;DOM&quot;&gt;&lt;/a&gt;DOM&lt;/h2&gt;&lt;p&gt;Document Object Model의 약자로써 웹 브라우저가 읽어들인 HTML 파일을 해석하여 구조화 시킨 결과물이
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="DOM" scheme="http://codeameba.github.io/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>[TIL] 더욱 친해져야만 하는 개발자도구 Network</title>
    <link href="http://codeameba.github.io/2020/05/29/programming/developer-tool-network/"/>
    <id>http://codeameba.github.io/2020/05/29/programming/developer-tool-network/</id>
    <published>2020-05-29T07:12:42.000Z</published>
    <updated>2020-05-29T07:13:40.529Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Network-tab"><a href="#Network-tab" class="headerlink" title="Network tab"></a>Network tab</h2><ul><li>HTTP 통신 과정을 볼 수 있음</li><li>브라우저와 서버 간의 통신에서 발생하는 문제점을 파악할 수 있음</li><li>클라이언트 성능 개선 지점을 분석할 수 있음<ul><li>ex) 그래프를 통해 소요시간이 많은 파일 확인</li></ul></li><li>렌더링 되는 과정을 시각적으로 확인 가능</li></ul><h2 id="Status-code"><a href="#Status-code" class="headerlink" title="Status code"></a>Status code</h2><ul><li>1XX -&gt; 조건부 응답</li><li>2XX -&gt; 성공(정상)</li><li>3XX -&gt; 리다이렉션 완료</li><li>4XX -&gt; 요청 오류(프론트엔드 문제)</li><li>5XX -&gt; 서버 오류(백엔드 문제)</li><li><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Status" target="_blank" rel="external nofollow noopener noreferrer">HTTP 상태 코드 - HTTP | MDN</a></li></ul><h2 id="XHR"><a href="#XHR" class="headerlink" title="XHR"></a>XHR</h2><ul><li>XMLHttpRequest의 줄임말</li><li>서버와 통신하여 받아오는 데이터만 필터링하여 볼 수 있음</li><li>network - filter - XHR에서는 endpoint 리스트가 표시됨</li><li>API(Application Programming Interface)도 이곳에 있음.<ul><li>일반적으로 JSON 형태</li><li><a href="https://api.kurly.com/v2/categories?ver=1" target="_blank" rel="external nofollow noopener noreferrer">https://api.kurly.com/v2/categories?ver=1</a></li></ul></li><li><strong>API</strong>(Application Programming Interface, 응용 프로그램 프로그래밍 인터페이스)는  응용 프로그램에서 사용할 수 있도록,  운영 체제나  프로그래밍 언어가 제공하는 기능을 제어할 수 있게 만든  인터페이스를 뜻한다. 주로 파일 제어, 창 제어, 화상 처리, 문자 제어 등을 위한 인터페이스를 제공한다.</li></ul><h2 id="Endpoint"><a href="#Endpoint" class="headerlink" title="Endpoint"></a>Endpoint</h2><ul><li><a href="https://stackoverflow.com/questions/2122604/what-is-an-endpoint" target="_blank" rel="external nofollow noopener noreferrer">api - What is an Endpoint? - Stack Overflow</a></li><li>API를 요청하는 URI의 끝에 붙이는 것으로 이를 통해 서버측에서 해당 API에 대한 접근 권한 유무 등을 확인하고, 요청한 API를 보내주게 된다.</li><li><code>https://api.kurly.com/v2/categories?ver=1</code></li><li>위의 마켓컬리 API에서 <code>categories?ver=1</code>가 endpoint</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Network-tab&quot;&gt;&lt;a href=&quot;#Network-tab&quot; class=&quot;headerlink&quot; title=&quot;Network tab&quot;&gt;&lt;/a&gt;Network tab&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;HTTP 통신 과정을 볼 수 있음&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="Javascript" scheme="http://codeameba.github.io/tags/Javascript/"/>
    
      <category term="개발자도구" scheme="http://codeameba.github.io/tags/%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%8F%84%EA%B5%AC/"/>
    
  </entry>
  
  <entry>
    <title>[TIL] 로컬 스토리지(Local Storage)와 세션 스토리지(Session Storage)</title>
    <link href="http://codeameba.github.io/2020/05/28/programming/localstorage/"/>
    <id>http://codeameba.github.io/2020/05/28/programming/localstorage/</id>
    <published>2020-05-28T04:34:42.000Z</published>
    <updated>2020-05-28T04:34:37.711Z</updated>
    
    <content type="html"><![CDATA[<p>개발자 도구의 Application 탭을 보면, Storage 그룹에서 로컬 스토리지, 세션 스토리지를 확인할 수 있다. 이번 포스팅을 통해 각각의 기능과 차이점을 정리한다.</p><h2 id="로컬-스토리지-Local-Storage-와-세션-스토리지-Session-Storage"><a href="#로컬-스토리지-Local-Storage-와-세션-스토리지-Session-Storage" class="headerlink" title="로컬 스토리지(Local Storage)와 세션 스토리지(Session Storage)"></a>로컬 스토리지(Local Storage)와 세션 스토리지(Session Storage)</h2><p>로컬 스토리지와 세션 스토리지는 HTML5에서 추가된 저장소로써, <code>key : value</code> 형태의 데이터를 담고 있다.</p><p>이 둘의 차이점 <strong>영구성</strong> 에 있다. 로컬 스토리지에 저장된 데이터는 사용자가 직접적으로 삭제하지 않는 이상 영구적인 보관이 가능하지만, 세션 스토리지는 브라우저의 창을 닫으면 삭제된다.</p><p>여러모로 유용하게 사용할 수 있지만, 클라이언트에 저장되는 만큼 개인정보와 같이 보안이 필요한 데이터를 저장하기에는 적절치 않다.</p><p>로컬 스토리지는 <code>window</code> 객체에 포함되어있으며, 로컬 스토리지와 세션 스토리지는 동일한 메소드를 갖는다.</p><p>데이터를 저장할 때에는 <code>setItem()</code>, 불러올 때에는 <code>getItem()</code> 사용법은 아래와 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">localStorage.setItem(<span class="string">'name'</span>, <span class="string">'codeAmeba'</span>);</span><br><span class="line">localStorage.getItem(<span class="string">'name'</span>); <span class="comment">// "codeAmeba"</span></span><br><span class="line"></span><br><span class="line">localStorage.setItem(<span class="string">'currentYear'</span>, <span class="number">2020</span>);</span><br><span class="line">localStorage.getItem(<span class="string">'currentYear'</span>); <span class="string">"2020"</span></span><br></pre></td></tr></table></figure><p>위와 같이 첫 번째 인자로 <strong>key</strong>, 두 번째 인자로 <strong>value</strong>를 전달하면 로컬 스토리지에 저장이 되며, 불러올 때에는 key만 넣는다. 그리고, 어떤 데이터타입을 넣더라도 문자열로 저장된다.</p><p>이외에도 특정 데이터를 삭제하는 <code>removeItem()</code>, 전체 데이터를 삭제하는 <code>clear()</code>가 있다.</p><p>만약, value에 객체를 넣어야 할 때에는 <code>JSON.stringify()</code>메서드를 활용하여 문자열로 변환 후 저장해야 한다. 그렇지 않으면 객체를 통째로 넣을 수가 없다. 그리고, 그렇게 저장된 데이터를 꺼내올 때에도 역시 <code>JSON.parse()</code>를 통해 객체로 변환해야 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">localStorage.setItem(<span class="string">'robot'</span>, <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">name</span>: <span class="string">'coderoid'</span>, <span class="attr">serialNumber</span>: <span class="number">1542</span>, <span class="attr">author</span>: <span class="string">'Sooyoung Jeong'</span>&#125;));</span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">'robot'</span>));</span><br><span class="line"><span class="comment">// &#123;name: "coderoid", serialNumber: 1542, author: "Sooyoung Jeong"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 꺼내올 때 JSON.parse를 하지 않으면 문자열로 나온다.</span></span><br><span class="line">localStorage.getItem(<span class="string">'robot'</span>);</span><br><span class="line"><span class="comment">// "&#123;"name":"coderoid","serialNumber":1542,"author":"Sooyoung Jeong"&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON으로 변환하지 않으면 아래와 같이 된다.</span></span><br><span class="line">localStorage.setItem(<span class="string">'obj'</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;);</span><br><span class="line">localStorage.getItem(<span class="string">'obj'</span>); <span class="comment">// "[object Object]"</span></span><br></pre></td></tr></table></figure><p><strong>참고:</strong><br>    - <a href="https://www.zerocho.com/category/HTML&DOM/post/5918515b1ed39f00182d3048" target="_blank" rel="external nofollow noopener noreferrer">(HTML&amp;DOM) 로컬스토리지, 세션스토리지 - 그리고 쿠키 - ZeroCho Blog</a><br>    - <a href="https://www.quora.com/What-is-the-difference-between-sessionstorage-localstorage-and-Cookies" target="_blank" rel="external nofollow noopener noreferrer">What is the difference between sessionstorage, localstorage and Cookies? - Quora</a><br>    - <a href="https://stackoverflow.com/questions/3220660/local-storage-vs-cookies/3220802#3220802" target="_blank" rel="external nofollow noopener noreferrer">html - Local Storage vs Cookies - Stack Overflow</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;개발자 도구의 Application 탭을 보면, Storage 그룹에서 로컬 스토리지, 세션 스토리지를 확인할 수 있다. 이번 포스팅을 통해 각각의 기능과 차이점을 정리한다.&lt;/p&gt;
&lt;h2 id=&quot;로컬-스토리지-Local-Storage-와-세션-
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="Javascript" scheme="http://codeameba.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>[TIL] CSS 레이아웃의 기본 display, position, float</title>
    <link href="http://codeameba.github.io/2020/05/26/programming/css-layout-properties/"/>
    <id>http://codeameba.github.io/2020/05/26/programming/css-layout-properties/</id>
    <published>2020-05-26T04:55:00.000Z</published>
    <updated>2020-05-26T05:03:07.693Z</updated>
    
    <content type="html"><![CDATA[<h2 id="웹-페이지의-레이아웃-layout"><a href="#웹-페이지의-레이아웃-layout" class="headerlink" title="웹 페이지의 레이아웃(layout)"></a>웹 페이지의 레이아웃(layout)</h2><p>웹 페이지의 레이아웃을 구성하는데 유용한 CSS의 프로퍼티에는 크게 <code>display</code>, <code>position</code>, <code>float</code>가 있으며, 이 세 가지 프로퍼티를 활용함에 있어서는 기본적으로 <strong>박스모델</strong> 에 대한 이해가 필요하다.</p><p><a href="https://codeameba.github.io/2020/05/25/programming/css-box-model/" target="_blank">박스모델 바로가기</a></p><h2 id="display"><a href="#display" class="headerlink" title="display"></a>display</h2><p><code>display</code>는 해당 요소를 블록(block)과 인라인(inline) 둘 중 어떤 방식으로 자리를 차지하게 할지 정하는 프로퍼티다. 이를 통해 <code>&lt;div&gt;</code>, <code>&lt;p&gt;</code> 등의 블록 요소를 인라인으로 바꿀 수도 있고, <code>&lt;span&gt;</code>고 같은 인라인 요소를 블록으로 바꿀 수도 있다. 그 외에도 <code>flow</code>, <code>flex</code>, <code>grid</code>처럼 반응형 웹에 적절하게 사용 가능한 속성도 있다.</p><h3 id="block"><a href="#block" class="headerlink" title="block"></a>block</h3><p>블록 요소는 가장 기본적인 형태로써 <code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;form&gt;</code> 등이 있으며, 해당 요소가 위치한 가로줄을 모두 차지한다는 특징이 있다.</p><h3 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h3><p>블록과 함께 가장 기본적인 형태인 인라인은 대표적으로 <code>&lt;span&gt;</code>, <code>&lt;a&gt;</code> 태그가 있다. 인라인 요소는 태그에 포함된 내용 만큼의 자리만 차지하는 것이 특징이다. 별도의 <code>width</code>, <code>height</code>를 지정하더라도 적용되지 않는다.</p><h3 id="inline-block"><a href="#inline-block" class="headerlink" title="inline-block"></a>inline-block</h3><p>블록과 인라인의 장점을 하나로 합친 듯한 프로퍼티로써 일정한 사이즈를 유지하는 동시에 줄 바꿈은 원치 않을 때 사용할 수 있다. <code>inline-block</code>을 기본값을 갖는 대표적인 태그로는 <code>&lt;button&gt;</code>이 있다.</p><h3 id="none"><a href="#none" class="headerlink" title="none"></a>none</h3><p>말 그대로 화면에서 해당 요소를 보이지 않게 만든다. 자칫  <code>visibility: hidden</code>과 혼동할 수 있으나,  <code>visibility: hidden</code>은 요소를 보이지만 않게 만들고 자리는 여전히 차지하는 반면에 <code>display: none</code>으로 설정하면 보이지도 않고, 자리도 차지하지 않는다.</p><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p>화면의 비율을 기준으로 레이아웃을 구성할 수 있는 속성이다. 반응형 웹 제작에 유용하며, 과거와 달리 이제는 98.65%(<a href="https://caniuse.com/#search=flex" target="_blank" rel="external nofollow noopener noreferrer">Can I use… Support tables for HTML5, CSS3, etc</a>)의 브라우저 호환성을 지녔기에 충분히 사용 가능하다고 본다.</p><p><strong>flex 연습 사이트</strong> -&gt; <a href="https://flexboxfroggy.com/#ko" target="_blank" rel="external nofollow noopener noreferrer">Flexbox Froggy - A game for learning CSS flexbox</a></p><p><strong>예시</strong><br><a href="https://codeameba.github.io/front-end-practice/layout-practice/display.html" target="_blank">display 예시 바로가기</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">      box-sizing: border-box;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.block</span>&#123;</span></span><br><span class="line">      background-color: blue;</span><br><span class="line">      width: 150px;</span><br><span class="line">      height: 150px;</span><br><span class="line">      margin: 10px auto;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.inline</span> &#123;</span></span><br><span class="line">      background-color: green;</span><br><span class="line">      margin: 10px;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.inline-block</span> &#123;</span></span><br><span class="line">      display: inline-block;</span><br><span class="line">      background-color: red;</span><br><span class="line">      width: 150px;</span><br><span class="line">      height: 150px;</span><br><span class="line">      margin: 10px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.flex</span> &#123;</span></span><br><span class="line">      display: flex;</span><br><span class="line">      justify-content: center;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.flex</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line">      background-color: yellow;</span><br><span class="line">      width: 150px;</span><br><span class="line">      height: 150px;</span><br><span class="line">      margin: 10px;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span>I am block<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"inline"</span>&gt;</span>I am inline<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inline-block"</span>&gt;</span>I am inline-block<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inline-block"</span>&gt;</span>I am inline-block<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flex"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>I am flex<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>I am flex<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>I am flex<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>참고:</strong><br>    - <a href="https://joshua1988.github.io/web-development/css/layout-basic/#display-%EC%86%8D%EC%84%B1" target="_blank" rel="external nofollow noopener noreferrer">CSS 레이아웃 기초 • Captain Pangyo</a><br>    - <a href="http://ko.learnlayout.com/display.html" target="_blank" rel="external nofollow noopener noreferrer">CSS - “display” 프로퍼티</a><br>    - <a href="https://poiemaweb.com/css3-display" target="_blank" rel="external nofollow noopener noreferrer">CSS3 Display | PoiemaWeb</a><br>    - <a href="https://poiemaweb.com/css3-flexbox" target="_blank" rel="external nofollow noopener noreferrer">CSS3 Flexbox Layout | PoiemaWeb</a><br>    - <a href="https://css-tricks.com/almanac/properties/d/display/" target="_blank" rel="external nofollow noopener noreferrer">display | CSS-Tricks</a></p><h2 id="position"><a href="#position" class="headerlink" title="position"></a>position</h2><p><code>position</code>는 해당 요소가 페이지에서 어떻게 위치할지 지정하는 프로퍼티로써 설정할 수 있는 속성에는 다섯 가지가 있다.</p><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p><code>static</code> 은 기본값으로, 별도의 <code>position</code>을 지정하지 않은 요소는 모두 <code>static</code>이라고 볼 수 있다.</p><h3 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h3><p><code>relative</code>는 기본적으로 <code>static</code>과 동일하지만, <code>top</code>, <code>left</code>, <code>bottom</code>, <code>right</code> 값으로 위치를 조정할 수 있다는 점이 다르다. 그리고, 조정된 위치는 다음 요소의 위치에 영향을 주지 않는다.</p><h3 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h3><p>간혹 상단이나 측면 혹은 어딘가에 고정되어 스크롤을 내려도 계속 따라오는 요소를 발견할 때가 있는데, 이러한 요소들이 바로 <code>position: fixed</code>로 설정된 요소들이라고 할 수 있다.<br><code>fixed</code>는 뷰포트(viewport)에 대하여 상대적으로 위치가 고정되기 때문에 스크롤과 무관하게 같은 위치한다. <code>relative</code>와 마찬가지로 위치를 조정할 수 있다.</p><h3 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h3><p><code>absolute</code>는 <code>fixed</code>와 유사하게 지정한 위치에 고정할 수 있는 값이지만, 그 기준이 <code>position</code> 값을 지닌 가장 근접한 부모 요소라는 점에 다르다. 만약, 부모 요소 중에 <code>position</code> 값을 지닌 요소가 하나도 없다면, 문서(document body)를 기준으로 위치가 고정된다. 따라서 <code>absolute</code>를 사용하기 전에 반드시 기준으로 삼을 요소에 <code>position: relative</code>를 설정하자.</p><p><strong>예시</strong><br><a href="https://codeameba.github.io/front-end-practice/layout-practice/position.html" target="_blank">position 예시 바로가기</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">      box-sizing: border-box;</span><br><span class="line">    &#125;</span><br><span class="line">    div &#123;</span><br><span class="line">      margin: 10px;</span><br><span class="line">      width: 150px;</span><br><span class="line">      height: 150px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.static</span> &#123;</span></span><br><span class="line">      background-color: blue;</span><br><span class="line">      color: white;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.relative</span> &#123;</span></span><br><span class="line">      background-color: green;</span><br><span class="line">      position: relative;</span><br><span class="line">      left: 50%;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.fixed</span> &#123;</span></span><br><span class="line">      background-color: red;</span><br><span class="line">      position: fixed;</span><br><span class="line">      bottom: 0;</span><br><span class="line">      right: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.parent-of-absolute</span> &#123;</span></span><br><span class="line">      background-color: pink;</span><br><span class="line">      width: 500px;</span><br><span class="line">      height: 800px;</span><br><span class="line">      position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.absolute</span> &#123;</span></span><br><span class="line">      background-color: yellow;</span><br><span class="line">      position: absolute;</span><br><span class="line">      left: 0;</span><br><span class="line">      bottom: 50%;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static"</span>&gt;</span>I am static<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"relative"</span>&gt;</span>I am relative<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fixed"</span>&gt;</span>I am fixed<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent-of-absolute"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"absolute"</span>&gt;</span>I am absolute<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>참고:</strong><br>    - <a href="https://ko.learnlayout.com/position.html" target="_blank" rel="external nofollow noopener noreferrer">CSS - position</a><br>    - <a href="https://developer.mozilla.org/ko/docs/Web/CSS/position" target="_blank" rel="external nofollow noopener noreferrer">position - CSS: Cascading Style Sheets | MDN</a><br>    - <a href="https://css-tricks.com/almanac/properties/p/position/" target="_blank" rel="external nofollow noopener noreferrer">position | CSS-Tricks</a></p><h2 id="float"><a href="#float" class="headerlink" title="float"></a>float</h2><p>신문 혹은 웹의 다양한 아티클을 읽다보면 이미지 주위를 텍스트가 감싸고 있는 형태를 쉽게 볼 수 있다. <code>float</code>는 이러한 형태의 레이아웃을 구성할 때 사용하기 좋은 프로퍼티다.</p><p><code>float: left</code>와 같은 형태로 값을 지정하며, 설정 가능한 값으로는 <code>left</code>, <code>right</code>, <code>none</code>, <code>inherit</code>이 있다.</p><p><code>float</code>를 쓰면, 이름 그대로 <strong>부유 하듯이</strong> 다음 요소의 위로 붕 뜨게 된다. 그러나 <code>float</code>를 사용한 요소의 다음 요소의 크기가 더 작을 경우 <code>float</code>가 적용된 요소 뒤에 가려져 안 보이는 문제가 있다. 이럴 때에는 <code>clear</code> 프로퍼티를 사용하여 문제를 해결할 수가 있다.</p><p><strong>예시</strong><br><a href="https://codeameba.github.io/front-end-practice/layout-practice/float.html" target="_blank">float 예시 바로가기</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    h2 &#123;</span><br><span class="line">      display: inline;</span><br><span class="line">      border-bottom: 3px solid black;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    img &#123;</span><br><span class="line">      width: 200px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">   <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">      margin: 50px auto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.first-article</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">      float: left;</span><br><span class="line">      margin: 5px 10px 5px 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.second-article</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">      float: right;</span><br><span class="line">      margin: 5px 0 10px 10px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">      background-color: blue;</span><br><span class="line">      width: 100px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      color: white;</span><br><span class="line">      float: left;</span><br><span class="line"><span class="css">      <span class="selector-tag">opacity</span>: 0<span class="selector-class">.5</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    section &#123;</span><br><span class="line">      background-color: green;</span><br><span class="line">      height: 50px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.clearfix</span> &#123;</span></span><br><span class="line">      clear: both;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.header</span> &#123;</span></span><br><span class="line">      background-color: yellow;</span><br><span class="line">      height: 50px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">      background-color: green;</span><br><span class="line">      height: 150px;</span><br><span class="line">      width: 70%;</span><br><span class="line">      float: left;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.nav</span> &#123;</span></span><br><span class="line">      background-color: red;</span><br><span class="line">      height: 150px;</span><br><span class="line">      width: 30%;</span><br><span class="line">      float: right;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line">      background-color: blue;</span><br><span class="line">      height: 50px;</span><br><span class="line">      color: white;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Normal float<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"first-article"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fopenmatt.org%2Fwp-content%2Fuploads%2F2015%2F11%2Foctocat_kenobi.jpg&amp;f=1&amp;nofb=1"</span> <span class="attr">alt</span>=<span class="string">"octocat magician"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        Etiam porta sem malesuada magna mollis euismod. Maecenas faucibus mollis interdum. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Donec ullamcorper nulla non metus auctor fringilla. Donec id elit non mi porta gravida at eget metus.</span><br><span class="line">        Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nulla vitae elit libero, a pharetra augue. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Maecenas sed diam eget risus varius blandit sit amet non magna. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.</span><br><span class="line">        Donec id elit non mi porta gravida at eget metus. Curabitur blandit tempus porttitor. Donec ullamcorper nulla non metus auctor fringilla. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"second-article"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fxaharts.org%2Ffunny%2Fi%2Fgitopuss%2Fgithub-octocat_yes-we-code.jpg&amp;f=1&amp;nofb=1"</span> <span class="attr">alt</span>=<span class="string">"octocat propaganda"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras mattis consectetur purus sit amet fermentum. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Sed posuere consectetur est at lobortis.</span><br><span class="line">        Maecenas faucibus mollis interdum. Maecenas faucibus mollis interdum. Sed posuere consectetur est at lobortis. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.</span><br><span class="line">        Maecenas sed diam eget risus varius blandit sit amet non magna. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Float with clear<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>I am float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span>I am not clear<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>I am float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span>I am clear<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>for example<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>I am header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>I am main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span>I am nav<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer clearfix"</span>&gt;</span>I am footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>참고:</strong><br>    - <a href="https://ko.learnlayout.com/float.html" target="_blank" rel="external nofollow noopener noreferrer">CSS - float</a><br>    - <a href="https://css-tricks.com/almanac/properties/f/float/" target="_blank" rel="external nofollow noopener noreferrer">float | CSS-Tricks</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;웹-페이지의-레이아웃-layout&quot;&gt;&lt;a href=&quot;#웹-페이지의-레이아웃-layout&quot; class=&quot;headerlink&quot; title=&quot;웹 페이지의 레이아웃(layout)&quot;&gt;&lt;/a&gt;웹 페이지의 레이아웃(layout)&lt;/h2&gt;&lt;p&gt;웹 페이
      
    
    </summary>
    
    
      <category term="CSS" scheme="http://codeameba.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://codeameba.github.io/tags/CSS/"/>
    
      <category term="레이아웃" scheme="http://codeameba.github.io/tags/%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83/"/>
    
      <category term="layout" scheme="http://codeameba.github.io/tags/layout/"/>
    
      <category term="display" scheme="http://codeameba.github.io/tags/display/"/>
    
      <category term="position" scheme="http://codeameba.github.io/tags/position/"/>
    
      <category term="float" scheme="http://codeameba.github.io/tags/float/"/>
    
  </entry>
  
  <entry>
    <title>[TIL] CSS 박스 모델(Box Model)을 알아보자</title>
    <link href="http://codeameba.github.io/2020/05/25/programming/css-box-model/"/>
    <id>http://codeameba.github.io/2020/05/25/programming/css-box-model/</id>
    <published>2020-05-25T09:15:00.000Z</published>
    <updated>2020-05-25T09:16:30.190Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS의-기본이자-핵심은-BOX"><a href="#CSS의-기본이자-핵심은-BOX" class="headerlink" title="CSS의 기본이자 핵심은 BOX"></a>CSS의 기본이자 핵심은 BOX</h2><p>CSS에서 가장 기본적이자 가장 중요한 개념은 단연 <strong>박스 모델(Box model)</strong>이라고 할 수 있겠다. 이것을 모르면 절대 웹 페이지의 레이아웃을 구성할 수가 없다. 박스 모델은 아래의 그림과 같다.</p><img src="/images/css-box-model.jpg"><p>Content는 내용, Padding은 안쪽 여백, Border는 테두리, Margin은 바깥 여백을 말한다. 이것들이 웹 페이지의 레이아웃을 정하는 가장 기본적인 요소들이라고 할 수 있다. </p><img src="/images/box-model-screenshot.jpg"><p>아무 웹 페이지에서라도 개발자 도구를 실행 시키면 쉽게 확인할 수 있는데, 이를 통해 웹 페이지를 구성하는 모든 것이 결국 박스의 집합이라는 사실을 알 수 있다.</p><blockquote><p><strong>개발자 도구 실행 단축키</strong></p><ul><li>윈도우: F12</li><li>맥: option + command + i</li></ul></blockquote><h2 id="BOX를-다루는-법"><a href="#BOX를-다루는-법" class="headerlink" title="BOX를 다루는 법"></a>BOX를 다루는 법</h2><p>박스를 이루는 각각의 요소(padding, border, margin)는 크기 임의로 조정할 수 있다. CSS의 문법을 따르며 다음과 같이 작성한다. 물론, 기본적으로 HTML 문서에 종속(Cascade)되어 있기 때문에, HTML 문서 내의 <code>&lt;style&gt;&lt;/style&gt;</code> 태그 사이에 작성하거나 별도의 CSS 파일을 만들어 HTML 파일에 링크를 해야 한다. 링크된 HTML 문서에 <code>&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</code>가 있다는 가정 하에 다음과 같이 padding과 border에 값을 지정해보겠다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: deeppink;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그러면, 다음과 같은 형태의 박스를 확인할 수 있다. 가로, 세로 값을 지정하지 않았기 때문에 <code>&lt;div&gt;</code>의 기본값인 block이 적용되어 화면 전체를 차지하며, 기본 margin이 적용되어 가장자리에 여백이 있는 것을 확인할 수 있다.</p><img src="/images/class-box-02.jpg"><p>마찬가지로 margin에도 임의의 값을 지정할 수 있으며, 기본으로 주어진 8px의 margin을 제거할 수도 있다.</p><h2 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h2><img src="/images/box-sizing.jpg"><p>위의 BOX 01과 BOX 02의 사이즈는 같은가 다른가? 놀랍게도 같은 크기다. 좀 더 자세히 말하자면, 눈에 보이는 사이즈는 다르지만, 실제 적용된 너비와 높이는 동일하다. 코드는 아래와 같다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">        width: 300px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        margin: 30px auto;</span><br><span class="line">        padding: 15px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        font-size: 3rem;</span><br><span class="line">        font-weight: 800;</span><br><span class="line">        box-shadow: 3px 3px 15px gray;</span><br><span class="line">        border: 3px solid black;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box-01</span> &#123;</span></span><br><span class="line">        background: palevioletred;</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box-02</span> &#123;</span></span><br><span class="line">        background: paleturquoise;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>차이점을 발견했는가? 그렇다. BOX 01에는 <code>box-sizing: border-box;</code>가 적용되어 있다. 이것은 <strong>지정된 박스 크기(width, height)에 border와 padding이 포함된 형태</strong>로 나타나며, 위의 예시에서 볼 수 있듯이 두 박스가 모두 <code>padding: 15px</code>을 갖고 있지만 보여지는 크기가 다르다.</p><p>쉽게 이해하려면, border와 padding의 값은 적용되지 않는다고 생각하면 좋다. 하지만, ‘내부에 포함되었을 뿐, 사라진 것은 아니라는 점을 명심하자.’ 이러한 특성을 지닌 <code>border-box</code>를 사용하는 이유는 <strong>테두리(border나 여백(padding)에 상관 없이 예측 가능한 크기의 박스를 얻기 위함</strong>이다.</p><p><code>border-box</code> 외에도 다음과 같은 속성값이 존재한다.</p><ul><li><code>content-box</code>: 기본값</li><li><code>padding-box</code>: 박스의 크기(width, height)에 border와 margin을 제외한 padding까지만 포함한다.</li></ul><p>각각의 차이점을 쉽게 이해할 수 있는 예시를 들어보겠다. 아래와 같은 박스가 있다고 쳤을 때,</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: 300<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">height</span>: 300<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">border</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">black</span>;</span><br><span class="line"><span class="selector-tag">padding</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">margin</span>: 10<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p>각 <code>box-sizing</code>값에 따라 실제로 차지하는 영역은 다음과 같다.<br><strong>content-box(기본값)</strong>: width: 350px, height: 350px<br><strong>padding-box</strong>: width: 320px, height: 320px<br><strong>border-box</strong>: width: 330px, height: 330px</p><img src="https://images.unsplash.com/photo-1515378791036-0648a3ef77b2?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80"><p><strong>참고:</strong><br>    - <a href="https://developer.mozilla.org/ko/docs/Web/CSS/box-sizing" target="_blank" rel="external nofollow noopener noreferrer">box-sizing - CSS: Cascading Style Sheets | MDN</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSS의-기본이자-핵심은-BOX&quot;&gt;&lt;a href=&quot;#CSS의-기본이자-핵심은-BOX&quot; class=&quot;headerlink&quot; title=&quot;CSS의 기본이자 핵심은 BOX&quot;&gt;&lt;/a&gt;CSS의 기본이자 핵심은 BOX&lt;/h2&gt;&lt;p&gt;CSS에서 가장 기
      
    
    </summary>
    
    
      <category term="CSS" scheme="http://codeameba.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://codeameba.github.io/tags/CSS/"/>
    
      <category term="박스모델" scheme="http://codeameba.github.io/tags/%EB%B0%95%EC%8A%A4%EB%AA%A8%EB%8D%B8/"/>
    
      <category term="box model" scheme="http://codeameba.github.io/tags/box-model/"/>
    
  </entry>
  
  <entry>
    <title>[TIL] CSS의 상속(Inheritance)에 대해 알아보자</title>
    <link href="http://codeameba.github.io/2020/05/25/programming/css-inherit/"/>
    <id>http://codeameba.github.io/2020/05/25/programming/css-inherit/</id>
    <published>2020-05-25T08:15:42.000Z</published>
    <updated>2020-05-25T08:23:03.382Z</updated>
    
    <content type="html"><![CDATA[<h2 id="상속-Inheritance-이란"><a href="#상속-Inheritance-이란" class="headerlink" title="상속(Inheritance)이란?"></a>상속(Inheritance)이란?</h2><p>CSS에는 상속이라는 개념이 있다. 말 그대로 부모 요소(Element)의 속성값(Value)을 그대로 물려받는다는 의미인데, 모든 속성값에 상속이 적용되는 것은 아니기 때문에 처음 상속을 배웠을 때 다소 어렵게 느꼈던 기억이 있다.<br>‘백문이불여일견’이랬으니, 우선 아래의 코드와 결과를 확인해보자.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.first</span> &#123;</span></span><br><span class="line">            color: deeppink;</span><br><span class="line">            background-color: rgb(49, 49, 49);</span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 500px;</span><br><span class="line">            font-size: 2rem;</span><br><span class="line">            margin: 150px auto;</span><br><span class="line">            box-shadow: 3px 3px 10px gray;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"first"</span>&gt;</span></span><br><span class="line">        이것은 부모</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"second"</span>&gt;</span></span><br><span class="line">            이것은 자식</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/images/css-inherit-box.jpg"><p>코드에서 볼 수 있듯이 first의 하위 태그의 클래스가 second인데, CSS는 first에만 적용했음에도 second까지 변했다. 이것이 CSS의 상속을 단적으로 보여주는 예라고 할 수 있다.</p><p>물론 모든 속성이 상속 되지는 않는데, 이는 개발자도구를 실행해보면 아래와 같이 쉽게 확인할 수가 있다.</p><img src="/images/css-inherit.jpg"><p><code>Inherited form div.first</code>라고  명시된 곳을 보면 어떤 속성값들이 상속 되었는지 알 수가 있는데, 그 중에서도 활성화 되어있는 <code>color</code>와 <code>fort-size</code>가 second에 상속, 적용되었다.</p><p>이를 통해 우리가 깨달을 수 있는 것은, 상속이 되어야 편한 속성값들만 상속이 된다는 점이다. 결론적으로, <strong>상속이 있는 이유는 생산성을 높이기 위함</strong>이라고 이해할 수가 있다.  만약, 모든 속성값이 상속 된다면,</p><img src="/images/css-inherit-box2.jpg"><p>이러한 결과가 나왔을 것이다. CSS를 다뤄봤다면 잘 알 테지만, 상속된 속성값 중 필요 없는 것들을 제거 하는 일에 상당한 시간을 할애하게 될 것이다.</p><p><strong>모든 속성값 상속 후 필요 없는 속성값 제거 VS 필요한 속성값 추가</strong><br>둘 중 무엇이 더 효율적일지는 곰곰이 생각해보면 누구나 알 수 있을 것이다. 아래와 같이 상속 되지 않는 속성값은 따로 추가하면 되는 것이고, 이미 상속된 속성값 또한 자식 요소에 부여한 속성값이 더 우선 적용 되기 때문에 손쉽게 변경이 가능하다.</p><p>그리고, 상속이 되지 않는 속성을 강제로 상속 시키고 싶을 때에는, 아래의 코드에서 <code>margin</code>과 같이 속성값으로 <code>inherit</code>을 부여하면 상속이 된다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.first</span> &#123;</span></span><br><span class="line">            color: deeppink;</span><br><span class="line">            background-color: rgb(49, 49, 49);</span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 500px;</span><br><span class="line">            font-size: 2rem;</span><br><span class="line">            margin: 150px auto;</span><br><span class="line">            box-shadow: 3px 3px 10px gray;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.second</span> &#123;</span></span><br><span class="line">            color: lime;</span><br><span class="line">            background-color: brown;</span><br><span class="line">            margin: inherit;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"first"</span>&gt;</span></span><br><span class="line">        이것은 부모</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"second"</span>&gt;</span></span><br><span class="line">            이것은 자식</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/images/css-inherit-box3.jpg"><p>상속이 되는 속성값과, 되지 않는 속성값은 아래의 링크에서 자세히 확인할 수 있으니 참고하길 바란다.</p><p>링크 바로가기: <a href="https://www.w3.org/TR/CSS21/propidx.html" target="_blank" rel="external nofollow noopener noreferrer">Full property table</a></p><p><strong>참고:</strong></p><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/CSS/inheritance" target="_blank" rel="external nofollow noopener noreferrer">상속 - CSS: Cascading Style Sheets | MDN</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;상속-Inheritance-이란&quot;&gt;&lt;a href=&quot;#상속-Inheritance-이란&quot; class=&quot;headerlink&quot; title=&quot;상속(Inheritance)이란?&quot;&gt;&lt;/a&gt;상속(Inheritance)이란?&lt;/h2&gt;&lt;p&gt;CSS에는 상속
      
    
    </summary>
    
    
      <category term="CSS" scheme="http://codeameba.github.io/categories/CSS/"/>
    
    
      <category term="tip" scheme="http://codeameba.github.io/tags/tip/"/>
    
      <category term="css" scheme="http://codeameba.github.io/tags/css/"/>
    
      <category term="inherit" scheme="http://codeameba.github.io/tags/inherit/"/>
    
      <category term="상속" scheme="http://codeameba.github.io/tags/%EC%83%81%EC%86%8D/"/>
    
  </entry>
  
  <entry>
    <title>[TIL] 문자열 메소드의 활용</title>
    <link href="http://codeameba.github.io/2020/05/23/programming/string-method/"/>
    <id>http://codeameba.github.io/2020/05/23/programming/string-method/</id>
    <published>2020-05-23T10:12:42.000Z</published>
    <updated>2020-05-24T09:18:11.829Z</updated>
    
    <content type="html"><![CDATA[<p>String 메서드 중에는 정규표현식을 활용하면 보다 유용한 경우가 많다.</p><h2 id="search"><a href="#search" class="headerlink" title="search"></a>search</h2><p>인수로 전달한 정규표현식과 일치한 최초 문자열의 첫 번째 문자 위치를 반환하며, 일치하는 문자가 없으면 -1 반환한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> randomString = <span class="string">'Porta Tortor Mollis sit Condimentum Ligula'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(randomString.search(<span class="regexp">/sit/</span>)); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(randomString.search(<span class="regexp">/a/</span>)); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(randomString.search(<span class="regexp">/apple/</span>)); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h2 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h2><p>첫 번째 인수로 받은 문자열을 검색하여 두 번째 인수로 받은 문자열로 교체한다.<br><strong>원본 문자열을 수정하지 않음.</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> randomString = <span class="string">'Porta Tortor Mollis sit Condimentum Ligula'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(randomString.replace(<span class="regexp">/a/</span>, <span class="string">'b'</span>)); <span class="comment">// Portb Tortor Mollis sit Condimentum Ligula</span></span><br></pre></td></tr></table></figure><p><code>g</code> 플래그를 설정하지 않으면 첫 문자만 교체함. <code>replace</code> 두 번째 인수로 함수를 넘길 수도 있음.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> personalInfo = <span class="string">'Jane, jane@example.com, 010-1234-5678'</span>;</span><br><span class="line"><span class="keyword">let</span> result = personalInfo.replace(<span class="regexp">/0(\d&#123;1,4&#125;-\d&#123;1,4&#125;-\d&#123;4&#125;)/g</span>, <span class="string">'+82-$1'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// Jane, jane@example.com, +82-10-1234-5678</span></span><br></pre></td></tr></table></figure><h2 id="match"><a href="#match" class="headerlink" title="match"></a>match</h2><p>첫 번째 인수로 받은 문자열 또는 정규표현식과 일치하는 문자열을 순서대로 저장하여 배열로 반환하며, <strong>원본 문자열을 수정하지 않음.</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> randomString = <span class="string">'Porta Tortor Mollis sit Condimentum Ligula'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(randomString.match(<span class="regexp">/sit/g</span>)); <span class="comment">// ["sit"]</span></span><br></pre></td></tr></table></figure><p>각종 정보가 혼재된 문자열에서 원하는 정보만 배열에 저장하고 싶을 때 유용함</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="regexp">/((([A-Za-z]&#123;3,9&#125;:(?:\/\/)?)(?:[\-;:&amp;=\+\$,\w]+@)?[A-Za-z0-9\.\-]+|(?:www\.|[\-;:&amp;=\+\$,\w]+@)[A-Za-z0-9\.\-]+)((?:\/[\+~%\/\.\w\-_]*)?\??(?:[\-\+=&amp;;%@\.\w_]*)#?(?:[\.\!\/\\\w]*))?)/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> introduce = <span class="string">'안녕하세요. codeAmeba의 홈페이지는 http://www.codeameba.com/ 입니다.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(introduce.match(url)[<span class="number">0</span>]); <span class="comment">// http://www.codeameba.com/</span></span><br></pre></td></tr></table></figure><h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><p>첫 번째 인수를 기준으로 문자열을 나누어 배열에 담아 반환한다. 인수로 문자열, 정규표현식 등이 들어가며, 생략할 경우 원본 문자열 전체를 배열로 반환한다.<br><strong>원본 문자열을 수정하지 않음.</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> randomString = <span class="string">'Porta Tortor Mollis sit Condimentum Ligula'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(randomString.split(<span class="string">' '</span>));</span><br><span class="line"><span class="comment">// ["Porta", "Tortor", "Mollis", "sit", "Condimentum", "Ligula"]</span></span><br></pre></td></tr></table></figure><p><strong>참고:</strong></p><ul><li><a href="https://javascript.info/regexp-methods" target="_blank" rel="external nofollow noopener noreferrer">Methods of RegExp and String</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;String 메서드 중에는 정규표현식을 활용하면 보다 유용한 경우가 많다.&lt;/p&gt;
&lt;h2 id=&quot;search&quot;&gt;&lt;a href=&quot;#search&quot; class=&quot;headerlink&quot; title=&quot;search&quot;&gt;&lt;/a&gt;search&lt;/h2&gt;&lt;p&gt;인수로 전
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="Javascript" scheme="http://codeameba.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>저작권 연도를 자동으로 업데이트 하는 방법</title>
    <link href="http://codeameba.github.io/2020/05/22/programming/auto-copyright-update/"/>
    <id>http://codeameba.github.io/2020/05/22/programming/auto-copyright-update/</id>
    <published>2020-05-21T16:15:42.000Z</published>
    <updated>2020-05-22T08:52:15.800Z</updated>
    
    <content type="html"><![CDATA[<p>웹사이트를 돌아다니다 보면 하단의 저작권 표시가 지난 연도일 경우가 왕왕 있다. 대개 외주를 통해 웹사이트를 만들고 관리자가 직접 코드를 수정할 역량이 되지 않기에 벌어지는 일이라고 생각이 된다. 하지만, 개발자가 애초에 약간의 배려를 했다면 매년 자동으로 업데이트가 될 수 있었을 것이다.</p><p>아마 대부분 아래의 코드와 같이 저작권 표시가 들어갈 것이다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">“footer”</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"copyright"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;copy;</span> 2020 codeAmeba<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이렇게 되면 해가 지날 때마다 HTML 파일을 열어 수정을 해야 한다. 단지 연도만 고치면 되는데 말이다. 이 얼마나 수고스러운 일인가.</p><p>약간의 자바스크립트 코드만 덧붙이면 이 귀찮은 짓을 더 이상 하지 않아도 된다. 이때 이용하는 것은 당연하게도  <code>Date</code> 메서드다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">“footer”</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">“copyright”</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;copy;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">“year”</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> codeAmeba<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> yearEl = <span class="built_in">document</span>.querySelector(‘.year’);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> year = date.getFullYear();</span></span><br><span class="line">  yearEl.innerHTML = year;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이처럼 자바스크립트 코드 몇 줄만으로 배려할줄 아는 개발자가 되는 것이다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;웹사이트를 돌아다니다 보면 하단의 저작권 표시가 지난 연도일 경우가 왕왕 있다. 대개 외주를 통해 웹사이트를 만들고 관리자가 직접 코드를 수정할 역량이 되지 않기에 벌어지는 일이라고 생각이 된다. 하지만, 개발자가 애초에 약간의 배려를 했다면 매
      
    
    </summary>
    
    
      <category term="tip" scheme="http://codeameba.github.io/categories/tip/"/>
    
    
      <category term="copyright" scheme="http://codeameba.github.io/tags/copyright/"/>
    
      <category term="tip" scheme="http://codeameba.github.io/tags/tip/"/>
    
      <category term="저작권" scheme="http://codeameba.github.io/tags/%EC%A0%80%EC%9E%91%EA%B6%8C/"/>
    
  </entry>
  
  <entry>
    <title>[TIL] What is this?</title>
    <link href="http://codeameba.github.io/2020/05/20/programming/what-is-this/"/>
    <id>http://codeameba.github.io/2020/05/20/programming/what-is-this/</id>
    <published>2020-05-20T09:12:42.000Z</published>
    <updated>2020-05-22T08:54:35.156Z</updated>
    
    <content type="html"><![CDATA[<p><strong><code>this</code>는 호출하는 방식에 따라 달라지며, 크게 다섯 가지 경우로 나눌 수 있다.</strong></p><h2 id="1-전역에서-this는-언제나-window"><a href="#1-전역에서-this는-언제나-window" class="headerlink" title="1. 전역에서 this는 언제나 window"></a>1. 전역에서 this는 언제나 window</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// Window</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="2-일반-함수-호출은-언제나-window"><a href="#2-일반-함수-호출은-언제나-window" class="headerlink" title="2. 일반 함수 호출은 언제나 window"></a>2. 일반 함수 호출은 언제나 window</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">normalFunc1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">normalFunc1(); <span class="comment">// Window</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">normalFunc2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">innerFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  innerFunc();</span><br><span class="line">&#125;</span><br><span class="line">normalFunc2(); <span class="comment">// Window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 메소드 내부의 일반 함수에서도 window</span></span><br><span class="line"><span class="comment">// 그러나 화살표 함수는 자동으로 외부 환경에 바인딩 되어 외부 환경이 this로 나온다.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  method: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">innerFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    innerFunc();</span><br><span class="line">  &#125;,</span><br><span class="line">  secondMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> arrowFunc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    arrowFunc();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.method();  <span class="comment">// Window</span></span><br><span class="line">obj.secondMethod(); <span class="comment">// &#123;e: ƒ, g: ƒ&#125;</span></span><br></pre></td></tr></table></figure><h2 id="3-메소드-호출에서의-this는-점-앞에-있는-것-즉-메소드가-담긴-객체"><a href="#3-메소드-호출에서의-this는-점-앞에-있는-것-즉-메소드가-담긴-객체" class="headerlink" title="3. 메소드 호출에서의 this는 .(점) 앞에 있는 것. 즉, 메소드가 담긴 객체"></a>3. 메소드 호출에서의 this는 .(점) 앞에 있는 것. 즉, 메소드가 담긴 객체</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  prop: <span class="string">'Hello world'</span>,</span><br><span class="line">  method: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.prop);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.method(); <span class="comment">// Hello world</span></span><br></pre></td></tr></table></figure><p>그러나 메소드 내부함수의 경우는 또 얘기가 달라진다. 이때는 일반 함수에서의 this와 마찬가지로 전역을 가리킨다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prop = <span class="string">'This is window'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  prop: <span class="string">'Bye world'</span>,</span><br><span class="line">  method: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.prop);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">innerFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.prop);</span><br><span class="line">    &#125;</span><br><span class="line">    innerFunc();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.method(); <span class="comment">// Bye world</span></span><br><span class="line">              <span class="comment">// This is window</span></span><br></pre></td></tr></table></figure><p>위와 같은 문제에 대처하기 위한 방법으로 <strong>this를 변수에 할당하는 우회법</strong>이 있다.<br>그리고, 내부함수를 화살표 함수로 작성하면 외부환경인 메소드의 this를 그대로 바인딩한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  prop: <span class="string">'Nice to meet you world'</span>,</span><br><span class="line">  method: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// this를 that에 할당</span></span><br><span class="line">    <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">innerFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(that.prop);</span><br><span class="line">    &#125;</span><br><span class="line">    innerFunc();</span><br><span class="line">  &#125;,</span><br><span class="line">  secondMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> innerArrow = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.prop);</span><br><span class="line">    &#125;</span><br><span class="line">    innerArrow();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.method(); <span class="comment">// Nice to meet you world</span></span><br><span class="line">obj.secondMethod(); <span class="comment">// Nice to meet you world</span></span><br></pre></td></tr></table></figure><h2 id="4-콜백에서의-this는-기본적으로는-일반-함수처럼-전역을-가리킨다"><a href="#4-콜백에서의-this는-기본적으로는-일반-함수처럼-전역을-가리킨다" class="headerlink" title="4. 콜백에서의 this는 기본적으로는 일반 함수처럼 전역을 가리킨다"></a>4. 콜백에서의 this는 기본적으로는 일반 함수처럼 전역을 가리킨다</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  prop: <span class="string">'This is callback'</span>,</span><br><span class="line">  method: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.prop);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  secondMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.prop);</span><br><span class="line">    &#125;.bind(obj), <span class="number">1000</span>); <span class="comment">// &lt;- binding</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 화살표 함수로 작성하면 외부 환경에 바인딩</span></span><br><span class="line">obj.method(); <span class="comment">// This is callback</span></span><br><span class="line">obj.secondMethod(); <span class="comment">// This is callback</span></span><br></pre></td></tr></table></figure><p><strong>하지만, call, apply, bind 메서드를 통해 this를 명시적으로 바인딩 할 수 있다.</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>, x, y, z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">  c: <span class="string">'Hello'</span></span><br><span class="line">&#125;;</span><br><span class="line">a.call(b, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// &#123;c: "Hello"&#125; 1 2 3</span></span><br><span class="line">a.apply(b, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// &#123;c: "Hello"&#125; 1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = a.bind(b);</span><br><span class="line">c(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// &#123;c: "Hello"&#125; 1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = a.bind(b, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">d(<span class="number">3</span>); <span class="comment">// &#123;c: "Hello"&#125; 1 2 3</span></span><br></pre></td></tr></table></figure><h2 id="5-생성자-함수에서의-this는-instance"><a href="#5-생성자-함수에서의-this는-instance" class="headerlink" title="5. 생성자 함수에서의 this는 instance"></a>5. 생성자 함수에서의 this는 instance</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, species) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.species = species;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.whatIsThis = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Animal(<span class="string">'Max'</span>, <span class="string">'Dog'</span>);</span><br><span class="line">dog.whatIsThis(); <span class="comment">// Animal &#123;name: "Max", species: "Dog"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> Animal(<span class="string">'Alice'</span>, <span class="string">'Cat'</span>);</span><br><span class="line">cat.whatIsThis(); <span class="comment">// Animal &#123;name: "Alice", species: "Cat"&#125;</span></span><br></pre></td></tr></table></figure><p><strong>참고:</strong></p><ul><li><a href="https://poiemaweb.com/js-this" target="_blank" rel="external nofollow noopener noreferrer">this | PoiemaWeb</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="external nofollow noopener noreferrer">this - JavaScript | MDN</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="external nofollow noopener noreferrer">Function.prototype.call() - JavaScript | MDN</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="external nofollow noopener noreferrer">Function.prototype.apply() - JavaScript | MDN</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="external nofollow noopener noreferrer">Function.prototype.bind() - JavaScript | MDN</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;code&gt;this&lt;/code&gt;는 호출하는 방식에 따라 달라지며, 크게 다섯 가지 경우로 나눌 수 있다.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-전역에서-this는-언제나-window&quot;&gt;&lt;a href=&quot;#1-전역에서-this는-언
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="Javascript" scheme="http://codeameba.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>[TIL] 타입스크립트의 데이터 타입</title>
    <link href="http://codeameba.github.io/2020/05/18/programming/ts-data-type/"/>
    <id>http://codeameba.github.io/2020/05/18/programming/ts-data-type/</id>
    <published>2020-05-18T10:22:42.000Z</published>
    <updated>2020-05-18T10:33:28.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="타입을-명시하는-방법"><a href="#타입을-명시하는-방법" class="headerlink" title="타입을 명시하는 방법"></a>타입을 명시하는 방법</h2><p>TypeScript는 변수명 뒤에 타입을 명시한다. 명시한 타입과 다른 타입의 값을 할당하면 트랜스파일링 도중 오류가 발생한다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo: <span class="built_in">string</span> = <span class="string">'Hello world'</span>;</span><br><span class="line"><span class="keyword">let</span> bar: <span class="built_in">number</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> baz: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>함수의 경우, parameter와 return value에 대해 타입을 명시한다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> multiply = (x: <span class="built_in">number</span>, y: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> x * y;</span><br></pre></td></tr></table></figure><p>arguments에는 따로 타입을 명시하지는 않지만 parameter의 타입과 다른 타입을 전달할 경우 오류가 발생한다. 린트를 이용하면 리터럴 시점에 알 수 있다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(add(<span class="number">3</span>, <span class="string">'5'</span>)); <span class="comment">// error TS2345: Argument of type '"5"' is not assignable to parameter of type 'number'.</span></span><br></pre></td></tr></table></figure><h2 id="타입스크립트에만-존재하는-데이터-타입들"><a href="#타입스크립트에만-존재하는-데이터-타입들" class="headerlink" title="타입스크립트에만 존재하는 데이터 타입들"></a>타입스크립트에만 존재하는 데이터 타입들</h2><p>TypeScript는 JavaScript의 모든 데이터 타입을 사용할 수 있으며, 추가적으로 TypeScript 고유의 데이터 타입을 사용할 수도 있다.<br><strong>(ex: array, tuple, enum, any, void, never)</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// array : 요소의 타입까지 함께 명시</span></span><br><span class="line"><span class="keyword">let</span> arr1: <span class="built_in">any</span>[] = [<span class="number">1</span>, <span class="string">'two'</span>, <span class="literal">false</span>];</span><br><span class="line"><span class="keyword">let</span> arr2: <span class="built_in">number</span>[] = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">let</span> arr3: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// 제네릭 배열 타입</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// tuple : 요소의 개수와 순서를 미리 정해 놓고 배열을 표현</span></span><br><span class="line"><span class="keyword">let</span> tuple1: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">tuple1 = [<span class="string">'one'</span>, <span class="number">2</span>]; <span class="comment">// pass</span></span><br><span class="line">tuple1 = [<span class="number">1</span>, <span class="string">'two'</span>]; <span class="comment">// error</span></span><br><span class="line">tuple1 = [<span class="string">'one'</span>, <span class="number">2</span>, <span class="string">'three'</span>, <span class="number">4</span>]; <span class="comment">// error</span></span><br><span class="line">tuple1.push(<span class="literal">true</span>); <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// enum : 숫자값 집합에 이름을 지정한 것</span></span><br><span class="line"><span class="keyword">enum</span> Color1 &#123;Red, Green, Blue&#125;;</span><br><span class="line"><span class="keyword">let</span> c1: Color1 = Color1.Green;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 별도의 숫자를 지정하지 않으면 0부터 시작하는 인덱스가 순서대로 할당 됨</span></span><br><span class="line"><span class="built_in">console</span>.log(c1) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Color2 &#123;Red = <span class="number">1</span>, Green, Blue&#125;;</span><br><span class="line"><span class="keyword">let</span> c2: Color2 = Color2.Green;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 한 요소에 숫자를 할당하면 숫자가 할당된 요소를 기준으로 다른 요소의 숫자가 순서대로 할당 됨</span></span><br><span class="line"><span class="built_in">console</span>.log(c2); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Color3 &#123;Red = <span class="number">1</span>, Green = <span class="number">3</span>, Blue = <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> c3: Color3 = Color3.Green;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 각 요소에 숫자를 할당하면 해당 요소의 값이 됨</span></span><br><span class="line"><span class="built_in">console</span>.log(c3); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// any : 타입을 알 수 없거나 타입 체크가 필요 없는 변수에 사용함. 아무 타입에나 사용 가능.</span></span><br><span class="line"><span class="keyword">let</span> notSure: <span class="built_in">any</span> = <span class="number">5</span>;</span><br><span class="line">notSure = <span class="string">'Hello world'</span>;</span><br><span class="line">notSure = <span class="literal">true</span>; <span class="comment">// 어떤 타입으로 재할당을 해도 오류가 없음.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// void : 보통 함수에서 반환값이 없을 때 사용함.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noReturn</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello world'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// never : 결코 발생하지 않는 값</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">neverStop</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>참고:</strong></p><ul><li><a href="https://poiemaweb.com/typescript-typing" target="_blank" rel="external nofollow noopener noreferrer">poiemaweb</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;타입을-명시하는-방법&quot;&gt;&lt;a href=&quot;#타입을-명시하는-방법&quot; class=&quot;headerlink&quot; title=&quot;타입을 명시하는 방법&quot;&gt;&lt;/a&gt;타입을 명시하는 방법&lt;/h2&gt;&lt;p&gt;TypeScript는 변수명 뒤에 타입을 명시한다. 명시한 타
      
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://codeameba.github.io/categories/TypeScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="타입스크립트" scheme="http://codeameba.github.io/tags/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="TypeScript" scheme="http://codeameba.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>[TIL] 다양한 활용이 가능한 전개 연산자(spread operator)</title>
    <link href="http://codeameba.github.io/2020/05/17/programming/spread-operator/"/>
    <id>http://codeameba.github.io/2020/05/17/programming/spread-operator/</id>
    <published>2020-05-17T10:12:42.000Z</published>
    <updated>2020-05-17T10:22:11.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="…-spread-operator"><a href="#…-spread-operator" class="headerlink" title="…(spread operator)"></a>…(spread operator)</h2><p><code>...</code>(spread operator)는 이터러블한 객체를 반환하는 표현식 앞에 쓸 수 있으며, 이를 통해 이터러블 객체를 배열 또는 함수의 인수 목록으로 펼칠 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 이터러블 객체를 풀어줌</span></span><br><span class="line"><span class="built_in">console</span>.log(...<span class="string">'ABC'</span>); <span class="comment">// A B C</span></span><br><span class="line"><span class="built_in">console</span>.log(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]); <span class="comment">// 1 2 3 4</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, ...[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>]) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 인수를 전달할 때 풀어서 전달</span></span><br><span class="line"><span class="keyword">const</span> favorFruits = <span class="function">(<span class="params">fruit</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> myFavor = [];</span><br><span class="line">  myFavor.push(...fruit);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">console</span>.log(myFavor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fruits = [<span class="string">'apple'</span>, <span class="string">'grape'</span>, <span class="string">'melon'</span>, <span class="string">'cherry'</span>];</span><br><span class="line">favorFruits(fruits); <span class="comment">// ["apple", "grape", "melon", "cherry"]</span></span><br><span class="line">favorFruits(...fruits); <span class="comment">// ["a", "p", "p", "l", "e"]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...을 사용하여 concat 대신 push로 연결 가능</span></span><br><span class="line"><span class="keyword">const</span> newFruits = [<span class="string">'mango'</span>, <span class="string">'blueberry'</span>];</span><br><span class="line">fruits.push(...newFruits);</span><br><span class="line"><span class="built_in">console</span>.log(fruits); <span class="comment">// ["apple", "grape", "melon", "cherry", "mango", "blueberry"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열 내 최댓값 구하기</span></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">3</span>, <span class="number">12</span>, <span class="number">72</span>, <span class="number">35</span>, <span class="number">56</span>, <span class="number">5</span>, <span class="number">88</span>, <span class="number">2</span>, <span class="number">17</span>, <span class="number">29</span>, <span class="number">47</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(...nums)); <span class="comment">// 88</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;…-spread-operator&quot;&gt;&lt;a href=&quot;#…-spread-operator&quot; class=&quot;headerlink&quot; title=&quot;…(spread operator)&quot;&gt;&lt;/a&gt;…(spread operator)&lt;/h2&gt;&lt;p&gt;&lt;code&gt;..
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="Javascript" scheme="http://codeameba.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>[TIL] 인스턴스로 인스턴스 만들기</title>
    <link href="http://codeameba.github.io/2020/05/14/programming/make-instance-use-instance/"/>
    <id>http://codeameba.github.io/2020/05/14/programming/make-instance-use-instance/</id>
    <published>2020-05-14T11:12:42.000Z</published>
    <updated>2020-05-14T10:22:42.494Z</updated>
    
    <content type="html"><![CDATA[<h2 id="생성자-함수를-지닌-인스턴스"><a href="#생성자-함수를-지닌-인스턴스" class="headerlink" title="생성자 함수를 지닌 인스턴스"></a>생성자 함수를 지닌 인스턴스</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(first, last, age, gender, interests) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = &#123;</span><br><span class="line">      first: first,</span><br><span class="line">      last: last</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.gender = gender === <span class="string">'male'</span> ? <span class="string">'He'</span> : <span class="string">'She'</span>;</span><br><span class="line">    <span class="keyword">this</span>.interests = interests; </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  bio = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name.first&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.name.last&#125;</span> is <span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span> years old. <span class="subst">$&#123;<span class="keyword">this</span>.gender&#125;</span> likes <span class="subst">$&#123;<span class="keyword">this</span>.interests[<span class="number">0</span>]&#125;</span> and <span class="subst">$&#123;<span class="keyword">this</span>.interests[<span class="number">1</span>]&#125;</span>.`</span></span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">  greeting = <span class="function"><span class="keyword">function</span>(<span class="params">myName</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Hello I'm <span class="subst">$&#123;<span class="keyword">this</span>.name.first&#125;</span>. Nice to meet you <span class="subst">$&#123;myName&#125;</span>.`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> john = <span class="keyword">new</span> Person(<span class="string">'John'</span>, <span class="string">'Miles'</span>, <span class="number">32</span>, <span class="string">'male'</span>, [<span class="string">'coding'</span>, <span class="string">'reading'</span>]);</span><br><span class="line"><span class="keyword">const</span> Jane = <span class="keyword">new</span> Person(‘Jane<span class="string">', '</span>Carol<span class="string">', 29, '</span>female<span class="string">', ['</span>painting<span class="string">', '</span>watching movie<span class="string">']);</span></span><br></pre></td></tr></table></figure><p>위와 같은 <code>class</code>와 그것을 통해 생성된 인스턴스가 있을 때, <strong>부득이하게 생성자 함수를 예측할 수 없는 상황에서 새로운 인스턴스를 생성해야 하는 경우에 처했다고 가정한다.</strong></p><p>이럴 때에는 프로토타입 체인을 통해 인스턴스 내부에 구현되어 있는 생성자 함수 <code>constructor</code>를 쓰면 가능하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(jane.__proto__); <span class="comment">// &#123;constructor: ƒ&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(jane.constructor);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class Person &#123;</span></span><br><span class="line"><span class="comment">constructor(first, last, age, gender, interests) &#123;</span></span><br><span class="line"><span class="comment">this.name = &#123;</span></span><br><span class="line"><span class="comment">first: first,</span></span><br><span class="line"><span class="comment">last: last</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">this.age = age;</span></span><br><span class="line"><span class="comment">this.gender = gender === 'male' ? 'He' : 'She';</span></span><br><span class="line"><span class="comment">this.interests =…</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>인스턴스의 생성자 함수를 콘솔에서 확인해보면 위와 같이 슈퍼클래스의 생성자가 그대로 담겨있는 것을 볼 수 있다. 그리고, 이를 통해 일반적이지 않은 방법으로 새로운 인스턴스를 만들어낼 수 있다.</p><h2 id="인스턴스로-인스턴스-만들기"><a href="#인스턴스로-인스턴스-만들기" class="headerlink" title="인스턴스로 인스턴스 만들기"></a>인스턴스로 인스턴스 만들기</h2><p>인스턴스로 인스턴스를 만들기는 어렵지 않다. 아래와 같이 <code>new</code> 키워드와 <code>constructor()</code>를 통해 간단히 만들 수가 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sam = <span class="keyword">new</span> jane.constructor(‘Sam’, ‘Winchester<span class="string">', 25, '</span>male<span class="string">', ['</span>singing<span class="string">', '</span>running<span class="string">']);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">console.log(sam.name); // &#123;first: "Sam", last: "Winchester"&#125;</span></span><br><span class="line"><span class="string">console.log(sam.bio()); // Sam Winchester is 25 years old. He likes singing and running.</span></span><br><span class="line"><span class="string">console.log(sam.greeting(‘Jane’)); // Hello I'</span>m Sam. Nice to meet you Jane.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;생성자-함수를-지닌-인스턴스&quot;&gt;&lt;a href=&quot;#생성자-함수를-지닌-인스턴스&quot; class=&quot;headerlink&quot; title=&quot;생성자 함수를 지닌 인스턴스&quot;&gt;&lt;/a&gt;생성자 함수를 지닌 인스턴스&lt;/h2&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="Javascript" scheme="http://codeameba.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>[TIL] 모든 요소에 특정 작업을 수행하는 반복 메서드</title>
    <link href="http://codeameba.github.io/2020/05/11/programming/array-method-iteration/"/>
    <id>http://codeameba.github.io/2020/05/11/programming/array-method-iteration/</id>
    <published>2020-05-11T09:40:42.000Z</published>
    <updated>2020-05-13T18:03:13.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="반복-메서드"><a href="#반복-메서드" class="headerlink" title="반복 메서드"></a>반복 메서드</h2><p>배열 메서드는 크게 세 종류로 나눈다.</p><ul><li><strong>수정 메서드</strong> : 원본 배열을 수정함</li><li><strong>접근자 메서드</strong> : 배열에 접근하여 새로운 배열을 반환</li><li><strong>반복 메서드</strong> : 배열의 요소들을 순회하며 작업을 수행</li></ul><p>이번 시간에는 주요 <strong>반복 메서드</strong> 들을 살펴본다.</p><h2 id="반복-메서드의-공통-성질"><a href="#반복-메서드의-공통-성질" class="headerlink" title="반복 메서드의 공통 성질"></a>반복 메서드의 공통 성질</h2><ol><li>반복 메서드의 인수로 전달한 함수는 배열의 모든 요소들에 호출되어 적용되며, 희소 배열의 경우 비어있는 요소는 건너뜀</li><li>반복 메서드 대부분은 첫 번째 인수로 함수를 받으며, 이 함수에는 <strong>최대 세 개의 인수</strong> 를 전달할 수 있다. 첫 번째 인수만 전달하는 경우가 많으며, 각각의 인수는 다음과 같다.<ul><li>첫 번째 인수(value): 현재 처리하는 요소의 값</li><li>두 번째 인수(index): 현재 처리하는 요소의 인덱스</li><li>세 번째 인수(array): 메서드가 적용되는 배열의 참조</li></ul></li><li><code>reduce</code>와 <code>reduceRight</code>를 제외한 반복 메서드에는 두 번째 인수를 지정할 수 있다. 두 번째 인수는 첫 번째 인수로 받은 함수 안의 <code>this</code>값이며 생략 가능하다.</li></ol><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p><code>forEach()</code>는 인수로 받은 함수를 요소 하나 하나마다 실행한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [‘apple’, ‘banana’, ‘melon’, ‘peach’, ‘blueberry’];</span><br><span class="line"></span><br><span class="line">fruits.forEach(<span class="function">(<span class="params">fruit</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`I Love <span class="subst">$&#123;fruit&#125;</span>`</span>));</span><br><span class="line"><span class="comment">// I Love apple</span></span><br><span class="line"><span class="comment">// I Love banana</span></span><br><span class="line"><span class="comment">// I Love melon</span></span><br><span class="line"><span class="comment">// I Love peach</span></span><br><span class="line"><span class="comment">// I Love blueberry</span></span><br><span class="line"></span><br><span class="line">fruits.forEach(<span class="function">(<span class="params">fruit, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;fruit&#125;</span> is <span class="subst">$&#123;index + <span class="number">1</span>&#125;</span>th fruit.`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// apple is 1th fruit.</span></span><br><span class="line"><span class="comment">// banana is 2th fruit.</span></span><br><span class="line"><span class="comment">// melon is 3th fruit.</span></span><br><span class="line"><span class="comment">// peach is 4th fruit.</span></span><br><span class="line"><span class="comment">// blueberry is 5th fruit.</span></span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p><code>map()</code>은 인수로 받은 함수를 요소별로 한 번씩 실행하며, 함수가 반환한 값으로 새로운 배열을 생성한다. <code>map()</code>의 인수로 넘기는 함수는 반드시 값을 반환해야 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [‘apple’, ‘banana’, ‘melon’, ‘peach’, ‘blueberry’];</span><br><span class="line"><span class="keyword">const</span> myFruits = fruits.map(<span class="function">(<span class="params">fruit</span>) =&gt;</span> fruit.toUpperCase());</span><br><span class="line"><span class="built_in">console</span>.log(myFruits); </span><br><span class="line"><span class="comment">// [“APPLE”, “BANANA”, “MELON”, “PEACH”, “BLUEBERRY”]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>];</span><br><span class="line"><span class="keyword">const</span> sqrt = numbers.map(<span class="built_in">Math</span>.sqrt);</span><br><span class="line"><span class="built_in">console</span>.log(sqrt); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> persons = [</span><br><span class="line">  &#123;<span class="attr">name</span>: ‘Tom’, <span class="attr">age</span>: <span class="number">17</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: ‘James’, <span class="attr">age</span>: <span class="number">19</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: ‘Sam’, <span class="attr">age</span>: <span class="number">15</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> names = persons.map(<span class="function"><span class="params">person</span> =&gt;</span> person.name);</span><br><span class="line"><span class="keyword">const</span> ages = persons.map(<span class="function"><span class="params">person</span> =&gt;</span> person.age);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`names: <span class="subst">$&#123;names&#125;</span> / ages: <span class="subst">$&#123;ages&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// names: Tom,James,Sam / ages: 17,19,15</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(persons.map(<span class="function"><span class="params">person</span> =&gt;</span> person.name).map(<span class="function"><span class="params">name</span> =&gt;</span> name.length));</span><br><span class="line"><span class="comment">// [3, 5, 3]</span></span><br></pre></td></tr></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p><code>filter()</code>는 조건에 충족하는 요소만 걸러 새로운 배열로 반환한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [‘apple’, ‘banana’, ‘melon’, ‘peach’, ‘blueberry’];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> includeM = fruits.filter(<span class="function">(<span class="params">fruit</span>) =&gt;</span> fruit.includes(‘m’));</span><br><span class="line"><span class="built_in">console</span>.log(includeM); <span class="comment">// [“melon”]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> longerThan5Length = fruits.filter(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.length &gt; <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(longerThan5Length); <span class="comment">// [“banana”, “blueberry”]</span></span><br></pre></td></tr></table></figure><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p><code>reduce()</code>는 배열을 기반으로 하나의 값을 도출할 때 사용한다. reduce의 인수로 넘기는 함수의 첫 번째 인수는 <strong>accumulator(누산기)</strong> 라고 할 수 있으며, 함수의 결과가 누적되어 저장되고 마지막 함수까지 호출되면 이 값이 <code>reduce()</code>의 반환값이 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myNums = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> result = myNums.reduce(<span class="function">(<span class="params">sum, current</span>) =&gt;</span> sum + current, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 27</span></span><br></pre></td></tr></table></figure><p><code>reduce()</code>에 전달된 함수는 위와 같이 두 개의 인수를 받는 게 일반적이다.<br>위 코드의 실행 절차에 따른 <code>sum</code>과 <code>current</code>의 상태 변화는 다음과 같다.</p><ol><li><code>sum = 0</code> / <code>current = 1</code></li><li><code>sum = 0 + 1</code> / <code>current = 5</code></li><li><code>sum = 0 + 1 + 5</code> / <code>current = 3</code></li><li><code>sum = 0 + 1 + 5 + 3</code> / <code>current = 7</code></li><li><code>sum = 0 + 1 + 5 + 3 + 7</code> / <code>current = 9</code></li><li><code>sum = 0 + 1 + 5 + 3 + 7 + 9</code> / <code>current = 2</code></li><li><code>return sum = 0 + 1 + 5 + 3 + 7 + 9 + 2</code></li></ol><p>끝의 <code>0</code>은 <code>reduce()</code>의 마지막 인수로 초깃값을 뜻하며 <code>sum</code>에 할당된다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">let</span> newResult = arr.reduce(<span class="function">(<span class="params">sum, current</span>) =&gt;</span> sum + current);</span><br><span class="line"><span class="built_in">console</span>.log(newResult); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> emptyArr = [];</span><br><span class="line"><span class="keyword">let</span> newResult = emptyArr.reduce(<span class="function">(<span class="params">sum, current</span>) =&gt;</span> sum + current);</span><br><span class="line"><span class="built_in">console</span>.log(newResult); <span class="comment">// TypeError: Reduce of empty array with no initial value</span></span><br></pre></td></tr></table></figure><p>초깃값을 생략할 경우 배열의 첫 번째 요소를 초깃값으로 사용한다. 다만, 배열이 비었을 경우 초깃값으로 사용할 요소가 없기 때문에 <code>error</code>가 발생한다.</p><p>이러한 <code>reduce()</code>의 특성을 활용하면 꼭 요소들의 합 뿐만 아니라 다양한 방법으로 사용할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 모든 배열 요소의 곱</span></span><br><span class="line"><span class="built_in">console</span>.log(a.reduce(<span class="function">(<span class="params">pre, val</span>) =&gt;</span> pre * val)); <span class="comment">// 252</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열 요소 중 가장 큰 값</span></span><br><span class="line"><span class="built_in">console</span>.log(a.reduce(<span class="function">(<span class="params">pre, val</span>) =&gt;</span> pre &gt; val ? pre : val)); <span class="comment">// 7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> names = [<span class="string">'Tom'</span>, <span class="string">'Jane'</span>, <span class="string">'Sam'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 문자열 연결</span></span><br><span class="line"><span class="built_in">console</span>.log(names.reduce(<span class="function">(<span class="params">pre, val</span>) =&gt;</span> pre + <span class="string">' '</span> + val)); <span class="comment">// Tom Jane Sam</span></span><br></pre></td></tr></table></figure><h3 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight"></a>reduceRight</h3><p><code>reduce()</code>와 유사한 메서드로 <code>reduceRight()</code>가 있다. 원리와 사용법은 동일하며 배열의 오른쪽 요소부터 작업을 수행한다는 점이 다르다.</p><p><strong>참고:</strong></p><ul><li><a href="https://ko.javascript.info/array-methods" target="_blank" rel="external nofollow noopener noreferrer">배열과 메서드</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;반복-메서드&quot;&gt;&lt;a href=&quot;#반복-메서드&quot; class=&quot;headerlink&quot; title=&quot;반복 메서드&quot;&gt;&lt;/a&gt;반복 메서드&lt;/h2&gt;&lt;p&gt;배열 메서드는 크게 세 종류로 나눈다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;수정 메서드&lt;/str
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="Javascript" scheme="http://codeameba.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>[TIL] 새로운 배열을 반환하는 배열 메서드</title>
    <link href="http://codeameba.github.io/2020/05/09/programming/array-method-return-new-array/"/>
    <id>http://codeameba.github.io/2020/05/09/programming/array-method-return-new-array/</id>
    <published>2020-05-09T11:20:42.000Z</published>
    <updated>2020-05-13T18:03:17.448Z</updated>
    
    <content type="html"><![CDATA[<h2 id="접근자-메서드"><a href="#접근자-메서드" class="headerlink" title="접근자 메서드"></a>접근자 메서드</h2><p>배열 메서드는 크게 세 종류로 나눈다.</p><ul><li><strong>수정 메서드</strong> : 원본 배열을 수정함</li><li><strong>접근자 메서드</strong> : 배열에 접근하여 새로운 배열을 반환</li><li><strong>반복 메서드</strong> : 배열의 요소들을 순회하며 작업을 수행</li></ul><p>이번 시간에는 주요 <strong>접근자 메서드</strong> 들을 살펴본다.</p><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><p><code>join()</code>은 모든 요소를 문자열로 변환 후 인수로 받은 문자와 연결하여 반환한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [‘apple’, ‘banana’, ‘melon’, ‘peach’, ‘blueberry’];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fruits.join(‘-‘));</span><br><span class="line"><span class="comment">// apple-banana-melon-peach-blueberry</span></span><br></pre></td></tr></table></figure><h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2><p><code>concat()</code>은 인수로 받은 값을 배열에 추가하여 새로운 배열을 생성한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [‘apple’, ‘banana’, ‘melon’, ‘peach’, ‘blueberry’];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fruits.concat(‘cherry’, ‘grape’));</span><br><span class="line"><span class="comment">// ["apple", "banana", "melon", "peach", "blueberry", "cherry", "grape"]</span></span><br></pre></td></tr></table></figure><p>인수를 배열로 전달할 경우에는 자동으로 배열을 해체한 후 합친다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(fruits.concat([‘cherry’, ‘grape’]));</span><br><span class="line"><span class="comment">// ["apple", "banana", "melon", "peach", "blueberry", "cherry", "grape"]</span></span><br></pre></td></tr></table></figure><p>그러나, 가장 바깥의 배열만 자동으로 해체하기 때문에 중복된 배열은 배열 그대로 추가된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(fruits.concat([‘lemon’, [‘strawberry’, ‘watermelon’]]));</span><br><span class="line"><span class="comment">// ["apple", "banana", "melon", "peach", "blueberry", "lemon", [“strawberry”, “watermelon”]]</span></span><br></pre></td></tr></table></figure><h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><p><code>slice()</code>는 선택된 만큼의 요소를 새로운 배열로 반환한다. 두 개의 인수를 받으며, 첫 번째 인수는 <strong>시작 인덱스</strong> , 두 번째 인수는 <strong>끝 인덱스</strong> 다.</p><p><code>slice(시작, 끝)</code> : 시작 인덱스의 요소부터 끝 인덱스 바로 앞까지 새로운 배열로 반환한다. 두 번째 인수를 생략 가능하며 그럴 경우 시작 인덱스부터 모든 요소를 배열로 반환한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [‘apple’, ‘banana’, ‘melon’, ‘peach’, ‘blueberry’];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fruits.slice(<span class="number">1</span>, <span class="number">4</span>));</span><br><span class="line"><span class="comment">// ["banana", "melon", "peach"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fruits.slice(<span class="number">3</span>));</span><br><span class="line"><span class="comment">// ["peach", "blueberry"]</span></span><br></pre></td></tr></table></figure><h2 id="indexOf-lastIndexOf"><a href="#indexOf-lastIndexOf" class="headerlink" title="indexOf, lastIndexOf"></a>indexOf, lastIndexOf</h2><p><code>indexOf()</code>와 <code>lastIndexOf()</code>는 인수로 전달한 요소의 인덱스를 반환한다.<br><code>indexOf()</code>는 배열 왼쪽부터 검색하고, <code>lastIndexOf()</code>는 배열 오른쪽부터 검색하여 반환한다. 만약, 찾는 요소가 배열에 없을 때에는 <code>-1</code>을 반환한다.<br>두 번째 인수는 검색을 시작할 인덱스이며 생략 가능하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">9</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(numbers.indexOf(<span class="number">5</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(numbers.lastIndexOf(<span class="number">5</span>)); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h2 id="toString-toLocaleString"><a href="#toString-toLocaleString" class="headerlink" title="toString, toLocaleString"></a>toString, toLocaleString</h2><p><code>toString()</code>과 <code>toLocaleString()</code>은 배열의 요소를 문자열로 반환 후 쉼표로 연결하여 반환한다. 둘의 차이는 <code>toLocaleString()</code>의 경우 해당 지역에 맞는 문자열로 번역하여 반환한다는 점이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([‘Seoul’, ‘Republic <span class="keyword">of</span> Korea’, date].toString());</span><br><span class="line"><span class="comment">// Seoul,Republic of Korea,Sat May 09 2020 20:00:19</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([‘Seoul’, ‘Republic <span class="keyword">of</span> Korea’, date].toLocaleString());</span><br><span class="line"><span class="comment">// Seoul,Republic of Korea,2020. 5. 9. 오후 8:00:19</span></span><br></pre></td></tr></table></figure><p><code>Object.prototype</code>에 동일한 이름을 가진 메서드가 존재하지만, <code>Array</code>에 새롭게 정의한 메서드이므로 다른 메서드로 볼 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString === <span class="built_in">Array</span>.prototype.toString <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString === <span class="built_in">Array</span>.prototype.__proto__.toString <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>참고:</strong></p><ul><li><a href="https://ko.javascript.info/array-methods" target="_blank" rel="external nofollow noopener noreferrer">배열과 메서드</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;접근자-메서드&quot;&gt;&lt;a href=&quot;#접근자-메서드&quot; class=&quot;headerlink&quot; title=&quot;접근자 메서드&quot;&gt;&lt;/a&gt;접근자 메서드&lt;/h2&gt;&lt;p&gt;배열 메서드는 크게 세 종류로 나눈다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;수정 메서드&lt;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="Javascript" scheme="http://codeameba.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>[TIL] 원본 배열을 수정하는 배열 메서드</title>
    <link href="http://codeameba.github.io/2020/05/08/programming/array-method-changed-original/"/>
    <id>http://codeameba.github.io/2020/05/08/programming/array-method-changed-original/</id>
    <published>2020-05-08T09:12:42.000Z</published>
    <updated>2020-05-13T18:03:08.377Z</updated>
    
    <content type="html"><![CDATA[<h2 id="수정-메서드"><a href="#수정-메서드" class="headerlink" title="수정 메서드"></a>수정 메서드</h2><p>배열 메서드는 크게 세 종류로 나눈다.</p><ul><li><strong>수정 메서드</strong> : 원본 배열을 수정함</li><li><strong>접근자 메서드</strong> : 배열에 접근하여 새로운 배열을 반환</li><li><strong>반복 메서드</strong> : 배열의 요소들을 순회하며 작업을 수행</li></ul><p>이번 시간에는 주요 수정 메서드들을 살펴본다.</p><h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><p><code>push()</code>는 배열 마지막에 새로운 요소를 추가한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [‘apple’, ‘banana’, ‘melon’, ‘peach’, ‘blueberry’];</span><br><span class="line"></span><br><span class="line">fruits.push(‘pineapple’);</span><br><span class="line"><span class="built_in">console</span>.log(fruits);</span><br><span class="line"><span class="comment">// ["apple", "banana", "melon", "peach", "blueberry", "pineapple"]</span></span><br></pre></td></tr></table></figure><h2 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h2><p><code>pop()</code>은 배열 마지막 요소를 제거한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [‘apple’, ‘banana’, ‘melon’, ‘peach’, ‘blueberry’];</span><br><span class="line"></span><br><span class="line">fruits.pop();</span><br><span class="line"><span class="built_in">console</span>.log(fruits);</span><br><span class="line"><span class="comment">// ["apple", "banana", "melon", "peach"]</span></span><br></pre></td></tr></table></figure><h2 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h2><p><code>shift()</code>는 배열 맨 앞의 요소를 제거한 후 모든 요소를 왼쪽으로 이동 시킨다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [‘apple’, ‘banana’, ‘melon’, ‘peach’, ‘blueberry’];</span><br><span class="line"></span><br><span class="line">fruits.shift();</span><br><span class="line"><span class="built_in">console</span>.log(fruits);</span><br><span class="line"><span class="comment">// [‘banana’, ‘melon’, ‘peach’, ‘blueberry’]</span></span><br></pre></td></tr></table></figure><h2 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h2><p><code>unshift()</code>는 배열 맨 앞에 새로운 요소를 추가하며 기존의 요소들을 오른쪽으로 이동 시킨다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [‘apple’, ‘banana’, ‘melon’, ‘peach’, ‘blueberry’];</span><br><span class="line"></span><br><span class="line">fruits.unshift(‘pineapple’);</span><br><span class="line"><span class="built_in">console</span>.log(fruits);</span><br><span class="line"><span class="comment">// [‘pineapple’, ‘apple’, ‘banana’, ‘melon’, ‘peach’, ‘blueberry’]</span></span><br></pre></td></tr></table></figure><h2 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h2><p><code>splice</code>는 전달하는 인자 개수에 따라 특정 위치에 요소를 추가, 삭제, 교체할 수 있다.<br><strong><code>splice(시작 인덱스, 시작 인덱스부터 요소의 개수, 추가할 요소)</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [‘apple’, ‘banana’, ‘melon’, ‘peach’, ‘blueberry’];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 인덱스 1부터 2개의 요소를 제거하고, ‘lemon’과 ‘grape’를 추가</span></span><br><span class="line">fruits.splice(<span class="number">1</span>, <span class="number">2</span>, ‘lemon’, ‘grape’);</span><br><span class="line"><span class="built_in">console</span>.log(fruits);</span><br><span class="line"><span class="comment">// ["apple", "lemon", "grape", "peach", "blueberry"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 첫 번째 인수만 넘기면 해당 인덱스 이후의 요소 모두 제거</span></span><br><span class="line">fruits.splice(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fruits);</span><br><span class="line"><span class="comment">// ["apple", "lemon"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 두 번째 인수에 0을 넘기면 제거 없이 새로운 요소만 추가</span></span><br><span class="line">fruits.splice(<span class="number">1</span>, <span class="number">0</span>, ‘cherry’);</span><br><span class="line"><span class="built_in">console</span>.log(fruits);</span><br><span class="line"><span class="comment">// [“apple", "cherry", "lemon"]</span></span><br></pre></td></tr></table></figure><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p><code>sort()</code>는 배열 요소를 정렬할 때 사용한다. 비교함수를 넣어야 인접한 두 개 의 요소를 비교하여 정렬을 하며, 정렬 방식은 다음과 같다.</p><ul><li>f(a, b) &lt; 0 이면 a를 b보다 작은 인덱스로 정렬</li><li>f(a, b) == 0 이면 a와 b의 순서 그대로 둠</li><li>f(a, b) &gt; 0 이면 b를 a보다 작은 인덱스로 정렬</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">36</span>, <span class="number">2</span>, <span class="number">51</span>, <span class="number">7</span>, <span class="number">19</span>, <span class="number">24</span>];</span><br><span class="line"></span><br><span class="line">numbers.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123; <span class="keyword">return</span> a - b; &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(numbers); </span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 6, 7, 8, 15, 19, 24, 36, 51]</span></span><br></pre></td></tr></table></figure><p>비교함수를 지정하지 않으면 요소를 문자열로 변환하여 사전순(abc)으로 정렬한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [‘apple’, ‘banana’, ‘melon’, ‘peach’, ‘blueberry’];</span><br><span class="line"></span><br><span class="line">fruits.sort();</span><br><span class="line"><span class="built_in">console</span>.log(fruits); </span><br><span class="line"><span class="comment">// ["apple", "banana", "blueberry", "melon", "peach"]</span></span><br></pre></td></tr></table></figure><p><strong>참고:</strong></p><ul><li><a href="https://ko.javascript.info/array-methods" target="_blank" rel="external nofollow noopener noreferrer">배열과 메서드</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;수정-메서드&quot;&gt;&lt;a href=&quot;#수정-메서드&quot; class=&quot;headerlink&quot; title=&quot;수정 메서드&quot;&gt;&lt;/a&gt;수정 메서드&lt;/h2&gt;&lt;p&gt;배열 메서드는 크게 세 종류로 나눈다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;수정 메서드&lt;/str
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="Javascript" scheme="http://codeameba.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>[TIL] 클로저(Closure) 복습</title>
    <link href="http://codeameba.github.io/2020/05/04/programming/closure-is-very-important/"/>
    <id>http://codeameba.github.io/2020/05/04/programming/closure-is-very-important/</id>
    <published>2020-05-04T10:45:42.000Z</published>
    <updated>2020-05-13T18:03:26.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="렉시컬-스코핑-Lexical-Scoping"><a href="#렉시컬-스코핑-Lexical-Scoping" class="headerlink" title="렉시컬 스코핑(Lexical Scoping)"></a>렉시컬 스코핑(Lexical Scoping)</h2><p>클로저의 개념을 이해하기 위해서는 우선 렉시컬 스코핑을 이해해야 하며, 렉시컬 스코핑을 이해하기 위해서는 실행 컨텍스트(Execution Context)를 이해할 필요가 있다.</p><p>아래와 같은 코드가 있을 때, 실행 컨텍스트와 렉시컬 스코핑을 단계별로 정리하며 알아보도록 하자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = ‘codeAmeba’;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">displayName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">  &#125;</span><br><span class="line">  displayName();</span><br><span class="line">&#125;</span><br><span class="line">init(); <span class="comment">// codeAmeba</span></span><br></pre></td></tr></table></figure><ol><li>글로벌 실행 컨텍스트 생성 -&gt; 렉시컬 환경에 <code>init()</code> 등록</li><li>글로벌 실행 컨텍스트 위에 <code>init()</code> 실행 컨텍스트, 렉시컬 스코프 생성 </li><li><code>init()</code> 렉시컬 환경에 변수와 함수 등록, 외부 환경 참조에 글로벌 렉시컬 환경 등록</li><li><code>init()</code> 실행 컨텍스트 위에 <code>displayName()</code> 실행 컨텍스트, 렉시컬 스코프 생성 </li><li><code>displayName()</code> 외부 환경 참조에 등록된  변수 <code>name</code>을 찾아 로그 실행</li><li><code>displayName()</code> 실행 컨텍스트, 렉시컬 스코프 종료</li><li><code>init()</code> 실행 컨텍스트, 렉시컬 스코프 종료</li></ol><h2 id="클로저-Closure"><a href="#클로저-Closure" class="headerlink" title="클로저(Closure)"></a>클로저(Closure)</h2><p>앞서 살펴본 내용이 일반적인 중첩함수라면, 클로저는 어떤 부분이 다른지 아래의 코드를 살펴보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = ‘codeAmeba’;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">displayName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> displayName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myFunc = makeFunc();</span><br><span class="line">myFunc(); <span class="comment">// codeAmeba</span></span><br></pre></td></tr></table></figure><p><code>displayName()</code>을 리턴한다는 것 외에 큰 차이를 발견하기 어려우나 내부적으로는 클로저만의 차이점이 있다.</p><p><strong>클로저의 컨셉은 실행 컨텍스트 종료 후에도 렉시컬 환경을 유지하는 것에 있다.</strong></p><p>위의 경우에서는,  <code>displayName()</code>이 리턴되어 <code>myFunc</code>에 저장되고, <code>displayName()</code>은 외부 환경 참조를 통해  <code>makeFunc()</code>의 지역변수 <code>name</code>을 참조하고 있다고 볼 수 있다.</p><p><strong>참고:</strong><br>    - <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Closures" target="_blank" rel="external nofollow noopener noreferrer">클로저 - JavaScript | MDN</a><br>    - <a href="https://ko.javascript.info/closure" target="_blank" rel="external nofollow noopener noreferrer">변수의 스코프</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;렉시컬-스코핑-Lexical-Scoping&quot;&gt;&lt;a href=&quot;#렉시컬-스코핑-Lexical-Scoping&quot; class=&quot;headerlink&quot; title=&quot;렉시컬 스코핑(Lexical Scoping)&quot;&gt;&lt;/a&gt;렉시컬 스코핑(Lexical 
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="Javascript" scheme="http://codeameba.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>[TIL] 메서드(method)의 약식 표현과 한계</title>
    <link href="http://codeameba.github.io/2020/04/30/programming/es6-method-expression/"/>
    <id>http://codeameba.github.io/2020/04/30/programming/es6-method-expression/</id>
    <published>2020-04-30T09:45:42.000Z</published>
    <updated>2020-05-13T18:04:19.094Z</updated>
    
    <content type="html"><![CDATA[<p>ES6의 등장으로 말미암아 다양한 문법적 편의성을 누릴 수 있게 되었다. 그 중 하나가 아래와 같은 메서드(method)의 약식 표현이다.</p><ol><li><strong>메서드 약식 표현(ES6에서 추가)</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> robot = &#123;</span><br><span class="line">  name: ‘Coderoid’,</span><br><span class="line">  sayHello() &#123; <span class="built_in">console</span>.log(‘Hello! ‘ + <span class="keyword">this</span>.name); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>ES6 이전의 메서드의 표현은 아래와 같았다.</p><ol start="2"><li><strong>ES6 이전의 메서드 표현</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> robot = &#123;</span><br><span class="line">  name: ‘Coderoid’,</span><br><span class="line">  sayHello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(‘Hello! ‘ + <span class="keyword">this</span>.name); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>단순히 <code>key : value</code>  형태의 유무 정도의 차이로 보이지만, 생각보다 중요한 차이가 있다.</p><p>약식표현의 경우 <code>prototype</code>을 지니지 않기 때문에 생성자로 사용할 수 없으며 이말은 곧, <code>new</code> 연산자를 통한 인스턴스의 생성이 불가하다는 말이기도 하다. 또한, 약식표현은 <code>super</code> 키워드를 사용할 수 없다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ES6의 등장으로 말미암아 다양한 문법적 편의성을 누릴 수 있게 되었다. 그 중 하나가 아래와 같은 메서드(method)의 약식 표현이다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;메서드 약식 표현(ES6에서 추가)&lt;/strong&gt;&lt;figure cl
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="Javascript" scheme="http://codeameba.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>[TIL] 프로토타입을 임의로 수정하면 안 되는 이유</title>
    <link href="http://codeameba.github.io/2020/04/22/programming/do-not-modify-prototype/"/>
    <id>http://codeameba.github.io/2020/04/22/programming/do-not-modify-prototype/</id>
    <published>2020-04-22T09:05:42.000Z</published>
    <updated>2020-05-13T18:04:14.940Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.__proto__ === <span class="built_in">Array</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.__proto__.__proto__ === <span class="built_in">Object</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.__proto__.__proto__.__proto__ === <span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myFunc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(myFunc.__proto__ === <span class="built_in">Function</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(myFunc.__proto__.__proto__ === <span class="built_in">Object</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(myFunc.__proto__.__proto__.__proto__ === <span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.__proto__ === <span class="built_in">Number</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(num.__proto__.__proto__ === <span class="built_in">Object</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(num.__proto__.__proto__.__proto__ === <span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myFunc.__proto__.__proto__ === arr.__proto__.__proto__); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(num.__proto__.__proto__ === myFunc.__proto__.__proto__); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>위와 같이 모든 내장 프로토타입은 <code>Object.prototype</code>에서 만나게 되며, 그 끝에는 <code>null</code>이 있다.</p><p>그 말은 곧, 프로토타입 체인을 통해 다른 객체의 메서드를 가져올 수 있다는 것이며, 자주 사용하는 사용자 정의 메서드를 프로토타입에 아예 탑재해버리고 내장 메서드를 쓰듯이 쓸 수도 있다는 것이다.</p><p><strong>하지만, 프로토타입은 전역에 영향을 미치며, 프로토타입에 사용자 정의 메서드를 넣는다는 것은 전역 객체를 만든다는 것이므로 오류와 혼란을 야기한다.</strong></p><p><strong>참고:</strong></p><ul><li><a href="https://ko.javascript.info/native-prototypes" target="_blank" rel="external nofollow noopener noreferrer">네이티브 프로토타입</a></li><li><a href="https://ko.javascript.info/function-prototype" target="_blank" rel="external nofollow noopener noreferrer">함수의 prototype 프로퍼티</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="Javascript" scheme="http://codeameba.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>[TIL] 구조 분해 할당(destructured assignment)</title>
    <link href="http://codeameba.github.io/2020/04/16/programming/destructured-assignment/"/>
    <id>http://codeameba.github.io/2020/04/16/programming/destructured-assignment/</id>
    <published>2020-04-16T09:05:42.000Z</published>
    <updated>2020-05-13T18:02:49.502Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> member = &#123;</span><br><span class="line">  name: ‘codeAmeba’,</span><br><span class="line">  position: <span class="string">'Front-end'</span>,</span><br><span class="line">  skills: [<span class="string">'HTML'</span>, <span class="string">'CSS'</span>, <span class="string">'JavaScript'</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같은 객체가 있을 때, 객체의 일부만 변수에 할당하여 사용하고 싶은 경우가 종종 있을 것이다. 그리고, 보통은 아래와 같이 할당을 할 것이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = member.name;</span><br><span class="line"><span class="keyword">const</span> position = member.position;</span><br><span class="line"><span class="keyword">const</span> skills = member.skills;</span><br></pre></td></tr></table></figure><p>물론 이렇게 한다고 큰 일이 일어나지는 않지만, <strong>구조 분해 할당(destructured assignment)</strong> 를 활용하면 단 한 줄로 동일한 결과를 낼 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; name, position, skills &#125; = member;</span><br></pre></td></tr></table></figure><p>이와 같은 구조 분해 할당은 객체의 일부를 저장하는 상황에 국한되지 않는다. <strong>배열의 요소를 저장할 때</strong>나 <strong>매개변수에 기본값이 필요한 경우</strong> 등에도 유용하게 쓰인다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> users = [‘codeAmeba’, ‘codeMonkey’];</span><br><span class="line"><span class="keyword">let</span> [firstUser, secondUser] = users;</span><br><span class="line"><span class="built_in">console</span>.log(firstUser); <span class="comment">// codeAmeba</span></span><br></pre></td></tr></table></figure><p>특히, 구조 분해 할당의 몇 가지 포인트만 알면 다양한 상황에 응용이 가능한데, 포인트는 다음과 같다.<br>    1. 할당 연산자 우측에는 모든 이터러블(iterable)이 올 수 있다.<br>    2. 할당 연산자 좌측에는 할당 가능한 모든 것이 올 수 있다.<br>    3. 기본값 설정이 가능하다.</p><ul><li><strong>참고:</strong><ul><li><a href="https://ko.javascript.info/destructuring-assignment" target="_blank" rel="external nofollow noopener noreferrer">구조 분해 할당</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="Javascript" scheme="http://codeameba.github.io/tags/Javascript/"/>
    
  </entry>
  
</feed>
