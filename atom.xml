<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>별의서재</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://codeameba.github.io/"/>
  <updated>2020-01-31T09:58:43.088Z</updated>
  <id>http://codeameba.github.io/</id>
  
  <author>
    <name>Sooyoung Jeong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://codeameba.github.io/2020/01/31/hello-world/"/>
    <id>http://codeameba.github.io/2020/01/31/hello-world/</id>
    <published>2020-01-31T09:58:43.087Z</published>
    <updated>2020-01-31T09:58:43.088Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external nofollow noopener noreferrer">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external nofollow noopener noreferrer">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external nofollow noopener noreferrer">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external nofollow noopener noreferrer">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external nofollow noopener noreferrer">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external nofollow noopener noreferrer">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external nofollow noopener noreferrer">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external nofollow noopener noreferrer">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;Hexo&lt;/a&gt;! This is your very first post.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>첫 포스팅</title>
    <link href="http://codeameba.github.io/2020/01/31/first-post/"/>
    <id>http://codeameba.github.io/2020/01/31/first-post/</id>
    <published>2020-01-31T06:19:42.000Z</published>
    <updated>2020-01-31T08:07:45.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="테스트-포스팅"><a href="#테스트-포스팅" class="headerlink" title="테스트 포스팅"></a>테스트 포스팅</h1><p>글을 통해 생각을 정리하기 위한 블로그입니다.</p><h1 id="테스트-01"><a href="#테스트-01" class="headerlink" title="테스트 01"></a>테스트 01</h1><p>Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis.</p><p>Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Aenean lacinia bibendum nulla sed consectetur. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Nulla vitae elit libero, a pharetra augue. Nullam id dolor id nibh ultricies vehicula ut id elit. Donec ullamcorper nulla non metus auctor fringilla. Maecenas faucibus mollis interdum.</p><p>Sed posuere consectetur est at lobortis. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Cras mattis consectetur purus sit amet fermentum. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Maecenas sed diam eget risus varius blandit sit amet non magna.</p><h1 id="테스트-02"><a href="#테스트-02" class="headerlink" title="테스트 02"></a>테스트 02</h1><p>Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis.</p><p>Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Aenean lacinia bibendum nulla sed consectetur. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Nulla vitae elit libero, a pharetra augue. Nullam id dolor id nibh ultricies vehicula ut id elit. Donec ullamcorper nulla non metus auctor fringilla. Maecenas faucibus mollis interdum.</p><p>Sed posuere consectetur est at lobortis. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Cras mattis consectetur purus sit amet fermentum. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Maecenas sed diam eget risus varius blandit sit amet non magna.</p><h1 id="테스트-03"><a href="#테스트-03" class="headerlink" title="테스트 03"></a>테스트 03</h1><p>Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis.</p><p>Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Aenean lacinia bibendum nulla sed consectetur. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Nulla vitae elit libero, a pharetra augue. Nullam id dolor id nibh ultricies vehicula ut id elit. Donec ullamcorper nulla non metus auctor fringilla. Maecenas faucibus mollis interdum.</p><p>Sed posuere consectetur est at lobortis. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Cras mattis consectetur purus sit amet fermentum. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Maecenas sed diam eget risus varius blandit sit amet non magna.</p><h1 id="테스트-04"><a href="#테스트-04" class="headerlink" title="테스트 04"></a>테스트 04</h1><p>Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis.</p><p>Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Aenean lacinia bibendum nulla sed consectetur. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Nulla vitae elit libero, a pharetra augue. Nullam id dolor id nibh ultricies vehicula ut id elit. Donec ullamcorper nulla non metus auctor fringilla. Maecenas faucibus mollis interdum.</p><p>Sed posuere consectetur est at lobortis. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Cras mattis consectetur purus sit amet fermentum. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Maecenas sed diam eget risus varius blandit sit amet non magna.</p><h1 id="테스트-05"><a href="#테스트-05" class="headerlink" title="테스트 05"></a>테스트 05</h1><p>Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis.</p><p>Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Aenean lacinia bibendum nulla sed consectetur. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Nulla vitae elit libero, a pharetra augue. Nullam id dolor id nibh ultricies vehicula ut id elit. Donec ullamcorper nulla non metus auctor fringilla. Maecenas faucibus mollis interdum.</p><p>Sed posuere consectetur est at lobortis. Nullam id dolor id nibh ultricies vehicula ut id elit. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Cras mattis consectetur purus sit amet fermentum. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Maecenas sed diam eget risus varius blandit sit amet non magna.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;테스트-포스팅&quot;&gt;&lt;a href=&quot;#테스트-포스팅&quot; class=&quot;headerlink&quot; title=&quot;테스트 포스팅&quot;&gt;&lt;/a&gt;테스트 포스팅&lt;/h1&gt;&lt;p&gt;글을 통해 생각을 정리하기 위한 블로그입니다.&lt;/p&gt;
&lt;h1 id=&quot;테스트-01&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="생각정리" scheme="http://codeameba.github.io/categories/%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/"/>
    
    
      <category term="blog" scheme="http://codeameba.github.io/tags/blog/"/>
    
      <category term="블로그" scheme="http://codeameba.github.io/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8/"/>
    
      <category term="생각정리" scheme="http://codeameba.github.io/tags/%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>TIL(190918) - Vue.js 01</title>
    <link href="http://codeameba.github.io/2019/09/18/vue-til-01/"/>
    <id>http://codeameba.github.io/2019/09/18/vue-til-01/</id>
    <published>2019-09-17T16:00:42.000Z</published>
    <updated>2020-01-31T09:58:44.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TIL-190918-Vue-js-01"><a href="#TIL-190918-Vue-js-01" class="headerlink" title="TIL(190918) - Vue.js 01"></a>TIL(190918) - Vue.js 01</h1><hr><p><strong>Vue.js 시작하기 - Age of Vue.js를 보고 정리함</strong></p><h2 id="Vue-js-Documents"><a href="#Vue-js-Documents" class="headerlink" title="Vue.js Documents"></a>Vue.js Documents</h2><hr><ul><li><a href="https://kr.vuejs.org/" target="_blank" rel="external nofollow noopener noreferrer">Vue.js</a></li></ul><br><h2 id="Vue-js는-무엇인가"><a href="#Vue-js는-무엇인가" class="headerlink" title="Vue.js는 무엇인가?"></a>Vue.js는 무엇인가?</h2><hr><ul><li>MVVM 패턴의 뷰모델 레이어에 해당하는 화면단 라이브러리<ul><li><a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel" target="_blank" rel="external nofollow noopener noreferrer">Model–view–viewmodel - Wikipedia</a></li><li>DOM(View)을 조작하면 Vue.js(ViewModel) 내부의 DOM Listeners가 이를 인지하여 자바스크립트(Model)에 전달하고, 자바스크립트는 다시 Vue.js 내부의 Data Bindings를 통해 DOM에 데이터를 전달한다. 결과적으로 화면에 보여지는 내용 역시 변경된다.</li></ul></li></ul><br><h2 id="Vue-js를-쓰는-이유"><a href="#Vue-js를-쓰는-이유" class="headerlink" title="Vue.js를 쓰는 이유"></a>Vue.js를 쓰는 이유</h2><hr><ul><li>Vue.js와 같은 프레임워크를 사용하지 않고 html, css, JavaScript만 사용한 기본적인 웹개발에서는 View를 바꾸려면 직접적으로 코드를 손봐야만 했다.</li><li>하지만 매번 변경할 때마다 사람이 손수 고치는 것은 무리가 있기 때문에 Vue.js같은 프레임워크를 사용한다.</li><li>결론적으로, View의 내용을 변경하면 내부의 코드가 자동적으로 변경되고 그 상태가 유지 될 수 있도록 하는 것에 의의가 있다.</li><li>이러한 것이 Vue.js의 핵심 사상인 <strong>Reactivity</strong><ul><li><a href="https://kr.vuejs.org/v2/guide/reactivity.html" target="_blank" rel="external nofollow noopener noreferrer">반응형에 대해 깊이 알아보기 — Vue.js</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TIL-190918-Vue-js-01&quot;&gt;&lt;a href=&quot;#TIL-190918-Vue-js-01&quot; class=&quot;headerlink&quot; title=&quot;TIL(190918) - Vue.js 01&quot;&gt;&lt;/a&gt;TIL(190918) - Vue.js 01
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="Javascript" scheme="http://codeameba.github.io/tags/Javascript/"/>
    
      <category term="vue.js" scheme="http://codeameba.github.io/tags/vue-js/"/>
    
      <category term="뷰" scheme="http://codeameba.github.io/tags/%EB%B7%B0/"/>
    
  </entry>
  
  <entry>
    <title>[ReactJS] 무비앱 만들기 Day 06</title>
    <link href="http://codeameba.github.io/2019/09/09/react-movie-app-06/"/>
    <id>http://codeameba.github.io/2019/09/09/react-movie-app-06/</id>
    <published>2019-09-08T16:00:42.000Z</published>
    <updated>2020-01-31T09:58:43.868Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ReactJS-무비앱-만들기-Day-06"><a href="#ReactJS-무비앱-만들기-Day-06" class="headerlink" title="[ReactJS] 무비앱 만들기 Day 06"></a>[ReactJS] 무비앱 만들기 Day 06</h1><hr><h2 id="5-0-Container-Presenter-Pattern-part-One"><a href="#5-0-Container-Presenter-Pattern-part-One" class="headerlink" title="5.0 Container Presenter Pattern part One"></a>5.0 Container Presenter Pattern part One</h2><hr><ul><li>Container Presenter Pattern에서 컨테이너는 data와 state를 지니고, api를 불러온다. 그리고 모든 로직을 처리.</li><li>그 다음, 프레젠터가 그 data들을 보여주는 역할.(프레젠터에는 state가 없고, api도 모르며 클래스도 없고 단지 함수형 컴포넌트)</li><li>쉽게 말해서 프레젠터는 ‘스타일’, 컨테이너는 ‘데이터’</li></ul><h3 id="각-컨테이너별-폴더를-따로-구성"><a href="#각-컨테이너별-폴더를-따로-구성" class="headerlink" title="각 컨테이너별 폴더를 따로 구성"></a>각 컨테이너별 폴더를 따로 구성</h3><ul><li>폴더마다 index.js가 있어야 함. 컨테이너를 export해야 하기 때문.</li><li>이렇게 정리하는 게 혼란을 줄일 수 있음.</li><li>index.js가 HomeContainer를 import / export하는 역할을 하고</li><li>HomeContainer는 state를 가진 모든 리액트 컴포넌트가 된다.</li></ul><p><strong>src - Routes - Home - HomeContainer.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> HomePresenter <span class="keyword">from</span> <span class="string">'./HomePresenter'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    nowPlaying: <span class="literal">null</span>,</span><br><span class="line">    upcoming: <span class="literal">null</span>,</span><br><span class="line">    popular: <span class="literal">null</span>,</span><br><span class="line">    error: <span class="literal">null</span>,</span><br><span class="line">    loading: <span class="literal">true</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; nowPlaying, upcoming, popular, error, loading &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;HomePresenter </span><br><span class="line">        nowPlaying=&#123;nowPlaying&#125; </span><br><span class="line">        upcoming=&#123;upcoming&#125; </span><br><span class="line">        popular=&#123;popular&#125; </span><br><span class="line">        error=&#123;error&#125;</span><br><span class="line">        loading=&#123;loading&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="5-1-Container-Presenter-Pattern-part-Two"><a href="#5-1-Container-Presenter-Pattern-part-Two" class="headerlink" title="5.1 Container Presenter Pattern part Two"></a>5.1 Container Presenter Pattern part Two</h2><hr><ul><li>search container는 <strong>상호작용</strong>이 필요하기 때문에 조금 까다로움</li><li>loading의 경우 기본값은 false<ul><li>유저가 아무런 행동을 취하지 않았는데 로딩이 되면 안 되니까</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> SearchPresenter <span class="keyword">from</span> <span class="string">'./SearchPresenter'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    MovieResults: <span class="literal">null</span>,</span><br><span class="line">    TvResults: <span class="literal">null</span>,</span><br><span class="line">    SearchTerm: <span class="string">''</span>,</span><br><span class="line">    error: <span class="literal">null</span>,</span><br><span class="line">    loading: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; MovieResults, TvResults, SearchTerm, error, loading &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;SearchPresenter</span><br><span class="line">        MovieResults=&#123;MovieResults&#125;</span><br><span class="line">        TvResults=&#123;TvResults&#125;</span><br><span class="line">        SearchTerm=&#123;SearchTerm&#125;</span><br><span class="line">        error=&#123;error&#125;</span><br><span class="line">        loading=&#123;loading&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="5-2-Home-Container"><a href="#5-2-Home-Container" class="headerlink" title="5.2 Home Container"></a>5.2 Home Container</h2><hr><ul><li><p>두 가지 옵션이 있음</p><ul><li>componentDidMount()를 통해 전체 api 요청을 할 수 있고</li><li>각각의 요청을 분리된 함수로 따로 요청할 수도 있음.<ul><li>ex) getNowPlaying(), getUpComing() 등등</li></ul></li></ul></li><li><p>이번 경우엔 굳이 분리할 필요가 없으므로 componentDidMount()를 사용함</p></li></ul><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try - catch"></a>try - catch</h3><ul><li>try가 먼저 실행되고, 작동하지 않으면 error를 catch 한다.</li></ul><h3 id="async-await"><a href="#async-await" class="headerlink" title="async / await"></a>async / await</h3><ul><li>준비가 될 때까지 기다려달라는 의미</li><li>예를 들어 아래와 같은 상황에서 async/await이 없으면, nowPlaying 데이터를 가져오기 시작한다. 하지만 api가 리턴할 때까지 자바스크립트는 기다려주지 않음.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> componentDidMount() &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> MoviesApi.nowPlaying();</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      error: <span class="string">"Can't find movis information."</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      loading: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>하지만, async/await을 쓰면 데이터가 준비될 때까지 자바스크립트가 기다려줌.</li></ul><h3 id="비구조화-할당"><a href="#비구조화-할당" class="headerlink" title="비구조화 할당"></a>비구조화 할당</h3><ul><li>변수명에 data를 정할 때 비구조화 할당을 쓰면 보기 좋음<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> componentDidMount() &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">data</span>: &#123; <span class="attr">results</span>: nowPlaying &#125;&#125; = <span class="keyword">await</span> MoviesApi.nowPlaying();</span><br><span class="line">    <span class="built_in">console</span>.log(nowPlaying);</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      error: <span class="string">"Aw, Snap!"</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      loading: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><br><h2 id="5-3-TV-Container"><a href="#5-3-TV-Container" class="headerlink" title="5.3 TV Container"></a>5.3 TV Container</h2><hr><ul><li>Movies와 동일</li></ul><br><h2 id="5-4-Search-Container"><a href="#5-4-Search-Container" class="headerlink" title="5.4 Search Container"></a>5.4 Search Container</h2><hr><ul><li>모든 로직을 갖는다.</li><li>첫 번째 로직은 handleSubmit<ul><li>입력 폼에 text를 입력한 뒤 엔터키를 누르면 Submit이 됨</li><li>searchTerm이 공백이 아닌지 체크하고 search 함수를 실행할 것</li></ul></li><li>특히 try는 다른 컨테이너와 다름<ul><li>검색을 시도했을 때 로딩을 true로 만든다(기본값은 false).<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">handleSubmit = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; searchTerm &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">  <span class="keyword">if</span> (searchTerm !== <span class="string">''</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.searchByTerm();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">searchByTerm = <span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; searchTerm &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">data</span>: &#123; <span class="attr">results</span>: movieResults &#125;&#125; = <span class="keyword">await</span> MoviesApi.search(searchTerm);</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">data</span>: &#123; <span class="attr">results</span>: tvResults &#125;&#125; = <span class="keyword">await</span> TvApi.search(searchTerm);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      movieResults,</span><br><span class="line">      tvResults</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      loading: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      error: <span class="string">"Can't find results."</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      loading: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><br><h2 id="5-5-Detail-Container-part-One"><a href="#5-5-Detail-Container-part-One" class="headerlink" title="5.5 Detail Container part One"></a>5.5 Detail Container part One</h2><hr><ul><li>Router Component에 Detail을 추가해야 함.</li><li>Movie나 TV의 id를 가져와서 보여주는 방식</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/"</span> exact component=&#123;Home&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/tv"</span> component=&#123;TV&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/search"</span> component=&#123;Search&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/movie/:id"</span> component=&#123;Detail&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/tv/:id"</span> component=&#123;Detail&#125; /&gt;</span><br><span class="line">        &lt;Redirect <span class="keyword">from</span>=<span class="string">"*"</span> to=<span class="string">"/"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><ul><li><p><code>:id</code>는 해당 위치는 랜덤한 id가 올 수 있음을 의미</p></li><li><p>id는 url에서 가져올 예정</p></li><li><p>Header component는 라우터의 위치를 알고 있음.</p><ul><li>withRouter로 감쌌기 때문에</li></ul></li><li><p>id가 보기에는 숫자지만, typeof를 해보면 string으로 나옴 따라서 parseInt를 해줘야 함</p></li><li><p>id가 숫자가 아닌 경우에는 home으로 보냄</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> componentDidMount() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">match</span>: &#123; <span class="attr">params</span>: &#123; id &#125;&#125;, <span class="attr">history</span>: &#123; push &#125;&#125; = <span class="keyword">this</span>.props;</span><br><span class="line">  <span class="keyword">const</span> parseId = <span class="built_in">parseInt</span>(id);</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">isNaN</span>(parseId)) &#123;</span><br><span class="line">    push(<span class="string">'/'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ReactJS-무비앱-만들기-Day-06&quot;&gt;&lt;a href=&quot;#ReactJS-무비앱-만들기-Day-06&quot; class=&quot;headerlink&quot; title=&quot;[ReactJS] 무비앱 만들기 Day 06&quot;&gt;&lt;/a&gt;[ReactJS] 무비앱 만들기 
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="리액트" scheme="http://codeameba.github.io/tags/%EB%A6%AC%EC%95%A1%ED%8A%B8/"/>
    
      <category term="react" scheme="http://codeameba.github.io/tags/react/"/>
    
      <category term="노마드코더" scheme="http://codeameba.github.io/tags/%EB%85%B8%EB%A7%88%EB%93%9C%EC%BD%94%EB%8D%94/"/>
    
      <category term="nomadcoders" scheme="http://codeameba.github.io/tags/nomadcoders/"/>
    
  </entry>
  
  <entry>
    <title>[ReactJS] 무비앱 만들기 Day 05</title>
    <link href="http://codeameba.github.io/2019/09/05/react-movie-app-05/"/>
    <id>http://codeameba.github.io/2019/09/05/react-movie-app-05/</id>
    <published>2019-09-04T16:00:42.000Z</published>
    <updated>2020-01-31T09:58:43.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ReactJS-무비앱-만들기-Day-05"><a href="#ReactJS-무비앱-만들기-Day-05" class="headerlink" title="[ReactJS] 무비앱 만들기 Day 05"></a>[ReactJS] 무비앱 만들기 Day 05</h1><hr><h2 id="4-0-Introduction-to-The-Movie-DB-API"><a href="#4-0-Introduction-to-The-Movie-DB-API" class="headerlink" title="4.0 Introduction to The Movie DB API"></a>4.0 Introduction to The Movie DB API</h2><hr><ul><li>데이터가 오는 곳이 API(Application Programming Interface)</li><li>Nomflix에서는 the movie db를 이용함(가입 필요).<ul><li><a href="https://www.themoviedb.org/" target="_blank" rel="external nofollow noopener noreferrer">https://www.themoviedb.org/</a> </li></ul></li><li>setting -&gt; API -&gt; API KEY copy</li></ul><h2 id="4-1-Sexy-Networking-with-Axios-Instances"><a href="#4-1-Sexy-Networking-with-Axios-Instances" class="headerlink" title="4.1 Sexy Networking with Axios Instances"></a>4.1 Sexy Networking with Axios Instances</h2><hr><h3 id="API-Verbs"><a href="#API-Verbs" class="headerlink" title="API Verbs"></a>API Verbs</h3><ul><li><input disabled type="checkbox"> Now playing (Movie</li><li><input disabled type="checkbox"> Top Rated (TV, Movie)</li><li><input disabled type="checkbox"> Popular (TV, Movie)</li><li><input disabled type="checkbox"> Upcoming (Movie)</li><li><input disabled type="checkbox"> Airing Today (TV)</li></ul><h3 id="요청-방식"><a href="#요청-방식" class="headerlink" title="요청 방식"></a>요청 방식</h3><ul><li>이전 강의들에서는 주로 fetch를 썼음<ul><li>라우터에서 호출하고, fetch 하고, 나머지 모든 작업들을 하는 방식인데 효율적이지 않음.</li><li>왜냐하면 url의 동일한 내용이 반복되기 때문</li><li>따라서 네트워킹과 API만 다루는 별도의 파일을 따로 만들고 호출할 것</li><li>또한, fetch가 아닌, axios를 사용</li></ul></li></ul><h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><ul><li><a href="https://github.com/axios/axios" target="_blank" rel="external nofollow noopener noreferrer">GitHub - axios/axios: Promise based HTTP client for the browser and node.js</a></li><li>별도 모듈 설치 필요<ul><li><code>yarn add axios</code></li></ul></li><li>axios의 장점은, 직접 인스턴스를 configure(설정)할 수 있다는 점.</li></ul><p><strong>axios.create([config])</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'https://some-domain.com/api/'</span>,</span><br><span class="line">  timeout: <span class="number">1000</span>,</span><br><span class="line">  headers: &#123;<span class="string">'X-Custom-Header'</span>: <span class="string">'foobar'</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>위의 axios.create를 통해 반복을 최소화 할 수 있음.<ul><li>parameter에 api_key와 language 전달</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'https://api.themoviedb.org/3/'</span>,</span><br><span class="line">  params: &#123;</span><br><span class="line">    api_key: <span class="string">'b8e07a1bc39775b44d7ad690b461e764'</span>,</span><br><span class="line">    language: <span class="string">'en-US'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">api.get(<span class="string">'tv/popular'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> api;</span><br></pre></td></tr></table></figure><ul><li>index.js에 api.js를 import하고 실행해보면 아래와 같이 데이터가 들어오는 것을 확인할 수 있음.</li><li>주의) api.get에서 <code>tv/popular</code>로 작성해야 상대경로로 접근함<ul><li><code>/tv/popular</code>로 작성하면 절대경로가 됨</li></ul></li></ul><img src="/images/api-response.png"><img src="/images/api-response2.png"><hr><h2 id="4-2-API-Verbs-part-One"><a href="#4-2-API-Verbs-part-One" class="headerlink" title="4.2 API Verbs part One"></a>4.2 API Verbs part One</h2><hr><h3 id="API-Verbs-1"><a href="#API-Verbs-1" class="headerlink" title="API Verbs"></a>API Verbs</h3><ul><li><input checked disabled type="checkbox"> <p>Now playing (Movie)</p></li><li><input checked disabled type="checkbox"> <p>Upcoming (Movie)</p></li><li><input checked disabled type="checkbox"> <p>Top Rated (TV)</p></li><li><input checked disabled type="checkbox"> <p>Popular (TV, X)</p></li><li><input checked disabled type="checkbox"> <p>Airing Today (TV)</p></li><li><input disabled type="checkbox"> <p>TV Show Detail</p></li><li><input disabled type="checkbox"> <p>Movie Detail</p></li><li><p>TV와 Movies 각각의 api 요청</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'https://api.themoviedb.org/3/'</span>,</span><br><span class="line">  params: &#123;</span><br><span class="line">    api_key: <span class="string">'b8e07a1bc39775b44d7ad690b461e764'</span>,</span><br><span class="line">    language: <span class="string">'en-US'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MoviesApi = &#123;</span><br><span class="line">  nowPlaying: <span class="function"><span class="params">()</span> =&gt;</span> api.get(<span class="string">'movie/now_playing'</span>),</span><br><span class="line">  upcoming: <span class="function"><span class="params">()</span> =&gt;</span> api.get(<span class="string">'movie/upcoming'</span>),</span><br><span class="line">  popluar: <span class="function"><span class="params">()</span> =&gt;</span> api.get(<span class="string">'movie/popular'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> TvApi = &#123;</span><br><span class="line">  topRated: <span class="function"><span class="params">()</span> =&gt;</span> api.get(<span class="string">'tv/top_rated'</span>),</span><br><span class="line">  popular: <span class="function"><span class="params">()</span> =&gt;</span> api.get(<span class="string">'tv/popular'</span>),</span><br><span class="line">  airingToday: <span class="function"><span class="params">()</span> =&gt;</span> api.get(<span class="string">'tv/airing_today'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>fetch 방식의 api 요청에 비해 훨씬 간결하고 가독성이 좋음.</li><li>axios 짱짱맨</li></ul><h2 id="4-3-API-Verbs-part-Two"><a href="#4-3-API-Verbs-part-Two" class="headerlink" title="4.3 API Verbs part Two"></a>4.3 API Verbs part Two</h2><hr><ul><li>Movie Detail을 가져오기 위해 id가 필요함<ul><li><code>movie/{movie_id}</code></li></ul></li></ul><h3 id="API-Verbs-2"><a href="#API-Verbs-2" class="headerlink" title="API Verbs"></a>API Verbs</h3><ul><li><input checked disabled type="checkbox"> Now playing (Movie)</li><li><input checked disabled type="checkbox"> Upcoming (Movie)</li><li><input checked disabled type="checkbox"> Top Rated (TV)</li><li><input checked disabled type="checkbox"> Popular (TV, X)</li><li><input checked disabled type="checkbox"> Airing Today (TV)</li><li><input checked disabled type="checkbox"> TV Show Detail</li><li><input checked disabled type="checkbox"> Movie Detail</li><li><input checked disabled type="checkbox"> Search  (Movie, TV)</li></ul><h3 id="append-to-response"><a href="#append-to-response" class="headerlink" title="append_to_response"></a>append_to_response</h3><ul><li>api에서 지원하는 기능</li><li><a href="https://developers.themoviedb.org/3/getting-started/append-to-response" target="_blank" rel="external nofollow noopener noreferrer">API Docs</a></li><li>video나 image같은 것들을 덧붙이기(append)하면 포스터나 예고편 등으로 출력이 된다.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MoviesApi = &#123;</span><br><span class="line">  nowPlaying: <span class="function"><span class="params">()</span> =&gt;</span> api.get(<span class="string">'movie/now_playing'</span>),</span><br><span class="line">  upcoming: <span class="function"><span class="params">()</span> =&gt;</span> api.get(<span class="string">'movie/upcoming'</span>),</span><br><span class="line">  popluar: <span class="function"><span class="params">()</span> =&gt;</span> api.get(<span class="string">'movie/popular'</span>),</span><br><span class="line">  movieDetail: <span class="function"><span class="params">id</span> =&gt;</span> api.get(<span class="string">`movie/<span class="subst">$&#123;id&#125;</span>`</span>, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      appent_to_response: <span class="string">'videos'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h3><ul><li>search 기능은 url 외에도 검색어에 해당하는 파라미터가 추가로 필요함</li></ul><img src="/images/api-search.png"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search: <span class="function">(<span class="params">term</span>) =&gt;</span> api.get(<span class="string">'search/movie'</span>, &#123;</span><br><span class="line">  params: &#123;</span><br><span class="line">    query: term</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>그리고 api의 명세를 잘 찾아보면 아래와 같이 요구사항이 설명되어 있음.</li><li>이 경우에는 URI로 인코딩이 필요하다고 함.</li></ul><img src="/images/api-search2.png"><ul><li>따라서 아래와 같이 encodeURIComponent를 사용하면 값을 인코팅하고 그 문자열로 검색을 하게 됨.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search: <span class="function">(<span class="params">term</span>) =&gt;</span> api.get(<span class="string">'search/movie'</span>, &#123;</span><br><span class="line">  params: &#123;</span><br><span class="line">    query: <span class="built_in">encodeURIComponent</span>(term)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ReactJS-무비앱-만들기-Day-05&quot;&gt;&lt;a href=&quot;#ReactJS-무비앱-만들기-Day-05&quot; class=&quot;headerlink&quot; title=&quot;[ReactJS] 무비앱 만들기 Day 05&quot;&gt;&lt;/a&gt;[ReactJS] 무비앱 만들기 
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="리액트" scheme="http://codeameba.github.io/tags/%EB%A6%AC%EC%95%A1%ED%8A%B8/"/>
    
      <category term="react" scheme="http://codeameba.github.io/tags/react/"/>
    
      <category term="노마드코더" scheme="http://codeameba.github.io/tags/%EB%85%B8%EB%A7%88%EB%93%9C%EC%BD%94%EB%8D%94/"/>
    
      <category term="nomadcoders" scheme="http://codeameba.github.io/tags/nomadcoders/"/>
    
  </entry>
  
  <entry>
    <title>TIL(190829) - TDD(Test Driven Development) 02</title>
    <link href="http://codeameba.github.io/2019/08/29/tdd-til-02/"/>
    <id>http://codeameba.github.io/2019/08/29/tdd-til-02/</id>
    <published>2019-08-28T16:00:42.000Z</published>
    <updated>2020-01-31T09:58:44.057Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TIL-190829-TDD-Test-Driven-Development-02"><a href="#TIL-190829-TDD-Test-Driven-Development-02" class="headerlink" title="# TIL(190829) - TDD(Test Driven Development) 02"></a># TIL(190829) - TDD(Test Driven Development) 02</h1><hr><p><i>인프런의 ‘견고한 JS 소프트웨어 만들기’ 강의를 보며 정리함</i></p><h2 id="Jasmine-Setting-Up"><a href="#Jasmine-Setting-Up" class="headerlink" title="Jasmine Setting Up"></a>Jasmine Setting Up</h2><hr><ul><li><a href="https://github.com/jasmine/jasmine/releases?after=v2.9.1" target="_blank" rel="external nofollow noopener noreferrer">Releases · jasmine/jasmine · GitHub</a></li><li>강의에서는 2.7.0 버전 다운로드</li><li>SpecRunner.html 파일 실행</li></ul><img src="/images/spec-runner.png">### 테스트 러너<ul><li>자스민, 소스, 테스트 코드를 실행하는 파일</li><li>스탠드 얼론의 경우 HTML 파일이 테스트 러너</li><li>테스트 자동화를 하려면 카르마(Karma) 라이브러리와 연동해야 한다.</li></ul><h2 id="자스민의-활용"><a href="#자스민의-활용" class="headerlink" title="자스민의 활용"></a>자스민의 활용</h2><ul><li>자스민의 SpecRunner.html의 코드를 보면 아래와 같다.</li></ul><img src="/images/spec-runner-code.png"><ul><li>빨간 박스의 자바스크립트 세 줄이 자스민의 테스트 도구라고 할 수 있다.</li><li>그리고, 아래와 같이 본인의 테스트 코드를 넣어서 테스트를 한다.</li></ul><img src="/images/spec-runner-use.png"><ul><li>첫 번째 줄의 describe 함수는 테스트 꾸러미를 만들 때 사용함. 보통은 함수 하나 하나를 테스트 할 때 주로 사용한다.</li><li>두 번째 줄의 it 함수는 테스트 케이스를 만들 때 사용함. 함수의 기능을 테스트 한다고 보면 됨.  첫 번째 인자로 함수 기능의 스펙을 문자열 형태로 넣고, 두 번째 인자로 테스트 함수를 구현할 수 있는 함수를 넣는다.</li><li>세 번째 줄은 테스트 코드 구현 부. 함수의 결과값을 expect 함수의 인자로 넣고, 함수의 기대값을 toBe 함수의 인자로 넣는다.</li></ul><p><strong>테스트 꾸러미(Test Suite)</strong></p><ul><li>describe - 테스트 설명, 테스트 구현 함수</li></ul><p><strong>테스트 스펙(Test Spec)</strong></p><ul><li>it - 테스트 설명, 기대식을 가진 테스트 구현 함수</li></ul><p><strong>기대식과 매쳐</strong></p><ul><li>expect(결과값).toBe(기대값)</li></ul><p><strong>스파이</strong></p><ul><li>spyOn(감시할 객체, 감시할 메서드)</li></ul><h3 id="테스트-결과-확인-방법"><a href="#테스트-결과-확인-방법" class="headerlink" title="테스트 결과 확인 방법"></a>테스트 결과 확인 방법</h3><img src="/images/test-result.png"><ul><li>hello world는 describe  함수로 선언했던 테스트 꾸러미의 이름이라고 할 수 있음.</li><li>true is true는 hello world 테스트 꾸러미에 속한 테스트 케이스.</li><li>위의 내용을 통틀어 1개의 테스트가 실행되었으므로 1spec이라고 명시되었다.</li><li>실패는 없으므로 0 failures.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TIL-190829-TDD-Test-Driven-Development-02&quot;&gt;&lt;a href=&quot;#TIL-190829-TDD-Test-Driven-Development-02&quot; class=&quot;headerlink&quot; title=&quot;# TIL(1908
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="Javascript" scheme="http://codeameba.github.io/tags/Javascript/"/>
    
      <category term="패스트캠퍼스" scheme="http://codeameba.github.io/tags/%ED%8C%A8%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%8D%BC%EC%8A%A4/"/>
    
      <category term="TDD" scheme="http://codeameba.github.io/tags/TDD/"/>
    
      <category term="테스트주도개발" scheme="http://codeameba.github.io/tags/%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%A3%BC%EB%8F%84%EA%B0%9C%EB%B0%9C/"/>
    
  </entry>
  
  <entry>
    <title>[ReactJS] 무비앱 만들기 Day 04</title>
    <link href="http://codeameba.github.io/2019/08/29/react-movie-app-04/"/>
    <id>http://codeameba.github.io/2019/08/29/react-movie-app-04/</id>
    <published>2019-08-28T16:00:42.000Z</published>
    <updated>2020-01-31T09:58:43.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ReactJS-무비앱-만들기-Day-04"><a href="#ReactJS-무비앱-만들기-Day-04" class="headerlink" title="[ReactJS] 무비앱 만들기 Day 04"></a>[ReactJS] 무비앱 만들기 Day 04</h1><hr><h2 id="3-0-CSS-in-React-part-One"><a href="#3-0-CSS-in-React-part-One" class="headerlink" title="3.0 CSS in React part One"></a>3.0 CSS in React part One</h2><hr><h3 id="리액트에서-CSS를-적용하는-방법-01"><a href="#리액트에서-CSS를-적용하는-방법-01" class="headerlink" title="리액트에서 CSS를 적용하는 방법 01"></a>리액트에서 CSS를 적용하는 방법 01</h3><ul><li>styles.css 파일을 만들어서 스타일 적용</li><li>CSS를 적용할 요소에 className으로 클래스명 적어야 함</li><li>최상위 파일(index.js)에 import<ul><li><code>import &#39;styles.css&#39;;</code></li></ul></li><li>나쁜 방법은 아니나, 컴포넌트와 CSS가 분리되어 있다는 게 단점.<ul><li>컴포넌트를 쓰는 가장 큰 이유는 캡슐화(Encapulation)에 있음.</li></ul></li></ul><br><h3 id="리액트에서-CSS를-적용하는-방법-02"><a href="#리액트에서-CSS를-적용하는-방법-02" class="headerlink" title="리액트에서 CSS를 적용하는 방법 02"></a>리액트에서 CSS를 적용하는 방법 02</h3><ul><li>기능별로 별도 컴포넌트를 생성</li><li>각 컴포넌트마다 CSS 파일의 생성 및 적용</li><li>이 방법에도 단점은 있음<ul><li>첫째, CSS 파일을 생성해야 된다는 점.</li><li>둘째, 사용할 때마다 import를 해야 한다는 점.</li><li>셋째, className을 기억해야 한다는 점.(CSS는 Global로 작동하기 때문)</li></ul></li></ul><br><h2 id="3-1-CSS-in-React-part-Two"><a href="#3-1-CSS-in-React-part-Two" class="headerlink" title="3.1 CSS in React part Two"></a>3.1 CSS in React part Two</h2><hr><h3 id="리액트에서-CSS를-적용하는-방법-03"><a href="#리액트에서-CSS를-적용하는-방법-03" class="headerlink" title="리액트에서 CSS를 적용하는 방법 03"></a>리액트에서 CSS를 적용하는 방법 03</h3><ul><li>CSS를 컴포넌트 스코프에서 작동하도록 하는 방법.</li><li>CSS 모듈이라고 부름.</li><li>className을 임의화해서 local로 작동하게 함.</li></ul><p><strong>src - Components - Header - Header.module.css</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.navList</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CSS 파일명을 <code>Header.module.css</code> 방식으로 변경</li><li>import는 자바스크립트와 같은 방식<ul><li><code>import styles from ‘./Header.module.css’;</code></li></ul></li><li>className을 자바스크립트의 객체처럼 사용함.</li></ul><p><strong>src - Components - Header - Header.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      &lt;ul className=&#123;styles.navList&#125;&gt; <span class="comment">// &lt;- like this</span></span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;a href=<span class="string">"/a"</span>&gt;Home&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;a href=<span class="string">"/tv"</span>&gt;TV&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;a href=<span class="string">"/search"</span>&gt;Search&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>header&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><p>class명이 랜덤으로 생성됨.</p><img src="/images/random-class.png"></li><li><p><code>yarn add node-sass</code> 설치 후 아래와 같이 작성할 수도 있음.</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.navList</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: deeppink;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>이러한 모듈 방식도 괜찮기는 하지만 className을 기억해야 한다는 점이 단점이다.</p></li><li><p>여전히 JS와 CSS가 동떨어져 있다는 느낌을 지울 수가 없다. 둘을 하나의 파일에서 쓸 수 있는 방법은 무엇이 있을까?</p></li></ul><br><h2 id="3-2-CSS-in-React-part-Three"><a href="#3-2-CSS-in-React-part-Three" class="headerlink" title="3.2 CSS in React part Three"></a>3.2 CSS in React part Three</h2><hr><h3 id="리액트에서-CSS를-적용하는-방법-04"><a href="#리액트에서-CSS를-적용하는-방법-04" class="headerlink" title="리액트에서 CSS를 적용하는 방법 04"></a>리액트에서 CSS를 적용하는 방법 04</h3><ul><li>JS를 이용한 니코의 최애 방법은 <strong>styled-components</strong></li><li>우선 설치가 필요함<ul><li><code>yarn add styled-components</code></li></ul></li><li>설치 후 import<ul><li><code>import styled from &#39;styled-components&#39;</code></li></ul></li></ul><blockquote><p>TIP)<br><strong>vscode-styled-components</strong> 확장 프로그램을 설치하면 텍스트에 색상이 들어감.</p></blockquote><ul><li>styled-component 작성 후 아래와 같이 태그로 사용</li></ul><p><strong>src - Components - Header.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> List = styled.ul<span class="string">`</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  &amp;:hover &#123;</span></span><br><span class="line"><span class="string">    background-color: deeppink;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      &lt;List&gt; <span class="comment">// &lt;- here</span></span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;a href=<span class="string">"/"</span>&gt;Home&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;a href=<span class="string">"/tv"</span>&gt;TV&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;a href=<span class="string">"/search"</span>&gt;Search&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">      &lt;<span class="regexp">/List&gt; /</span><span class="regexp">/ &lt;- here</span></span><br><span class="line"><span class="regexp">    &lt;/</span>header&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><ul><li><code>&lt;a&gt;&lt;/a&gt;</code>태그를 사용하면 링크로 이동할 때마다 뷰를 다시 렌더링 하는데, 굉장히 비효율적이다.</li><li>따라서, React에서는 <code>Link</code>라는 기능을 사용함.<ul><li><code>import { Link } from &#39;react-router-dom&#39;;</code></li><li>동일한 페이지에 있을 경우 해당 요소만 교체하는 방식</li></ul></li><li>이 경우에는 아래와 같이 styled-components를 적용<ul><li><code>const SLink = styled(Link)``;</code></li></ul></li><li>Link는 Router 밖에서 사용할 수 없으므로 아래와 같은 형식의 문장 구조를 이룸</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Header /&gt; <span class="comment">// &lt;- here</span></span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/"</span> exact component=&#123;Home&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/tv"</span> exact component=&#123;TV&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/tv/popular"</span> render=&#123;() =&gt; <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>popular<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/search"</span> component=&#123;Search&#125; /&gt;</span><br><span class="line">        &lt;Redirect <span class="keyword">from</span>=<span class="string">"*"</span> to=<span class="string">"/"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><br><h2 id="3-3-GlobalStyles-and-Header"><a href="#3-3-GlobalStyles-and-Header" class="headerlink" title="3.3 GlobalStyles and Header"></a>3.3 GlobalStyles and Header</h2><hr><h3 id="Global-style-적용"><a href="#Global-style-적용" class="headerlink" title="Global style 적용"></a>Global style 적용</h3><ul><li>글로벌로 설정하는 이유는 해당 사이트의 폰트를 설정하거나, styled-components를 설치하거나 하는 등의 작업 때문.</li><li>우선 <code>yarn add styled-reset</code></li><li><a href="https://github.com/zacanger/styled-reset" target="_blank" rel="external nofollow noopener noreferrer">GitHub - zacanger/styled-reset: Eric Meyer’s Reset CSS for styled-components</a></li><li>styled-reset은 SC를 이용하여 CSS초기화 한 뒤 0의 상태에서 시작할 수 있게 해줌.</li><li>GlobalStyles.js 파일 생성</li></ul><p><strong>src - Components - GlobalStyles.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createGlobalStyle &#125; <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"><span class="keyword">import</span> reset <span class="keyword">from</span> <span class="string">'styled-reset'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> globalStyles = createGlobalStyle<span class="string">`</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;reset&#125;</span>;</span></span><br><span class="line"><span class="string">  a &#123;</span></span><br><span class="line"><span class="string">    text-decoration: none;</span></span><br><span class="line"><span class="string">    color: inherit;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  * &#123;</span></span><br><span class="line"><span class="string">    box-sizing: border-box;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  body &#123;</span></span><br><span class="line"><span class="string">    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;</span></span><br><span class="line"><span class="string">    font-size: 14px;</span></span><br><span class="line"><span class="string">    background-color: rgba(20, 20, 20, 1);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> globalStyles;</span><br></pre></td></tr></table></figure><p><strong>src - Components - App.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'Components/Router'</span>;</span><br><span class="line"><span class="keyword">import</span> GlobalStyles <span class="keyword">from</span> <span class="string">'./GlobalStyles'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;&gt;</span><br><span class="line">        &lt;Router /&gt;</span><br><span class="line">        &lt;GlobalStyles /&gt;</span><br><span class="line">      &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><br><h2 id="3-4-Location-Aware-Header"><a href="#3-4-Location-Aware-Header" class="headerlink" title="3.4 Location Aware Header"></a>3.4 Location Aware Header</h2><hr><ul><li>선택된 Header의 border에만 컬러링</li><li>해당 요소에 props를 줌</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Item = styled.li<span class="string">`</span></span><br><span class="line"><span class="string">  width: 50px;</span></span><br><span class="line"><span class="string">  height: 50px;</span></span><br><span class="line"><span class="string">  text-align: center;</span></span><br><span class="line"><span class="string">  border-bottom: 5px solid <span class="subst">$&#123;props =&gt; props.current ? <span class="string">'deeppink'</span> : <span class="string">'transparent'</span>&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><ul><li>props로 현재 선택된 Header의 Router를 전달해야 함<ul><li>이때 <code>withRouter</code>을 사용. 이것은 컴포넌트를 감싸는 또 다른 컴포넌트의 개념.</li><li>Router에 대한 정보를 줌.</li><li><code>import { Link, withRouter } from ‘react-router-dom’;</code></li><li>아래와 같은 형식으로 withRouter로 기존의 컴포넌트를 감싼다.</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HeaderC = <span class="function">(<span class="params">props</span>) =&gt;</span> (</span><br><span class="line">    &lt;Header&gt;</span><br><span class="line">      &#123;<span class="built_in">console</span>.log(props)&#125;</span><br><span class="line">      &lt;List&gt;</span><br><span class="line">        &lt;Item current=&#123;<span class="literal">false</span>&#125;&gt;</span><br><span class="line">          &lt;SLink to=<span class="string">"/"</span>&gt;Movies&lt;<span class="regexp">/SLink&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Item&gt;</span><br><span class="line">        &lt;Item current=&#123;<span class="literal">true</span>&#125;&gt;</span><br><span class="line">          &lt;SLink to=<span class="string">"/tv"</span>&gt;TV&lt;<span class="regexp">/SLink&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Item&gt;</span><br><span class="line">        &lt;Item current=&#123;<span class="literal">false</span>&#125;&gt;</span><br><span class="line">          &lt;SLink to=<span class="string">"/search"</span>&gt;Search&lt;<span class="regexp">/SLink&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Item&gt;</span><br><span class="line">      &lt;<span class="regexp">/List&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Header&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter(HeaderC);</span><br></pre></td></tr></table></figure><ul><li>위와 동일한 내용을 다른 형식으로 작성</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter(<span class="function"><span class="params">props</span> =&gt;</span> (</span><br><span class="line">    &lt;Header&gt;</span><br><span class="line">      &#123;<span class="built_in">console</span>.log(props)&#125;</span><br><span class="line">      &lt;List&gt;</span><br><span class="line">        &lt;Item current=&#123;<span class="literal">false</span>&#125;&gt;</span><br><span class="line">          &lt;SLink to=<span class="string">"/"</span>&gt;Movies&lt;<span class="regexp">/SLink&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Item&gt;</span><br><span class="line">        &lt;Item current=&#123;<span class="literal">true</span>&#125;&gt;</span><br><span class="line">          &lt;SLink to=<span class="string">"/tv"</span>&gt;TV&lt;<span class="regexp">/SLink&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Item&gt;</span><br><span class="line">        &lt;Item current=&#123;<span class="literal">false</span>&#125;&gt;</span><br><span class="line">          &lt;SLink to=<span class="string">"/search"</span>&gt;Search&lt;<span class="regexp">/SLink&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Item&gt;</span><br><span class="line">      &lt;<span class="regexp">/List&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Header&gt;</span><br><span class="line">));</span><br></pre></td></tr></table></figure><ul><li>console.log를 찍어보면 아래와 같이 props를 얻을 수 있음.</li></ul><img src="/images/withRouter-props.png"><ul><li><p>여기서 필요한 것은 pathname</p><ul><li><code>{ location: { pathname } }</code></li></ul></li><li><p>최종적으로 아래와 같이 pathname의 확인 결과가 boolean으로 나올 수 있도록 작성하면 선택한 요소에만 border 색상이 들어감.</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter(<span class="function">(<span class="params">&#123; location: &#123; pathname &#125; &#125;</span>) =&gt;</span> (</span><br><span class="line">    &lt;Header&gt;</span><br><span class="line">      &lt;List&gt;</span><br><span class="line">        &lt;Item current=&#123;pathname === <span class="string">'/'</span>&#125;&gt;</span><br><span class="line">          &lt;SLink to=<span class="string">'/'</span>&gt;Movies&lt;<span class="regexp">/SLink&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Item&gt;</span><br><span class="line">        &lt;Item current=&#123;pathname === <span class="string">'/tv'</span>&#125;&gt;</span><br><span class="line">          &lt;SLink to=<span class="string">'/tv'</span>&gt;TV&lt;<span class="regexp">/SLink&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Item&gt;</span><br><span class="line">        &lt;Item current=&#123;pathname === <span class="string">'/search'</span>&#125;&gt;</span><br><span class="line">          &lt;SLink to=<span class="string">'/search'</span>&gt;Search&lt;<span class="regexp">/SLink&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Item&gt;</span><br><span class="line">      &lt;<span class="regexp">/List&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Header&gt;</span><br><span class="line">));</span><br></pre></td></tr></table></figure><br><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ReactJS-무비앱-만들기-Day-04&quot;&gt;&lt;a href=&quot;#ReactJS-무비앱-만들기-Day-04&quot; class=&quot;headerlink&quot; title=&quot;[ReactJS] 무비앱 만들기 Day 04&quot;&gt;&lt;/a&gt;[ReactJS] 무비앱 만들기 
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="리액트" scheme="http://codeameba.github.io/tags/%EB%A6%AC%EC%95%A1%ED%8A%B8/"/>
    
      <category term="react" scheme="http://codeameba.github.io/tags/react/"/>
    
      <category term="노마드코더" scheme="http://codeameba.github.io/tags/%EB%85%B8%EB%A7%88%EB%93%9C%EC%BD%94%EB%8D%94/"/>
    
      <category term="nomadcoders" scheme="http://codeameba.github.io/tags/nomadcoders/"/>
    
  </entry>
  
  <entry>
    <title>[ReactJS] 무비앱 만들기 Day 03</title>
    <link href="http://codeameba.github.io/2019/08/28/react-movie-app-03/"/>
    <id>http://codeameba.github.io/2019/08/28/react-movie-app-03/</id>
    <published>2019-08-27T16:00:42.000Z</published>
    <updated>2020-01-31T09:58:43.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ReactJS-무비앱-만들기-Day-03"><a href="#ReactJS-무비앱-만들기-Day-03" class="headerlink" title="[ReactJS] 무비앱 만들기 Day 03"></a>[ReactJS] 무비앱 만들기 Day 03</h1><hr><h2 id="2-0-Setting-up-the-project"><a href="#2-0-Setting-up-the-project" class="headerlink" title="2.0 Setting up the project"></a>2.0 Setting up the project</h2><hr><h3 id="create-react-app"><a href="#create-react-app" class="headerlink" title="create-react-app"></a>create-react-app</h3><ul><li>yarn 또는 npm을 사용<ul><li><code>yarn global add create-react-app</code></li></ul></li><li>간편하게 react를 시작할 수 있게 해주는 모듈<ul><li><code>create-react-app</code></li></ul></li><li>컴퓨터에 저장하기 때문에 매번 버전 확인 및 업데이트를 해야한다는 번거로움이 있음.</li></ul><br><h3 id="npx"><a href="#npx" class="headerlink" title="npx"></a>npx</h3><ul><li>앞의 경우를  보완한 것이 npx를 통한 설치<ul><li><code>yarn global add npx</code> or <code>npm i npx -g</code></li></ul></li><li>이것 또한 모듈이지만, 컴퓨터에 저장할 필요가 없음.</li><li>항상 최신 버전의 create-react-app을 받아서 실행한 뒤, 끝나면 삭제 됨<ul><li><code>npx create-react-app</code></li></ul></li></ul><br><h3 id="prop-types"><a href="#prop-types" class="headerlink" title="prop-types"></a>prop-types</h3><ul><li>prop-types 모듈 설치 필요<ul><li><code>yarn add prop-types</code></li></ul></li></ul><br><h2 id="2-1-React-router-part-one"><a href="#2-1-React-router-part-one" class="headerlink" title="2.1 React router part one"></a>2.1 React router part one</h2><hr><h3 id="Screens"><a href="#Screens" class="headerlink" title="Screens"></a>Screens</h3><ul><li>[  ] Home</li><li>[  ] TV Shows</li><li>[  ] Search</li><li>[  ] Detail</li></ul><br><h3 id="React-Router"><a href="#React-Router" class="headerlink" title="React Router"></a>React Router</h3><ul><li><a href="https://github.com/ReactTraining/react-router" target="_blank" rel="external nofollow noopener noreferrer">GitHub - ReactTraining/react-router: Declarative routing for React</a><ul><li><a href="https://reacttraining.com/react-router/web/guides/quick-start" target="_blank" rel="external nofollow noopener noreferrer">React Router: Declarative Routing for React.js</a></li></ul></li><li>React App에게 Home에서 시작해야 한다는 걸 알려주기 위한 도구</li><li>React의 Routing 패키지</li><li>DOM과 react-native에도 사용 가능함</li><li>React Router는 컴포넌트 묶음이다.</li></ul><br><h2 id="2-2-React-router-part-two"><a href="#2-2-React-router-part-two" class="headerlink" title="2.2 React router part two"></a>2.2 React router part two</h2><hr><h3 id="HashRouter"><a href="#HashRouter" class="headerlink" title="HashRouter"></a>HashRouter</h3><ul><li>url에 해쉬태그가 들어가기 때문에 미관상 보기 좋지 않음</li><li><code>http://localhost:3000/#/home</code></li></ul><br><h3 id="BrowserRouter"><a href="#BrowserRouter" class="headerlink" title="BrowserRouter"></a>BrowserRouter</h3><ul><li>일반적인 웹 페이지의 url</li><li><code>http://localhost:3000/home</code></li></ul><br><h3 id="Composition"><a href="#Composition" class="headerlink" title="Composition"></a>Composition</h3><ul><li>두 개 이상의 Route를 동시에 랜더링 하는 방식<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/"</span> exact component=&#123;Home&#125; /&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/tv"</span> component=&#123;TV&#125; /&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/tv/popular"</span> render=&#123;() =&gt; <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>popular<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>&#125; /&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/search"</span> component=&#123;Search&#125; /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><img src="/images/composition.png"></li></ul><br><h3 id="Redirect"><a href="#Redirect" class="headerlink" title="Redirect"></a>Redirect</h3><ul><li><code>&lt;Redirect from=“*” to=“/“ /&gt;</code></li><li>해당되는 페이지만 렌더링 되도록 함.<ul><li>But, 경로가 겹치게 되어서 에러가 나는데 그래서 <code>Switch</code>를 사용해야 함.</li></ul></li></ul><br><h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><ul><li>한 번에 오직 하나의 Route만 랜더링 할 수 있게 함.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Router.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Redirect, Switch &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'Routes/Home'</span>;</span><br><span class="line"><span class="keyword">import</span> TV <span class="keyword">from</span> <span class="string">'Routes/TV'</span>;</span><br><span class="line"><span class="keyword">import</span> Search <span class="keyword">from</span> <span class="string">'Routes/Search'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;Switch&gt; <span class="comment">// &lt;- Switch</span></span><br><span class="line">      &lt;Route path=<span class="string">"/"</span> exact component=&#123;Home&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/tv"</span> component=&#123;TV&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/tv/popular"</span> render=&#123;() =&gt; <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>popular<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/search"</span> component=&#123;Search&#125; /&gt;</span><br><span class="line">      &lt;Redirect <span class="keyword">from</span>=<span class="string">"*"</span> to=<span class="string">"/"</span> /&gt; <span class="comment">// &lt;- Redirect</span></span><br><span class="line">    &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>Router&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><br><h3 id="exact"><a href="#exact" class="headerlink" title="exact"></a>exact</h3><ul><li>주어진 경로와 정확히 동일할 때 설정한 컴포넌트를 보여줌.</li></ul><hr><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><ul><li><a href="https://velopert.com/3417" target="_blank" rel="external nofollow noopener noreferrer">react-router :: 1장. 리액트 라우터 사용해보기 | VELOPERT.LOG</a></li><li><a href="https://reacttraining.com/react-router/web/guides/quick-start" target="_blank" rel="external nofollow noopener noreferrer">React Router: Declarative Routing for React.js</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ReactJS-무비앱-만들기-Day-03&quot;&gt;&lt;a href=&quot;#ReactJS-무비앱-만들기-Day-03&quot; class=&quot;headerlink&quot; title=&quot;[ReactJS] 무비앱 만들기 Day 03&quot;&gt;&lt;/a&gt;[ReactJS] 무비앱 만들기 
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="리액트" scheme="http://codeameba.github.io/tags/%EB%A6%AC%EC%95%A1%ED%8A%B8/"/>
    
      <category term="react" scheme="http://codeameba.github.io/tags/react/"/>
    
      <category term="노마드코더" scheme="http://codeameba.github.io/tags/%EB%85%B8%EB%A7%88%EB%93%9C%EC%BD%94%EB%8D%94/"/>
    
      <category term="nomadcoders" scheme="http://codeameba.github.io/tags/nomadcoders/"/>
    
  </entry>
  
  <entry>
    <title>[ReactJS] 무비앱 만들기 Day 02</title>
    <link href="http://codeameba.github.io/2019/08/27/react-movie-app-02/"/>
    <id>http://codeameba.github.io/2019/08/27/react-movie-app-02/</id>
    <published>2019-08-26T16:00:42.000Z</published>
    <updated>2020-01-31T09:58:43.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ReactJS-무비앱-만들기-Day-02"><a href="#ReactJS-무비앱-만들기-Day-02" class="headerlink" title="[ReactJS] 무비앱 만들기 Day 02"></a>[ReactJS] 무비앱 만들기 Day 02</h1><hr><br><h2 id="1-6-Array-map"><a href="#1-6-Array-map" class="headerlink" title="1.6 Array.map"></a>1.6 Array.map</h2><hr><ul><li>API로부터 배열로 된 데이터를 받게 되기 때문에 배열 메서드는 중요함</li><li>map 메서드는 해당 배열 요소에 모두 동일한 사항을 매핑하여 새로운 배열을 만들어냄</li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="external nofollow noopener noreferrer">Array.prototype.map() - JavaScript | MDN</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> days = [<span class="string">'Mon'</span>, <span class="string">'Tue'</span>, <span class="string">'Wed'</span>, <span class="string">'Thu'</span>, <span class="string">'Fri'</span>];</span><br><span class="line"><span class="keyword">const</span> drinkDays = days.map(<span class="function"><span class="params">day</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;day&#125;</span>: I'll drink beer`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(drinkDays);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">'Mon: I'll drink beer',</span></span><br><span class="line"><span class="comment">'Tue: I'll drink beer',</span></span><br><span class="line"><span class="comment">'Wed: I'll drink beer',</span></span><br><span class="line"><span class="comment">'Thu: I'll drink beer',</span></span><br><span class="line"><span class="comment">'Fri: I'll drink beer'</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><br><h2 id="1-7-Array-filter"><a href="#1-7-Array-filter" class="headerlink" title="1.7 Array.filter"></a>1.7 Array.filter</h2><hr><ul><li>filter 메서드는 주어진 조건을 만족하는 요소만으로 새로운 배열을 만듬</li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="external nofollow noopener noreferrer">Array.prototype.filter() - JavaScript | MDN</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [ <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">32</span>, <span class="number">31</span>, <span class="number">5</span>, <span class="number">64</span>, <span class="number">12</span>, <span class="number">24</span>, <span class="number">87</span>, <span class="number">66</span>, <span class="number">59</span>, <span class="number">243</span>, <span class="number">356</span>, <span class="number">645</span>, <span class="number">210</span> ];</span><br><span class="line"><span class="keyword">const</span> biggerThan50 = numbers.filter(<span class="function"><span class="params">num</span> =&gt;</span> num &gt; <span class="number">50</span>);</span><br><span class="line"><span class="built_in">console</span>.log(biggerThan50);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">   64,  87,  66,  59, 243, 356, 645, 210</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><br><h2 id="1-8-forEach-includes-push"><a href="#1-8-forEach-includes-push" class="headerlink" title="1.8 forEach / includes / push"></a>1.8 forEach / includes / push</h2><hr><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><ul><li>새로운 배열을 반환하는 map이나 filter와 다름</li><li>배열 각각의 요소에 접근하여 조건에 받는 요소를 반환</li><li>로컬 스토리지에 저장한다던가, API로 보낸다던가, 경고를 보낸다던가 하는 등의 작업에 사용</li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="external nofollow noopener noreferrer">Array.prototype.forEach() - JavaScript | MDN</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> beers = [<span class="string">'cass'</span>, <span class="string">'hite'</span>, <span class="string">'terra'</span>, <span class="string">'fitz'</span>];</span><br><span class="line">beers.forEach(<span class="function"><span class="params">beer</span> =&gt;</span> <span class="built_in">console</span>.log(beer));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">cass</span></span><br><span class="line"><span class="comment">hite</span></span><br><span class="line"><span class="comment">terra</span></span><br><span class="line"><span class="comment">fitz</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><br><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><ul><li>배열에 새로운 요소를 추가할 때 사용함</li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank" rel="external nofollow noopener noreferrer">Array.prototype.push() - JavaScript | MDN</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> beers = [<span class="string">'cass'</span>, <span class="string">'hite'</span>, <span class="string">'terra'</span>, <span class="string">'fitz'</span>];</span><br><span class="line">beers.push(<span class="string">'kloud'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(beers);</span><br><span class="line"><span class="comment">// [ 'cass', 'hite', 'terra', 'fitz', 'kloud' ]</span></span><br></pre></td></tr></table></figure><br><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><ul><li>배열 내에 특정 요소가 존재하는 확인</li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" target="_blank" rel="external nofollow noopener noreferrer">Array.prototype.includes() - JavaScript | MDN</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cars = [<span class="string">'BMW'</span>, <span class="string">'AUDI'</span>, <span class="string">'VOLVO'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!cars.includes(<span class="string">'BENZ'</span>)) &#123;</span><br><span class="line">  cars.push(<span class="string">'BENZ'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cars);</span><br><span class="line"><span class="comment">// [ 'BMW', 'AUDI', 'VOLVO', 'BENZ' ]</span></span><br></pre></td></tr></table></figure><br><h2 id="추가-reduce"><a href="#추가-reduce" class="headerlink" title="추가) reduce"></a>추가) reduce</h2><hr><ul><li>reduce는 단순히 배열 내의 요소를 모두 합하여 하나로 만드는 역할만 하는 메서드가 아니다.</li><li>활용하기에 따라 무궁무진한 가능성이 있다.</li><li>꾸준히 반복 학습이 필요한 메서드 중 하나.</li><li><code>배열.reduce((누적값,현재값,인덱스,요소)=&gt;{return결과},초기값);</code></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="external nofollow noopener noreferrer">Array.prototype.reduce() - JavaScript | MDN</a></li></ul><hr><h3 id="참고-자료"><a href="#참고-자료" class="headerlink" title="참고 자료"></a>참고 자료</h3><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="external nofollow noopener noreferrer">Array.prototype.slice() - JavaScript | MDN</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="external nofollow noopener noreferrer">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce</a> </li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/split" target="_blank" rel="external nofollow noopener noreferrer">String.prototype.split() - JavaScript | MDN</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/parseInt" target="_blank" rel="external nofollow noopener noreferrer">parseInt() - JavaScript | MDN</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ReactJS-무비앱-만들기-Day-02&quot;&gt;&lt;a href=&quot;#ReactJS-무비앱-만들기-Day-02&quot; class=&quot;headerlink&quot; title=&quot;[ReactJS] 무비앱 만들기 Day 02&quot;&gt;&lt;/a&gt;[ReactJS] 무비앱 만들기 
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="리액트" scheme="http://codeameba.github.io/tags/%EB%A6%AC%EC%95%A1%ED%8A%B8/"/>
    
      <category term="react" scheme="http://codeameba.github.io/tags/react/"/>
    
      <category term="노마드코더" scheme="http://codeameba.github.io/tags/%EB%85%B8%EB%A7%88%EB%93%9C%EC%BD%94%EB%8D%94/"/>
    
      <category term="nomadcoders" scheme="http://codeameba.github.io/tags/nomadcoders/"/>
    
  </entry>
  
  <entry>
    <title>[ReactJS] 무비앱 만들기 Day 01</title>
    <link href="http://codeameba.github.io/2019/08/26/react-movie-app-01/"/>
    <id>http://codeameba.github.io/2019/08/26/react-movie-app-01/</id>
    <published>2019-08-25T16:00:42.000Z</published>
    <updated>2020-01-31T09:58:43.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ReactJS-무비앱-만들기-Day-01"><a href="#ReactJS-무비앱-만들기-Day-01" class="headerlink" title="[ReactJS] 무비앱 만들기 Day 01"></a>[ReactJS] 무비앱 만들기 Day 01</h1><hr><br><h2 id="1-1-Arrow-Function"><a href="#1-1-Arrow-Function" class="headerlink" title="1.1 Arrow Function"></a>1.1 Arrow Function</h2><hr><ul><li>ES6에서 새롭게 추가된 기능</li><li>ES6 이전 일반적인 형태의 함수에서는 return을 생략하면 undefined가 출력되었지만, 화살표 함수에서는 내부적으로 return을 자동으로 해주기 때문에 생략이 가능하다.</li><li>단,  <code>{}</code>를 사용한다면 return을 명시해줘야 한다.</li><li>parameter가 1개일 경우에는 <code>()</code> 생략 가능.</li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/%EC%95%A0%EB%A1%9C%EC%9A%B0_%ED%8E%91%EC%85%98" target="_blank" rel="external nofollow noopener noreferrer">화살표 함수 - JavaScript | MDN</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> beers = [<span class="string">'cass'</span>, <span class="string">'hite'</span>, <span class="string">'terra'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 이전</span></span><br><span class="line"><span class="keyword">const</span> beerFilter = beers.filter(<span class="function"><span class="keyword">function</span>(<span class="params">beer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> beer.length &gt; <span class="number">4</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(beerFilter); <span class="comment">// [ 'terra' ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 이후</span></span><br><span class="line"><span class="keyword">const</span> beerFilterVer2 = beers.filter(<span class="function"><span class="params">beer</span> =&gt;</span> beer.length &lt; <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(beerFilterVer2); <span class="comment">// [ 'cass', 'hite' ]</span></span><br></pre></td></tr></table></figure><br><h2 id="1-2-Template-Literals"><a href="#1-2-Template-Literals" class="headerlink" title="1.2 Template Literals"></a>1.2 Template Literals</h2><hr><ul><li>Template Literals는 Template와 변수, 문자열 등을 다루기에 적합한 방법이다.</li><li>백틱(backtracks)라고 부르는 기호를 활용하며 문자열로 출력하게 한다.</li><li>인자는 <code>${}</code>  이것으로 감싼다.</li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Template_literals" target="_blank" rel="external nofollow noopener noreferrer">Template literals - JavaScript | MDN</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> beerBox = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'CASS'</span>,</span><br><span class="line">    <span class="keyword">from</span>: <span class="string">'KOREA'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'STELLA'</span>,</span><br><span class="line">    <span class="keyword">from</span>: <span class="string">'BELGIUM'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'KIRIN'</span>,</span><br><span class="line">    <span class="keyword">from</span>: <span class="string">'JAPAN'</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> favBeer = beerBox.filter(<span class="function"><span class="params">beer</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (beer.from === <span class="string">'KOREA'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">`I LOVE <span class="subst">$&#123;beer.name&#125;</span>`</span>); <span class="comment">// &lt;- template literals</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// I LOVE CASS</span></span><br></pre></td></tr></table></figure><br><h2 id="1-3-Object-Destructuring"><a href="#1-3-Object-Destructuring" class="headerlink" title="1.3 Object Destructuring"></a>1.3 Object Destructuring</h2><hr><ul><li>우리말로 <strong>구조 분해 할당</strong> 이라고 하며, 동일한 할당 작업을 반복해야 할 때 이를 한 번에 할 수 있게 해줌.</li><li>비교적 적은 코드가 사용되기 때문에 깔끔하게 보인다는 게 장점</li><li>Object를 기반으로 생성됨.</li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="external nofollow noopener noreferrer">구조 분해 할당 - JavaScript | MDN</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> beer = &#123;</span><br><span class="line">  name: <span class="string">'CASS'</span>,</span><br><span class="line">  <span class="keyword">from</span>: <span class="string">'KOREA'</span>,</span><br><span class="line">  taste: <span class="string">'FRESH'</span>,</span><br><span class="line">  type: <span class="string">'LAGER'</span>,</span><br><span class="line">  <span class="keyword">with</span>: &#123;</span><br><span class="line">    morning: <span class="string">'CUP RA-MYEON'</span>,</span><br><span class="line">    afternoon: <span class="string">'PIZZA'</span>,</span><br><span class="line">    evening: <span class="string">'SAM-GYEOP-SAL'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; name, <span class="keyword">from</span>, taste, type, <span class="attr">with</span>: &#123; afternoon &#125; &#125; = beer;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name&#125;</span> is from <span class="subst">$&#123;<span class="keyword">from</span>&#125;</span>, this is <span class="subst">$&#123;taste&#125;</span> <span class="subst">$&#123;type&#125;</span>. I love drink with <span class="subst">$&#123;afternoon&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// CASS is from KOREA, this is FRESH LAGER. I love drink with PIZZA</span></span><br></pre></td></tr></table></figure><br><h2 id="1-4-Spread-Operator"><a href="#1-4-Spread-Operator" class="headerlink" title="1.4 Spread Operator"></a>1.4 Spread Operator</h2><hr><ul><li>배열이나 객체를 풀어줌(Unpack).</li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_syntax" target="_blank" rel="external nofollow noopener noreferrer">전개 구문 - JavaScript | MDN</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> days = [<span class="string">'Mon'</span>, <span class="string">'Tue'</span>, <span class="string">'Wed'</span>];</span><br><span class="line"><span class="keyword">const</span> otherDays = [<span class="string">'Thu'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allDays = [days, otherDays, <span class="string">'Sun'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(allDays);</span><br><span class="line"><span class="comment">// [ [ 'Mon', 'Tue', 'Wed' ], [ 'Thu', 'Fri', 'Sat' ], 'Sun' ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allDaysVer2 = [...days, ...otherDays, <span class="string">'Sun'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(allDaysVer2);</span><br><span class="line"><span class="comment">// [ 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun' ]</span></span><br></pre></td></tr></table></figure><br><h2 id="1-5-Classes"><a href="#1-5-Classes" class="headerlink" title="1.5 Classes"></a>1.5 Classes</h2><hr><ul><li>프로그래밍에는 크게 두 종류의 패러다임이 있다<ul><li>함수형 프로그래밍(Functional Programming)</li><li>객체 지향 프로그래밍(OOP, Object Oriented Programming)</li></ul></li><li>객체 지향 프로그래밍의 경우 모든 것을 객체나 클래스로 만들고, 부모 자식의 관계가 분명하다.</li><li>Class는 청사진(Blueprint)과 같다고 생각하면 된다.</li><li>리액트에서 지겹도록 사용하게 됨.</li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="external nofollow noopener noreferrer">Classes - JavaScript | MDN</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartPhone</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, made) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.made = made;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calling</span> <span class="keyword">extends</span> <span class="title">SmartPhone</span> </span>&#123;</span><br><span class="line">  ringRing() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello?'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  intro() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`This phone is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myPhone = <span class="keyword">new</span> SmartPhone(<span class="string">'iphone'</span>, <span class="string">'apple'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myPhone.name);</span><br><span class="line"><span class="comment">// iphone</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> yourPhone = <span class="keyword">new</span> Calling(<span class="string">'galaxy'</span>, <span class="string">'samsung'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(yourPhone.ringRing(), yourPhone.intro());</span><br><span class="line"><span class="comment">// Hello?</span></span><br><span class="line"><span class="comment">// This phone is galaxy</span></span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes/static" target="_blank" rel="external nofollow noopener noreferrer">static - JavaScript | MDN</a></li><li><a href="https://velog.io/@ddalpange/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B0%9D%EC%B2%B4-%EB%B3%B5%EC%82%AC%ED%95%98%EA%B8%B0" target="_blank" rel="external nofollow noopener noreferrer">자바스크립트 객체 복사하기</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze" target="_blank" rel="external nofollow noopener noreferrer">Object.freeze() - JavaScript | MDN</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ReactJS-무비앱-만들기-Day-01&quot;&gt;&lt;a href=&quot;#ReactJS-무비앱-만들기-Day-01&quot; class=&quot;headerlink&quot; title=&quot;[ReactJS] 무비앱 만들기 Day 01&quot;&gt;&lt;/a&gt;[ReactJS] 무비앱 만들기 
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="리액트" scheme="http://codeameba.github.io/tags/%EB%A6%AC%EC%95%A1%ED%8A%B8/"/>
    
      <category term="react" scheme="http://codeameba.github.io/tags/react/"/>
    
      <category term="노마드코더" scheme="http://codeameba.github.io/tags/%EB%85%B8%EB%A7%88%EB%93%9C%EC%BD%94%EB%8D%94/"/>
    
      <category term="nomadcoders" scheme="http://codeameba.github.io/tags/nomadcoders/"/>
    
  </entry>
  
  <entry>
    <title>[JavaScript] ++i 와 i++의 차이</title>
    <link href="http://codeameba.github.io/2019/08/20/js-til-increase-decrease/"/>
    <id>http://codeameba.github.io/2019/08/20/js-til-increase-decrease/</id>
    <published>2019-08-19T16:00:42.000Z</published>
    <updated>2020-01-31T09:58:43.618Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript-i-와-i-의-차이"><a href="#JavaScript-i-와-i-의-차이" class="headerlink" title="[JavaScript] ++i 와 i++의 차이"></a>[JavaScript] ++i 와 i++의 차이</h2><img src="https://images.unsplash.com/photo-1461773518188-b3e86f98242f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1400&q=60">***<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(i++);</span><br><span class="line"><span class="built_in">console</span>.log(++i);</span><br><span class="line"><span class="built_in">console</span>.log(i++);</span><br><span class="line"><span class="built_in">console</span>.log(++i);</span><br></pre></td></tr></table></figure><p>위의 출력 결과를 알 수 있겠는가? 불과 3개월 전의 나라면 단순하게 1, 2, 3, 4라고 답했을 지도 모르겠다. 하지만, 지금의 나는 둘의 차이를 분명하게 알고 있다.</p><p>위와 같이 <code>++</code> 혹은, <code>--</code>와 같이 더하기나 빼기 기호가 이어져 있는 연산자를 <strong>증감 연산자</strong>라고 하는데, 변수의 앞에 있을 경우 <strong>전위 증감 연산자</strong>, 뒤에 있을 경우 <strong>후위 증감 연산자</strong>라고 부른다.</p><p>이 증감 연산자는 말 그대로 숫자형의 변수를 1씩 증가 시키거나 1씩 감소 시킨다. 여기까지만 알고 있다면, 자연스럽게 위의 답을 1, 2, 3, 4라고 할 수 있을 것이다.</p><p>위의 답을 먼저 밝히자면 <code>0, 2, 2, 4</code>다.<br>1씩 증가하는 증감 연산자인데 어째서 1과 3이 빠지고 2씩 증가했는지 의아하게 생각할 누군가를 위해 개인적인 복습 겸 설명을 해볼까 한다.</p><p>여기서 우리는 위의 증감 연산자가 <strong>전위</strong>인가 <strong>후위</strong>인가를 주의 깊게 봐야 한다. 굳이 이름까지 다르게 붙였다는 것은 각각의 작동 방식이다 다르다는 것을 의미한다.</p><br><h3 id="전위-증감-연산자-i"><a href="#전위-증감-연산자-i" class="headerlink" title="전위 증감 연산자(++i)"></a>전위 증감 연산자(++i)</h3><hr><p>전위 증감 연산자는 변수의 값을 <strong>증가 먼저 시킨 뒤에 할당한다.</strong> 따라서 아래와 같은 경우가 있다면,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(++i);</span><br></pre></td></tr></table></figure><p>출력 값은 <code>1</code>이 나올 것이다.</p><br><h3 id="후위-증감-연산자-i"><a href="#후위-증감-연산자-i" class="headerlink" title="후위 증감 연산자(i++)"></a>후위 증감 연산자(i++)</h3><hr><p>반면에 후위 증감 연산자는 변수의 값을 <strong>할당 먼저 한 뒤에 증가 시킨다.</strong> 따라서 아래와 같은 경우가 있다면,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(i++);</span><br></pre></td></tr></table></figure><p>증가 시키기 전의 값인  <code>0</code>이 나올 것이다.</p><br><h3 id="증감-연산자의-반복"><a href="#증감-연산자의-반복" class="headerlink" title="증감 연산자의 반복"></a>증감 연산자의 반복</h3><hr><p>전위 증감 연산자를 쓰던 후위 증감 연산자를 쓰던 정해진 범위 내에서 증감이 이루어지기 때문에 최초의 값이 필요하다면 후위를, 최초의 값이 필요 없다면 전위를 쓰면 된다고 생각한다. 둘의 미묘한 속도 차이가 있다고는 하는데, 몇 차례 출력을 해본 결과로는 후위 증감 연산자가 약간 빠른 것 같기도 한다. 0.01초 정도.</p><p><strong>어쨌든 중요한 것은, 전위와 후위를 섞어 쓰지 않는 것이다. 하나를 정했다면 그 프로젝트에서는 끝까지 그걸로 가야만 한다. 그래야 평화로울 것이다.</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JavaScript-i-와-i-의-차이&quot;&gt;&lt;a href=&quot;#JavaScript-i-와-i-의-차이&quot; class=&quot;headerlink&quot; title=&quot;[JavaScript] ++i 와 i++의 차이&quot;&gt;&lt;/a&gt;[JavaScript] ++i 와
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="일기" scheme="http://codeameba.github.io/tags/%EC%9D%BC%EA%B8%B0/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="Javascript" scheme="http://codeameba.github.io/tags/Javascript/"/>
    
      <category term="증감연산자" scheme="http://codeameba.github.io/tags/%EC%A6%9D%EA%B0%90%EC%97%B0%EC%82%B0%EC%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>TIL(190820) - React 06</title>
    <link href="http://codeameba.github.io/2019/08/20/react-til-06/"/>
    <id>http://codeameba.github.io/2019/08/20/react-til-06/</id>
    <published>2019-08-19T16:00:42.000Z</published>
    <updated>2020-01-31T09:58:44.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TIL-190820-React-06"><a href="#TIL-190820-React-06" class="headerlink" title="TIL(190820) - React 06"></a>TIL(190820) - React 06</h1><hr><h2 id="Cutting-the-summary"><a href="#Cutting-the-summary" class="headerlink" title="Cutting the summary"></a>Cutting the summary</h2><hr><ul><li>텍스트의 크기를 배경에 맞추기 위해 자바스크립트에서 가공해야 함</li><li>이때 Array 메서드를 사용하는데, 문자열은 배열과 마찬가지로 iterable이기 때문.</li><li>예를 들어 아래와 같다.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> example = <span class="string">'This is string'</span>;</span><br><span class="line">example.length; <span class="comment">// 14</span></span><br><span class="line">example.slice(<span class="number">0</span>, <span class="number">5</span>); <span class="comment">// "This "</span></span><br></pre></td></tr></table></figure><ul><li>배열과 같이 length를 구할 수 있으며 slice 등의 메서드를 활용하여 가공이 가능하다.</li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/slice" target="_blank" rel="external nofollow noopener noreferrer">String.prototype.slice() - JavaScript | MDN</a></li><li>따라서 이를 통해 아래와 같이 활용이 가능하다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p className=<span class="string">"movie_summary"</span>&gt;&#123;summary.slice(<span class="number">0</span>,<span class="number">140</span>)&#125;&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Deploying-to-Github-Pages"><a href="#Deploying-to-Github-Pages" class="headerlink" title="Deploying to Github Pages"></a>Deploying to Github Pages</h2><hr><h3 id="gh-pages-설치"><a href="#gh-pages-설치" class="headerlink" title="gh-pages 설치"></a>gh-pages 설치</h3><ul><li><code>npm i gh-pages</code></li><li>gh-pages를 통해 GitHub-page 도메인에 보여지도록 할 수 있다.</li></ul><h3 id="package-JSON-설정"><a href="#package-JSON-설정" class="headerlink" title="package.JSON 설정"></a>package.JSON 설정</h3><ul><li>이때 홈페이지 주소는 해당 레포 이름</li><li>script에 deploy와 predeploy 항목을 추가<ul><li>deploy에는  <code>npm run build</code>를 한 다음 build 폴더를 업로드<ul><li><code>&quot;gh-pages -d build</code></li></ul></li><li>predeploy에는 <code>npm run build</code>를 설정하여 deploy를 호출할 때마다 build가 되도록 함<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span>:<span class="string">"movie_app_2019"</span>,</span><br><span class="line"><span class="attr">"version"</span>:<span class="string">"0.1.0"</span>,</span><br><span class="line"><span class="attr">"private"</span>:<span class="literal">true</span>,</span><br><span class="line"><span class="attr">"dependencies"</span>:&#123;</span><br><span class="line"><span class="attr">"axios"</span>:<span class="string">"^0.19.0"</span>,</span><br><span class="line"><span class="attr">"gh-pages"</span>:<span class="string">"^2.1.1"</span>,</span><br><span class="line"><span class="attr">"prop-types"</span>:<span class="string">"^15.7.2"</span>,</span><br><span class="line"><span class="attr">"react"</span>:<span class="string">"^16.9.0"</span>,</span><br><span class="line"><span class="attr">"react-dom"</span>:<span class="string">"^16.9.0"</span>,</span><br><span class="line"><span class="attr">"react-scripts"</span>:<span class="string">"3.1.0"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"scripts"</span>:&#123;</span><br><span class="line"><span class="attr">"start"</span>:<span class="string">"react-scriptsstart"</span>,</span><br><span class="line"><span class="attr">"build"</span>:<span class="string">"react-scriptsbuild"</span>,</span><br><span class="line"><span class="attr">"deploy"</span>:<span class="string">"gh-pages-dbuild"</span>,</span><br><span class="line"><span class="attr">"predeploy"</span>:<span class="string">"npmrunbuild"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"eslintConfig"</span>:&#123;</span><br><span class="line"><span class="attr">"extends"</span>:<span class="string">"react-app"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"browserslist"</span>:&#123;</span><br><span class="line"><span class="attr">"production"</span>:[</span><br><span class="line"><span class="string">"&gt;0.2%"</span>,</span><br><span class="line"><span class="string">"notdead"</span>,</span><br><span class="line"><span class="string">"notop_miniall"</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"development"</span>:[</span><br><span class="line"><span class="string">"last1chromeversion"</span>,</span><br><span class="line"><span class="string">"last1firefoxversion"</span>,</span><br><span class="line"><span class="string">"last1safariversion"</span></span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"homepage"</span>:<span class="string">"http://www.codeameba.com/react-basic-with-nomadcoders"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><ul><li><code>npm run deploy</code>를 하면 배포가 되는 것을 확인 할 수 있음</li><li>수정 후에는 deploy도 다시 해야 함</li><li><a href="http://www.codeameba.com/react-basic-with-nomadcoders/" target="_blank" rel="external nofollow noopener noreferrer">NOMFLIX</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TIL-190820-React-06&quot;&gt;&lt;a href=&quot;#TIL-190820-React-06&quot; class=&quot;headerlink&quot; title=&quot;TIL(190820) - React 06&quot;&gt;&lt;/a&gt;TIL(190820) - React 06&lt;/h1
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="Javascript" scheme="http://codeameba.github.io/tags/Javascript/"/>
    
      <category term="리액트" scheme="http://codeameba.github.io/tags/%EB%A6%AC%EC%95%A1%ED%8A%B8/"/>
    
      <category term="react" scheme="http://codeameba.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>TIL(190819) - React 05</title>
    <link href="http://codeameba.github.io/2019/08/19/react-til-05/"/>
    <id>http://codeameba.github.io/2019/08/19/react-til-05/</id>
    <published>2019-08-18T16:00:42.000Z</published>
    <updated>2020-01-31T09:58:43.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TIL-190819-React-05"><a href="#TIL-190819-React-05" class="headerlink" title="TIL(190819) - React 05"></a>TIL(190819) - React 05</h1><ul><li><p>내가 필요한 Movie List의 경로는 <code>movies.data.data.movies</code>이기 때문에 아래와 같이 단축표현으로 쓰면 좋음.</p></li><li><p><code>setState</code>에서 <code>movies: movies</code>로 key와 value의 이름이 같을 때에는 아래와 같이 하나만 써도 됨.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getMovies = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;<span class="attr">data</span>: &#123;<span class="attr">data</span>: &#123; movies &#125;&#125;&#125; = <span class="keyword">await</span> axios.get(<span class="string">'https://yts.lt/api/v2/list_movies.json'</span>); </span><br><span class="line">  <span class="keyword">this</span>.setState(&#123; movies, <span class="attr">isLoading</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>class형 모듈이 여러모로 할 수 있는 게 많지만, state가 필요하지 않다던가 하는 경우에는 굳이 class형 모듈을 쓰지 않고, 간단하게 함수형 모듈을 사용해도 좋음.</p></li><li><p>아래와 같이 api에 정해진 파라미터가 있으니 잘 살펴볼 것</p><img src="/images/api.png"></li><li><p>받아온 Movies를 <code>map()</code>메서드로 렌더링</p></li><li><p>key 빼먹으면 에러 남</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; isLoading, movies &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;&#123;isLoading ? <span class="string">'Loading...'</span> : movies.map(<span class="function"><span class="params">movie</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Movie</span> </span></span></span><br><span class="line"><span class="xml">      key=&#123;movie.id&#125;</span></span><br><span class="line"><span class="xml">      id=&#123;movie.id&#125; </span></span><br><span class="line"><span class="xml">      year=&#123;movie.year&#125; </span></span><br><span class="line"><span class="xml">      title=&#123;movie.title&#125; </span></span><br><span class="line"><span class="xml">      summary=&#123;movie.summary&#125; </span></span><br><span class="line"><span class="xml">      poster=&#123;movie.medium_cover_image&#125; </span></span><br><span class="line"><span class="xml">      /&gt;</span></span><br><span class="line">    &#125;)&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TIL-190819-React-05&quot;&gt;&lt;a href=&quot;#TIL-190819-React-05&quot; class=&quot;headerlink&quot; title=&quot;TIL(190819) - React 05&quot;&gt;&lt;/a&gt;TIL(190819) - React 05&lt;/h1
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="Javascript" scheme="http://codeameba.github.io/tags/Javascript/"/>
    
      <category term="리액트" scheme="http://codeameba.github.io/tags/%EB%A6%AC%EC%95%A1%ED%8A%B8/"/>
    
      <category term="react" scheme="http://codeameba.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>[번역] What is the difference between a URI, a URL and a URN?</title>
    <link href="http://codeameba.github.io/2019/08/18/uri-url-urn/"/>
    <id>http://codeameba.github.io/2019/08/18/uri-url-urn/</id>
    <published>2019-08-17T16:00:42.000Z</published>
    <updated>2020-01-31T09:58:44.313Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cdn.sstatic.net/Sites/stackoverflow/company/img/logos/so/so-logo.svg?v=a010291124bf"><p><i>Stackoverflow에 올라온 URI, URL, URN의 차이를 묻는 질문에 대한 답변 중 개인적으로 가장 이해하기 쉬웠던 답변을 번역함. 의역 포함.(원문 링크 - <a href="https://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn/1984225#1984225" target="_blank" rel="external nofollow noopener noreferrer">https://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn/1984225#1984225</a>)</i></p><h2 id="Q-URI와-URL-그리고-URN의-차이가-무엇인가요"><a href="#Q-URI와-URL-그리고-URN의-차이가-무엇인가요" class="headerlink" title="Q. URI와 URL 그리고 URN의 차이가 무엇인가요?"></a>Q. URI와 URL 그리고 URN의 차이가 무엇인가요?</h2><hr><p>사람들은 URI와 URL 그리고 URN을 각기 다른 것처럼 이야기 하는데, 내 눈에는 다 똑같아 보입니다. 이것들을 구분할 수 있는 차이점이 무엇인가요?</p><br>## A. URI(Uniform Resource Identifier)는 식별정보(Identify)를 지니고, URL(Uniform Resource Locator)은 위치정보(Locate)를 지닙니다. 위치정보 역시 하나의 식별정보이기 때문에 모든 URL은 URI이기도 합니다. 그러나, URI는 URL이 아닙니다.***<h3 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h3><hr><p><em>Roger Pate</em><br>이것은 내 이름입니다. 일종의 <strong>식별자</strong>로써 URI라고 할 수 있습니다. 하지만 URL은 아닙니다. 왜냐하면 이름만으로는 내 위치나 연락처에 대한 정보는 알 수 없기 때문이죠. 이런 경우, 식별자가 겹치는 사람이 미국에서만 적어도 5명은 될 겁니다.</p><p><em>4914 West Bay Street, Nassau, Bahamas</em><br>이것을 나의 현재 위치라고 가정하겠습니다. 물리적인 위치 식별자라고 볼 수 있죠. 식별자로써의 역할을 한다는 점은 URL이나 URI나 둘 다 같습니다만(모든 URL은 URI입니다), 이런 경우에는 간접적으로 나의 <strong>거주지</strong>를 식별할 수 있습니다. 이를 통해 나를 보다 정확하게 특정할 수 있겠죠. 물론, 저에게 룸메이트가 생긴다면 조금 달라질 테지만 말이죠.</p><h3 id="혼동하기-쉬운-것"><a href="#혼동하기-쉬운-것" class="headerlink" title="혼동하기 쉬운 것"></a>혼동하기 쉬운 것</h3><hr><p>위키피디아에서는 다음과 같이 설명하고 있습니다.</p><blockquote><p>컴퓨팅에서 URL은 식별된 리소스가 사용 가능한 위치와 검색 매커니즘을 지정하는 URI의 하위 집합이다. <strong>일반적인 사용이나 다수의 기술 문서, 토론 등에서 종종 URL은 URI의 동의어로 잘못 사용되기도 한다.</strong></p></blockquote><p>이처럼 혼동하는 경우가 심심치 않게 있어서, 많은 제품과 문서에서는 한 가지 용어만 사용하거나, 뚜렷하게 구분이 되는 기준을 지정하거나 또는, 그 둘을 동의어로 간주하기도 합니다.</p><h3 id="URN-Uniform-Resource-Name"><a href="#URN-Uniform-Resource-Name" class="headerlink" title="URN(Uniform Resource Name)"></a>URN(Uniform Resource Name)</h3><hr><p>내 이름인 <em>Roger Pate</em>를 URN이라고 볼 수도 있습니다. 하지만 실제 URN은 그보다 훨씬 더 엄격한 규제 안에서 존재하며, 장소와 시간을 특정할 수 있습니다.<br>내 이름이 URN이 될 수 없는 이유는 다음과 같습니다.</p><ul><li>첫째, 충분히 동명이인이 존재할 수 있습니다.</li><li>둘째, 내 이름은 증조할아버지의 이름을 따 지었기 때문에 고유하다고 할 수 없습니다.</li><li>셋째, 만약 내 후손 중에 누군가가 내 이름을 쓸 수 있는 가능성이 있습니다.<br>이와 같은 이유들로 내 이름은 URN이 되기에 적절치 않습니다.</li></ul><p>URN은 이처럼 매우 엄격한 제약 조건이 따르기에 URL과는 엄연히 다르며, URN과 URL은 둘 다 URI의 한 종류입니다.</p><br>## 역자주***내가 이해한 URI, URL, URN의 차이는 다음과 같다. 도서관에서 책을 찾는 상황으로 생각해보면 좋다고 생각한다.<img src="https://danielmiessler.com/images/uri-urn-url-miessler-2019-1024x969.png"><ul><li>URI는 해당 책의 제목, 저자, 출판사, 위치, ISBN 등 특정한 책을 찾을 때 필요한 모든 가용정보를 포함한다.</li><li>URL은 도서관이나 서점 등에서 따르는 도서분류규칙에 의거하여 특정 위치에 특정 도서가 있는 것이다. 이 경우 실제 콘텐츠인 책이 규칙을 벗어나 다른 위치로 옮겨지면 찾을 수 없을 텐데 이를 404 Error로 생각할 수 있다.</li><li>URN은 특정 책의 고유번호인 ISBN으로 볼 수 있다. 이를 통해 해당 콘텐츠에 직접적으로 접근이 가능한 것이다.</li></ul><img src="https://images.unsplash.com/photo-1553714198-c9d2ecdfe675?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80"><br>#### 참고 자료-  [https://danielmiessler.com/study/url-uri/](https://danielmiessler.com/study/url-uri/) -  [https://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn/1984225#1984225](https://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn/1984225#1984225) -  [https://en.wikipedia.org/wiki/Uniform_Resource_Name](https://en.wikipedia.org/wiki/Uniform_Resource_Name) <h4 id="이미지-출처"><a href="#이미지-출처" class="headerlink" title="이미지 출처"></a>이미지 출처</h4><ul><li>unsplash.com</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;https://cdn.sstatic.net/Sites/stackoverflow/company/img/logos/so/so-logo.svg?v=a010291124bf&quot;&gt;

&lt;p&gt;&lt;i&gt;Stackoverflow에 올라온 URI, URL, 
      
    
    </summary>
    
    
      <category term="HTTP" scheme="http://codeameba.github.io/categories/HTTP/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="url과 uri의 차이" scheme="http://codeameba.github.io/tags/url%EA%B3%BC-uri%EC%9D%98-%EC%B0%A8%EC%9D%B4/"/>
    
      <category term="url" scheme="http://codeameba.github.io/tags/url/"/>
    
      <category term="uri" scheme="http://codeameba.github.io/tags/uri/"/>
    
      <category term="urn" scheme="http://codeameba.github.io/tags/urn/"/>
    
  </entry>
  
  <entry>
    <title>TIL(190816) - 쿠키(Cookie)란 무엇인가?</title>
    <link href="http://codeameba.github.io/2019/08/16/cookie-til/"/>
    <id>http://codeameba.github.io/2019/08/16/cookie-til/</id>
    <published>2019-08-15T16:00:42.000Z</published>
    <updated>2020-01-31T09:58:42.748Z</updated>
    
    <content type="html"><![CDATA[<p><i>노마드 코더 유튜브 시청 뒤 정리하여 작성함(영상 링크 - <a href="https://youtu.be/1emZgLiGE4s" target="_blank" rel="external nofollow noopener noreferrer">https://youtu.be/1emZgLiGE4s</a>)</i></p><img src="https://images.unsplash.com/photo-1553349450-73822a912d0d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1506&q=80"><h2 id="쿠키-Cookie-란"><a href="#쿠키-Cookie-란" class="headerlink" title="쿠키(Cookie)란?"></a>쿠키(Cookie)란?</h2><hr><p>HTTP 프로토콜은 기본적으로 stateless(항상 연결되어 있지 않은, 상태 정보가 없는)이기 때문에 유저의 상태 정보를 기억해두기 위한 수단으로 고안된 것이 쿠키다.<br>쿠키는, 서버가 사용자의 웹 브라우저에 전송하는 작은 데이터 조각으로써, 특정 웹사이트에 최초 접속 시 발급된다. 이후, 브라우저는 그 데이터 조각을 저장해두었다가 동일한 서버에 재 요청 시 저장된 데이터를 함께 전송하여 방문했던 유저라는 것을 인증한다.<br>쿠키는 주로 다음의 세 가지 목적을 위해 사용한다.</p><h3 id="첫째-세션-관리-Session-management"><a href="#첫째-세션-관리-Session-management" class="headerlink" title="첫째, 세션 관리(Session management)"></a>첫째, 세션 관리(Session management)</h3><p>서버에 저장해야 할 로그인, 장바구니, 게임 스코어 등의 정보 관리</p><h3 id="둘째-개인화-Peronalization"><a href="#둘째-개인화-Peronalization" class="headerlink" title="둘째, 개인화(Peronalization)"></a>둘째, 개인화(Peronalization)</h3><p>사용자 선호, 테마 등의 설정</p><h3 id="셋째-트래킹-Tracking"><a href="#셋째-트래킹-Tracking" class="headerlink" title="셋째, 트래킹(Tracking)"></a>셋째, 트래킹(Tracking)</h3><p>사용자 행동을 기록하고 분석하는 용도</p><br>## 쿠키의 한계***쿠키는 다음과 같은 한계 또는 규칙을 지니고 있다.<h3 id="첫째-도메인-스코프-Domain-Scope"><a href="#첫째-도메인-스코프-Domain-Scope" class="headerlink" title="첫째, 도메인 스코프(Domain Scope)"></a>첫째, 도메인 스코프(Domain Scope)</h3><p>쿠키는 하나의 도메인에 묶여있다. 말 그대로 특정 웹사이트에서 발급된 쿠키는 다른 웹사이트에서 사용이 불가능하다. </p><h3 id="둘째-자동-전송-Sent-Automatically"><a href="#둘째-자동-전송-Sent-Automatically" class="headerlink" title="둘째, 자동 전송(Sent Automatically)"></a>둘째, 자동 전송(Sent Automatically)</h3><p>쿠키는 자동으로 전송된다. 서버는 원하는만큼 쿠키를 전송할 수 있고, 브라우저는 자동으로 쿠키를 저장한다.</p><h3 id="셋째-자동-설정-Set-Automatically"><a href="#셋째-자동-설정-Set-Automatically" class="headerlink" title="셋째, 자동 설정(Set Automatically)"></a>셋째, 자동 설정(Set Automatically)</h3><p>웹사이트에 접속 시 쿠키는 브라우저에 자동으로 전송된 뒤, 자동으로 설정된다.</p><br>## 쿠키의 사용 사례***현재의 웹에서 쿠키를 가장 적극적으로 사용한다고 할 수 있는 회사는 ‘페이스북’이다. 페이스북은 쿠키를 사용하여 유저가 어느 웹사이트를 방문했고, 관심사는 무엇이며, 무슨 물건을 구입하고 싶어하는 지까지 알아낸 뒤, 빅데이터를 구축한다. 그리고 그 빅데이터를 통해 놀라운 정확도로 타겟팅을 하여 마케팅을 한다.<img src="https://images.unsplash.com/photo-1543185377-b75671ac8741?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1400&q=60"><blockquote><p><strong>페이스북의 사례</strong>는 시사하는 바가 크다. 페이스북은 그들의 ‘좋아요’나 ‘댓글 기능’, ‘피드에 공유 기능’ 등을 다른 웹사이트에 제공함으로써 페이스북으로 요청이 가게 되고, 자동으로 쿠키를 발급한다. 그리고, 그 쿠키를 통해 유저가 접속한 웹사이트를 알아내고 유저의 행동패턴 빅데이터를 구축한다.</p></blockquote><br>#### 참고 자료- [HTTP 쿠키 - HTTP | MDN](https://developer.mozilla.org/ko/docs/Web/HTTP/Cookies)-  [https://www.youtube.com/watch?v=1emZgLiGE4s&t=317s](https://www.youtube.com/watch?v=1emZgLiGE4s&t=317s) ]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;i&gt;노마드 코더 유튜브 시청 뒤 정리하여 작성함(영상 링크 - &lt;a href=&quot;https://youtu.be/1emZgLiGE4s&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;ht
      
    
    </summary>
    
    
      <category term="HTTP" scheme="http://codeameba.github.io/categories/HTTP/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="쿠키" scheme="http://codeameba.github.io/tags/%EC%BF%A0%ED%82%A4/"/>
    
      <category term="cookie" scheme="http://codeameba.github.io/tags/cookie/"/>
    
      <category term="http" scheme="http://codeameba.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>TIL(190815) - React 04</title>
    <link href="http://codeameba.github.io/2019/08/15/react-til-04/"/>
    <id>http://codeameba.github.io/2019/08/15/react-til-04/</id>
    <published>2019-08-14T16:00:42.000Z</published>
    <updated>2020-01-31T09:58:43.970Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TIL-190815-React-04"><a href="#TIL-190815-React-04" class="headerlink" title="TIL(190815) - React 04"></a>TIL(190815) - React 04</h1><hr><ul><li>class component는 render 외에도 많은 것을 갖고 있다.</li><li>그 중의 하나가 life cycle method<ul><li>life cycle method는 react가 component를 생성하고 없애는 방법</li><li>component가 생성될 때 render 이전에 호출되는 함수들이 있고, 이후에 호출되는 함수들이 있다.</li><li>mounting / unmounting</li><li>updating</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"this is constructor"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line">  plus = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">current</span> =&gt;</span> (&#123; <span class="attr">count</span>: current.count + <span class="number">1</span> &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line">  minus = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">current</span> =&gt;</span> (&#123; <span class="attr">count</span>: current.count - <span class="number">1</span> &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this is render'</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;The number is &#123;<span class="keyword">this</span>.state.count&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;this.plus&#125;&gt;Plus&lt;/</span>button&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.minus&#125;&gt;Minus&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/constructor_first.png">- constructor는 render보다 먼저 호출된다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    isLoading: <span class="literal">true</span></span><br><span class="line">  &#125;;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;<span class="attr">isLoading</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; isLoading &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;isLoading ? 'Loading...' : 'We Are Ready!'&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>componentDidMount는 render 이후에 호출된다.</li></ul><h4 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h4><ul><li><a href="https://reactjs-kr.firebaseapp.com/docs/state-and-lifecycle.html" target="_blank" rel="external nofollow noopener noreferrer">https://reactjs-kr.firebaseapp.com/docs/state-and-lifecycle.html</a></li><li><a href="https://yts.lt/api" target="_blank" rel="external nofollow noopener noreferrer">https://yts.lt/api</a></li></ul><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><ul><li>fetch처럼 데이터를 받아올 때 사용함</li><li>async/await과 같이 사용 가능<ul><li>ex) axios가 데이터를 다 받아올 때까지 기다려달라는 의미.</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getMovies = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> movies = <span class="keyword">await</span> axios.get(<span class="string">'https://yts.lt/api/v2/list_movies.json'</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TIL-190815-React-04&quot;&gt;&lt;a href=&quot;#TIL-190815-React-04&quot; class=&quot;headerlink&quot; title=&quot;TIL(190815) - React 04&quot;&gt;&lt;/a&gt;TIL(190815) - React 04&lt;/h1
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="Javascript" scheme="http://codeameba.github.io/tags/Javascript/"/>
    
      <category term="리액트" scheme="http://codeameba.github.io/tags/%EB%A6%AC%EC%95%A1%ED%8A%B8/"/>
    
      <category term="react" scheme="http://codeameba.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>TIL(190814) - React 03</title>
    <link href="http://codeameba.github.io/2019/08/14/react-til-03/"/>
    <id>http://codeameba.github.io/2019/08/14/react-til-03/</id>
    <published>2019-08-13T16:00:42.000Z</published>
    <updated>2020-01-31T09:58:43.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TIL-190814-React-03"><a href="#TIL-190814-React-03" class="headerlink" title="TIL(190814) - React 03"></a>TIL(190814) - React 03</h1><hr><ul><li><p>컴포넌트에서 다루는 데이터는 두 종류</p><ul><li>props : 부모 컴포넌트가 자식 컴포넌트에게 주는 값</li><li>state : 컴포넌트 내부에서 선언하고 내부에서 값을 변경할 수 있음.</li></ul></li><li><p>받아온 props 값은 this로 조회 가능함</p></li><li><p>함수형 컴포넌트와 클래스형 컴포넌트의 주요 차이점</p><ul><li>함수형에는 state와 life cycle이 빠져있음</li><li>함수형은 초기 마운트 속도가 약간 빠르고 불필요한 부분이 없어서 메모리를 덜 차지함</li></ul></li><li><p>클래스형 컴포넌트</p><ul><li>render() 필수<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyName</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    name: <span class="string">'codeAmeba'</span></span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        hello. My Name is &#123;<span class="keyword">this</span>.props.name&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>함수형 컴포넌트</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyName = <span class="function">(<span class="params">&#123;name&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello. My Name is &#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">MyName.defaultProps = &#123;</span><br><span class="line">  name: <span class="string">'codeAmeba'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>동적인 데이터를 다룰 때에는 state를 사용함(ex: counter)</p><ul><li>state는 클래스형 컴포넌트에서만 가능<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line">  plus = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      count: <span class="keyword">this</span>.state.count + <span class="number">1</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  minus = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      count: <span class="keyword">this</span>.state.count - <span class="number">1</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;The number is &#123;<span class="keyword">this</span>.state.count&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;this.plus&#125;&gt;Plus&lt;/</span>button&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.minus&#125;&gt;Minus&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>위의 경우는 state를 변경하기 때문에 좋은 방법은 아님,</p></li><li><p>아래와 같이 current의 사용을 권함</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plus = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(<span class="function"><span class="params">current</span> =&gt;</span> (&#123; <span class="attr">count</span>: current.count + <span class="number">1</span> &#125;));</span><br><span class="line">&#125;;</span><br><span class="line">minus = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(<span class="function"><span class="params">current</span> =&gt;</span> (&#123; <span class="attr">count</span>: current.count - <span class="number">1</span> &#125;));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="중요-setState를-호출할-때마다-react는-새로운-state로-render를-다시-한다"><a href="#중요-setState를-호출할-때마다-react는-새로운-state로-render를-다시-한다" class="headerlink" title="(중요)setState를 호출할 때마다 react는 새로운 state로 render를 다시 한다."></a>(중요)setState를 호출할 때마다 react는 새로운 state로 render를 다시 한다.</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TIL-190814-React-03&quot;&gt;&lt;a href=&quot;#TIL-190814-React-03&quot; class=&quot;headerlink&quot; title=&quot;TIL(190814) - React 03&quot;&gt;&lt;/a&gt;TIL(190814) - React 03&lt;/h1
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="Javascript" scheme="http://codeameba.github.io/tags/Javascript/"/>
    
      <category term="리액트" scheme="http://codeameba.github.io/tags/%EB%A6%AC%EC%95%A1%ED%8A%B8/"/>
    
      <category term="react" scheme="http://codeameba.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>TIL(190813) - React 02</title>
    <link href="http://codeameba.github.io/2019/08/13/react-til-02/"/>
    <id>http://codeameba.github.io/2019/08/13/react-til-02/</id>
    <published>2019-08-12T16:00:42.000Z</published>
    <updated>2020-01-31T09:58:43.916Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TIL-190813-React-02"><a href="#TIL-190813-React-02" class="headerlink" title="TIL(190813) - React 02"></a>TIL(190813) - React 02</h1><hr><img src="/images/key_prop_warning.png"><ul><li><p>props를 전달할 때 고유값을 전달하지 않으면 위와 같이 경고가 뜬다.</p></li><li><p>따라서 props에 ID를 만들고 아래와 같이 key로 넘겨야 함.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;BeerBox.map(<span class="function"><span class="params">beer</span> =&gt;</span> (</span><br><span class="line">  &lt;Beers key=&#123;beer.id&#125; name=&#123;beer.name&#125; picture=&#123;beer.image&#125; /&gt;</span><br><span class="line">))&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>npm i prop-types</code></p><ul><li>props가 잘못 전달 되었을 때 이를 알려주는 도구</li><li>아래와 같이 각 필요한 데이터의 타입을 명시해준다<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Beers.propTypes = &#123;</span><br><span class="line">  name: PropTypes.string.isRequired,</span><br><span class="line">  picture: PropTypes.string.isRequired,</span><br><span class="line">  rating: PropTypes.number.isRequired</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="propTypes-참고"><a href="#propTypes-참고" class="headerlink" title="propTypes 참고"></a>propTypes 참고</h4></li></ul></li><li><p><a href="https://reactjs-kr.firebaseapp.com/docs/typechecking-with-proptypes.html" target="_blank" rel="external nofollow noopener noreferrer">https://reactjs-kr.firebaseapp.com/docs/typechecking-with-proptypes.html</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TIL-190813-React-02&quot;&gt;&lt;a href=&quot;#TIL-190813-React-02&quot; class=&quot;headerlink&quot; title=&quot;TIL(190813) - React 02&quot;&gt;&lt;/a&gt;TIL(190813) - React 02&lt;/h1
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="Javascript" scheme="http://codeameba.github.io/tags/Javascript/"/>
    
      <category term="리액트" scheme="http://codeameba.github.io/tags/%EB%A6%AC%EC%95%A1%ED%8A%B8/"/>
    
      <category term="react" scheme="http://codeameba.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>TIL(190812) - React 01</title>
    <link href="http://codeameba.github.io/2019/08/12/react-til-01/"/>
    <id>http://codeameba.github.io/2019/08/12/react-til-01/</id>
    <published>2019-08-11T16:00:42.000Z</published>
    <updated>2020-01-31T09:58:43.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TIL-190812-React-01"><a href="#TIL-190812-React-01" class="headerlink" title="TIL(190812) - React 01"></a>TIL(190812) - React 01</h1><hr><ul><li>리액트는 Virtual DOM<ul><li><a href="https://velopert.com/3236" target="_blank" rel="external nofollow noopener noreferrer">번역 리액트에 대해서 그 누구도 제대로 설명하기 어려운 것  – 왜 Virtual DOM 인가? | VELOPERT.LOG</a></li></ul></li><li>JSX라는 리액트만의 문법이 존재함.<ul><li>JS와 HTML이 섞인 듯한 느낌</li><li>두 단어 이상의 결합은 모두 카멜케이스(ex: className, backgroundColor)</li></ul></li><li>한 파일에 여러 컴포넌트가 들어올 수도 있음.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Potato</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>I love potato<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Hello&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Potato /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li><li>props<ul><li><a href="https://velopert.com/3629" target="_blank" rel="external nofollow noopener noreferrer">누구든지 하는 리액트 4편: props 와 state | VELOPERT.LOG</a></li></ul></li><li>자바스크립트의 문법을 대부분 그대로 쓸 수 있음<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Beer</span>(<span class="params">&#123; name &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>I love &#123; name &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BeerBox = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'Terra'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'Cass'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'Hite'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'Fitz'</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;BeerBox.map(<span class="function"><span class="params">item</span> =&gt;</span> (</span><br><span class="line">        &lt;Beer name=&#123;item.name&#125; /&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TIL-190812-React-01&quot;&gt;&lt;a href=&quot;#TIL-190812-React-01&quot; class=&quot;headerlink&quot; title=&quot;TIL(190812) - React 01&quot;&gt;&lt;/a&gt;TIL(190812) - React 01&lt;/h1
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://codeameba.github.io/categories/JavaScript/"/>
    
    
      <category term="til" scheme="http://codeameba.github.io/tags/til/"/>
    
      <category term="TIL" scheme="http://codeameba.github.io/tags/TIL/"/>
    
      <category term="Today I Learned" scheme="http://codeameba.github.io/tags/Today-I-Learned/"/>
    
      <category term="오늘배운것들" scheme="http://codeameba.github.io/tags/%EC%98%A4%EB%8A%98%EB%B0%B0%EC%9A%B4%EA%B2%83%EB%93%A4/"/>
    
      <category term="자바스크립트" scheme="http://codeameba.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="Javascript" scheme="http://codeameba.github.io/tags/Javascript/"/>
    
      <category term="리액트" scheme="http://codeameba.github.io/tags/%EB%A6%AC%EC%95%A1%ED%8A%B8/"/>
    
      <category term="react" scheme="http://codeameba.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Github pages에 Custom domain 적용하기</title>
    <link href="http://codeameba.github.io/2019/08/12/tip-custom-domain/"/>
    <id>http://codeameba.github.io/2019/08/12/tip-custom-domain/</id>
    <published>2019-08-11T16:00:42.000Z</published>
    <updated>2020-01-31T09:58:44.141Z</updated>
    
    <content type="html"><![CDATA[<img src="https://images.unsplash.com/photo-1542178036-2e5efe4d8f83?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1400&q=60"><h1 id="Github-pages에-Custom-domain-적용하기"><a href="#Github-pages에-Custom-domain-적용하기" class="headerlink" title="Github pages에 Custom domain 적용하기"></a>Github pages에 Custom domain 적용하기</h1><hr><p>얼마 전 가비아를 통해 codeameba.com 도메인을 구입했다. 그리고, 기존에 codeameba.github.io였던 블로그에 적용을 했다. 물론 커스텀도메인을 구입한 것도 적용한 것도 처음이라 나름의 시행착오는 있었지만, 결과적으로는 잘 돌아간다.</p><img src="/images/codeameba_cname.png"><p>지금이라면, 한 번에 커스텀 도메인을 연결할 자신이 있지만, 몇 개월 뒤, 몇 년 뒤에 다시 한다면 분명 똑같은 시행착오를 겪을 것이라는 걸 나는 잘 알고 있다. 그렇기에 간단히 기록으로 남겨두려 한다.</p><br><h2 id="1-도메인-구입"><a href="#1-도메인-구입" class="headerlink" title="1. 도메인 구입"></a>1. 도메인 구입</h2><hr><img src="/images/gabia01.png"><p>커스텀 도메인은 하늘에서 뚝 떨어지는 것이 아니다. 도메인 가치에 따른 사용료를 지불해야만 한다. 구글 도메인 서비스나, 한국에서 가장 많이 이용하는 가비아 같은 DNS 업체를 통해 본인이 사용하고 싶은 도메인을 검색해볼 수 있다. 내 경우에는 가비아에서 검색해보고 구입했는데, 아무도 쓰고 있지 않았고, .com인데도 불구하고 가격이 그다지 비싼 편도 아니었다.</p><br><h2 id="2-DNS-설정"><a href="#2-DNS-설정" class="headerlink" title="2. DNS 설정"></a>2. DNS 설정</h2><hr><p>어떤 웹페이지에 도메인을 적용할 것인지 가비아 내에서 설정을 해야 한다.(My가비아 -&gt; DNS 관리툴 바로 가기 -&gt; DNS 설정)</p><img src="/images/gabia03.png"><p>타입은 CNAME, 호스트는 www, 값에는 도메인을 연결할 페이지의 주소를 적는다.<br>TTL(Time To Live)은, 말 그대로 생존 기간을 말하는 것으로 네임서버에서 넘어간 호스트 정보가 유지되는 시간이라고 한다. 설정한 시간 뒤에 자동으로 정보가 소멸된다고 하는데, 아직 자세한 내용을 모르겠다. 공부할 것에 추가.</p><p>어쨌든 이렇게 설정한 뒤 저장을 한다.</p><h4 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h4><p><a href="https://library.gabia.com/contents/domain/4146" target="_blank" rel="external nofollow noopener noreferrer">https://library.gabia.com/contents/domain/4146</a><br><a href="https://www.youtube.com/watch?v=N_T_vhUsn1A" target="_blank" rel="external nofollow noopener noreferrer">WEB2-Domain Name System-12.DNS record &amp; CNAME - YouTube</a></p><br><h2 id="3-GitHub-Custom-domain-설정"><a href="#3-GitHub-Custom-domain-설정" class="headerlink" title="3. GitHub Custom domain 설정"></a>3. GitHub Custom domain 설정</h2><hr><p>DNS 쪽은 끝났고, 이제 github에서 설정해야 한다.</p><p>Settings -&gt; Github Pages -&gt; Custom domain 에 본인이 구매한 도메인을 적는다. 이때 꼭, www.를 붙인다. 그리고 Save.</p><img src="/images/github_pages.png"><p>아직 끝이 아니다. 해당 레포의 메인으로 돌아와보면 아래와 같이 CNAME이라는 새로운 파일이 생성된 것을 볼 수 있다. 이걸 열어서 www.를 붙인 형식으로 도메인을 적는다.</p><img src="/images/cnamefile.png"><blockquote><p>CNAME(Canonical Name): 하나의 도메인에 다른 이름을 부여하는 방식. 쉽게 말하자면 가명이라고 할 수 있다.</p></blockquote><br><h2 id="4-Hexo-추가-설정"><a href="#4-Hexo-추가-설정" class="headerlink" title="4. Hexo 추가 설정"></a>4. Hexo 추가 설정</h2><hr><p>Hexo의 경우 _config.yml에서 url을 CNAME으로 변경해야 한다. 그리고, 여기까지 설정했는데 제대로 도메인 적용이 안 된다면 Hexo의 CNAME Plugin을 설치해야 한다.<br><code>npm install hexo-generator-cname --save</code></p><p>설치 후에는 _config.yml 파일을 열어 다음과 같이 설정을 추가한다.<br><code>plugins: hexo-generator-cname</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;https://images.unsplash.com/photo-1542178036-2e5efe4d8f83?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1400&amp;q=6
      
    
    </summary>
    
    
      <category term="tip" scheme="http://codeameba.github.io/categories/tip/"/>
    
    
      <category term="hexo" scheme="http://codeameba.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="http://codeameba.github.io/tags/blog/"/>
    
      <category term="githubpages" scheme="http://codeameba.github.io/tags/githubpages/"/>
    
      <category term="dns" scheme="http://codeameba.github.io/tags/dns/"/>
    
      <category term="customdomain" scheme="http://codeameba.github.io/tags/customdomain/"/>
    
      <category term="cname" scheme="http://codeameba.github.io/tags/cname/"/>
    
  </entry>
  
</feed>
